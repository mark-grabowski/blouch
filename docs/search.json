[{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"direct-effect-model","dir":"Articles","previous_headings":"","what":"Direct effect model","title":"Basic Model Walkthrough","text":"Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016; see also Grabowski et al. 2023), can used test allometric constraints.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"create-phylogeny","dir":"Articles","previous_headings":"","what":"Create Phylogeny","title":"Basic Model Walkthrough","text":"Blouch package includes primate phylogeny 10KTrees Project (Arnold et al. 2010), used various simulations comes https://10ktrees.nunn-lab.org/. Version 3 primate phylogeny 301 tips. randomly reduce tip number 100 manageable tree using functions ape R package (Paradis et al. 2004)","code":"######################################################################################################## #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"set-trueknown-parameter-values","dir":"Articles","previous_headings":"","what":"Set true/known parameter values","title":"Basic Model Walkthrough","text":"Next set true/known parameter values. half-life (hl), stationary variance (vy), simulation translate α\\alpha () σy2\\sigma^2_y (sigma2_y). set ancestral value root (vX0) 0, instantaneous variance BM process (Sxx) 10.","code":"######################################################################################################## #Direct Effect Model ######################################################################################################## #Setup parameters Z_direct<-1 #Number of traits hl<-0.1 #half life a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 #value for ancestral state at the root node.  vY0 <- 0 #value for ancestral state at the root node.   Sxx<-10 #Variance of BM process"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"calculate-v-and-simulate-x-data","dir":"Articles","previous_headings":"","what":"Calculate V and simulate X data","title":"Basic Model Walkthrough","text":"use Blouch helper R function calc_direct_V calculate direct effect variance/covariance matrix, fastBM function phytools (Revell, 2011) simulate X variable following BM process.","code":"V<-calc_direct_V(phy,sigma2_y,a) #Calculate V - variance/covariance matrix X<-phytools::fastBM(phy,a=vX0,sig2=Sxx,internal=FALSE) #Simulate X BM variable on tree, with scaling 10 phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels..."},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"simulate-y-data","dir":"Articles","previous_headings":"","what":"Simulate Y data","title":"Basic Model Walkthrough","text":"Next set intercept slope parameters, simulate mu using V simulate Y. Finally make quick plot results. set intercept (alpha term) 2 slope 0.25.","code":"optima<-2 #Intecept beta<-0.25 #Slope  mu<-optima+X*beta #Simulate mu for Y  Y<-MASS::mvrnorm(n=1,mu,V) #Simulate direct effect Y trait  df<-data.frame(Y=Y,X=X) names(df)<-c(\"Y\",\"X\")  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.230186 -0.067083  0.004429  0.073317  0.210824  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 2.012457   0.016954  118.70   <2e-16 *** #> X           0.255341   0.004832   52.84   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.1065 on 48 degrees of freedom #> Multiple R-squared:  0.9831, Adjusted R-squared:  0.9827  #> F-statistic:  2792 on 1 and 48 DF,  p-value: < 2.2e-16"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"simulating-measurement-error","dir":"Articles","previous_headings":"","what":"Simulating measurement error","title":"Basic Model Walkthrough","text":"Next simulate measurement error - use standard deviation measurement error 0.01, provide Blouch vector (X_error Y_error), use rnorm function add error X Y variables. words, telling Blouch estimated error X Y 0.01, providing X Y variables offset random amount error standard deviation.","code":"X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"","what":"Combine data and tree","title":"Basic Model Walkthrough","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"############################################################################################################ #Make trdata file trait.data<-data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error)) trdata<-treeplyr::make.treedata(phy,trait.data) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(2,0.25) #Informed by linear model beta.prior<-c(0.25,0.25) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Basic Model Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  prior.slope.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"not-for-the-faint-of-heart","dir":"Articles","previous_headings":"","what":"Not for the faint of heart","title":"Basic Model Walkthrough","text":"lines Stan code setting priors. change values make appropriate analyses, just need change numbers . Stan programs Blouch/inst/stan folder named according model run. See Table S1 Grabowski (press) models. Remember, priors based know biological processes underlying research question prior predictive simulations (see McElreath 2020)","code":"#Stan Code"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"data-setup-for-blouch","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Basic Model Walkthrough","text":"use helper function blouch.direct.prep setup dat file Stan. name column trdata$dat contains response variable “Y_with_error”, associated error column name “Y_error,” direct effect predictor column named “X_with_error”, associated errors “X_error”. Finally, give helper function number predictor traits, 1 . last variables priors parameters .","code":"############################################################################################################ #Test Blouch prep code - direct effect model - blouch.direct.prep() dat<-blouch.direct.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\", hl.prior,vy.prior,optima.prior,beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"running-models","dir":"Articles","previous_headings":"","what":"Running models","title":"Basic Model Walkthrough","text":"run direct effect model first. priors used simulation. See Grabowski (press) setting priors. change values requires open Stan function, case blouchOU_direct, manually edit . Unfortunately way around present, trust - worth . example, four important priors model - values explored Grabowski (press). Remember, always prior predictive simulations first - words, look distributions values see actually biologically possible - see exploring priors step . Now let’s run direct effect model blouchOU_direct. Now let’s look results Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance  Prior vs. Posterior Plot Regression","code":"fit.direct<- rstan::sampling(object = blouch:::stanmodels$blouchOU_direct,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.direct,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_direct. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>         mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl      0.17       0 0.09 0.06 0.10 0.14 0.20  0.42  1726    1 #> vy      0.02       0 0.01 0.01 0.01 0.02 0.02  0.03  1637    1 #> optima  2.00       0 0.03 1.93 1.98 2.00 2.02  2.06  2991    1 #> beta[1] 0.26       0 0.01 0.24 0.25 0.26 0.26  0.27  3025    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:21:05 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.direct) #Extract posterior distribution hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-data.frame(post$optima) names(optima.post)<-\"post.optima\"  beta.post<-data.frame(post$beta) names(beta.post)<-\"post.beta\"  mu.link<-function(x.seq){optima.post+x.seq*beta.post} x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu <- sapply(x.seq , mu.link ) mu.mean <-lapply( mu , mean ) mu.mean<-data.frame(as.numeric(mu.mean)) names(mu.mean)<-\"mu.mean\"  mu.CI <- lapply( mu , rethinking::PI , prob=0.89 ) mu.CI<-data.frame(t(data.frame(mu.CI)),x.seq) names(mu.CI)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=Y,X=X) names(df)<-c(\"Y\",\"X\")  df2<-data.frame(x.seq,mu.mean)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::geom_abline(intercept=optima,slope=beta,alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df2,ggplot2::aes(x=x.seq,y=mu.mean),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  slope.plot rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"Basic Model Walkthrough","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable. steps similar direct effect model go fully. , create phylogeny randomly sampling 10K Trees phylogeny.","code":"######################################################################################################## #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"set-trueknown-parameter-values-1","dir":"Articles","previous_headings":"","what":"Set true/known parameter values","title":"Basic Model Walkthrough","text":"First simulate X Y data using generative model adaptive model. set true/known parameter values. half-life (hl), stationary variance (vy), simulation translate α\\alpha () σy2\\sigma^2_y (sigma2_y). set ancestral value root (vX0) 0, instantaneous variance BM process (Sxx) 10. use fastBM function phytools (Revell, 2011) simulate X variable following BM process. simulation setting instantaneous variance BM process (sigma2_x) 1, needs matrix format. Normally Blouch estimates part blouch.adapt.prep helper function.","code":"######################################################################################################## #Adaptive Model ######################################################################################################## #Setup parameters Z_adaptive<-1 #Number of traits hl<-0.1 a<-log(2)/hl vy<-0.1 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl)); vX0<-0 #value for ancestral state at the root node.  vY0<-0#value for ancestral state at the root node. sigma2_x<-matrix(1,1,1) #Variance of BM Process X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels..."},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"calculate-v-and-simulate-y-data","dir":"Articles","previous_headings":"","what":"Calculate V and simulate Y data","title":"Basic Model Walkthrough","text":"set intercept (alpha) 2 slope 0.25. use Blouch helper functions calc_adaptive_dmX calculate design matrix calc_adaptive_V calculate variance/covariance matrix. simulate mu using V simulate Y. Finally make quick plot results.","code":"optima<-2 #Intecept beta<-0.25 #Slope  dmX<-calc_adaptive_dmX(phy,a,X) #Calculate the design matrix V<-calc_adaptive_V(phy,a, sigma2_y, beta,  sigma2_x, Z_adaptive) #Calculate adaptive variance/covariance matrix  mu<-optima+dmX%*%beta #Simulate mu for Y Y<-MASS::mvrnorm(n=1,mu,V) #Simulate adaptive model Y trait  df<-data.frame(Y=Y,X=X) names(df)<-c(\"Y\",\"X\")  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.76863 -0.28298 -0.00467  0.27014  0.74924  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.91827    0.05439   35.27  < 2e-16 *** #> X            0.19999    0.04902    4.08 0.000169 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.3417 on 48 degrees of freedom #> Multiple R-squared:  0.2575, Adjusted R-squared:  0.242  #> F-statistic: 16.65 on 1 and 48 DF,  p-value: 0.000169"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"simulating-measurement-error-1","dir":"Articles","previous_headings":"","what":"Simulating measurement error","title":"Basic Model Walkthrough","text":"Next simulate measurement error - use standard deviation measurement error 0.01, provide Blouch vector (X_error Y_error), use rnorm function add error X Y variables. words, telling Blouch estimated error X Y 0.01, providing X Y variables offset random amount error standard deviation.","code":"######################################################################################################## #Simulate errors X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"data-setup-for-blouch-1","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Basic Model Walkthrough","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. Next set priors following format ","code":"############################################################################################################ #Make trdata file trait.data<-data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error)) trdata<-treeplyr::make.treedata(phy,trait.data)  ############################################################################################################ ######################################################################################################## #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(2,0.2) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model #View priors in Prior and Posterior Plots Code.Rmd"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"exploring-priors-1","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Basic Model Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot  use helper function blouch.adapt.prep() setup dat file Stan. name column trdata$dat contains response variable “Y_with_error”, associated error column name “Y_error,” direct effect predictor column named “X_with_error”, associated errors “X_error”. Finally, give helper function number predictor traits, 1 , prior distributions parameters.","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims));  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta,x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.slope.plot #Test Blouch prep code - adaptive model dat<-blouch.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",hl.prior,vy.prior,optima.prior,beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"running-models-1","dir":"Articles","previous_headings":"","what":"Running models","title":"Basic Model Walkthrough","text":"priors used simulation. See Grabowski (press) setting priors. change values requires open Stan function, case blouchOU_direct, manually edit . Unfortunately way around present, trust - worth . example, four important priors model - values explored Grabowski (press). Remember, always prior predictive simulations first - words, look distributions values see actually biologically possible - see exploring priors step . lines Stan code setting priors. change values make appropriate analyses, just need change numbers . Stan programs Blouch/inst/stan folder named according model run. See Table S1 Grabowski (press) models. Remember, priors based know biological processes underlying research question prior predictive simulations (see McElreath 2020). Now let’s run adaptive model blouchOU_adapt results include optimal regression, beta, evolutionary regression, beta_e, following Hansen et al. (2008) Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance Adaptation model  Prior vs. Posterior Plot Regression","code":"######################################################################################################## #Priors #hl ~ lognormal(log(0.25),0.25); #vy ~ exponential(5); #alpha ~ normal(2.0,0,2); #beta ~ normal(0.25,0.1); #Stan Code fit.adapt<- rstan::sampling(object = blouch:::stanmodels$blouchOU_adapt,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.adapt,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_adapt. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.14       0 0.07 0.05 0.10 0.13 0.18  0.32  1908    1 #> vy        0.15       0 0.04 0.08 0.11 0.14 0.17  0.25  1903    1 #> optima    1.94       0 0.09 1.77 1.88 1.94 2.00  2.12  2754    1 #> beta[1]   0.24       0 0.08 0.09 0.18 0.23 0.29  0.42  2420    1 #> beta_e[1] 0.19       0 0.06 0.07 0.15 0.19 0.23  0.32  2336    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:21:33 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.adapt) hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)  #calc_adaptive_V_plot<-function(phy,a, sigma2_y, beta,  sigma2_x){   plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta,x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_adaptive_cov_plot(post$a[i],post$sigma2_y[i],post$beta[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-data.frame(post$optima) names(optima.post)<-\"post.optima\"  beta.post<-data.frame(post$beta) names(beta.post)<-\"post.beta\"  mu.link<-function(x.seq){optima.post+x.seq*beta.post} x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu <- sapply(x.seq , mu.link ) mu.mean <-lapply( mu , mean ) mu.mean<-data.frame(as.numeric(mu.mean)) names(mu.mean)<-\"mu.mean\"  mu.CI <- lapply( mu ,rethinking:: PI , prob=0.89 ) mu.CI<-data.frame(t(data.frame(mu.CI)),x.seq) names(mu.CI)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=Y,X=X) names(df)<-c(\"Y\",\"X\")  df2<-data.frame(x.seq,mu.mean)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::geom_abline(intercept=optima,slope=beta,alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df2,ggplot2::aes(x=x.seq,y=mu.mean),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  slope.plot rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"direct-effect-and-adaptive-models","dir":"Articles","previous_headings":"","what":"Direct effect and adaptive models","title":"Basic Model Walkthrough","text":"Finally, can look models combination direct effect adaptive traits. Setup similar except two predictors. First create phylogeny randomly sampling 10K Trees phylogeny","code":"######################################################################################################## #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"set-trueknown-parameter-values-2","dir":"Articles","previous_headings":"","what":"Set true/known parameter values","title":"Basic Model Walkthrough","text":"simulate X Y data using generative model direct effect adaptive model. 1 direct effect trait, Xd, one adaptive trait, Xa. object Z always refers number traits, case Z_direct = number direct effect traits, Z_adaptive = number adaptive traits. simulation setting instantaneous variance BM process (sigma2_x) 1, needs matrix format. Normally Blouch estimates part blouch.direct.adapt.prep helper function.   one intercept term , two slopes - order Blouch always direct effect predictors first, followed adaptive predictors. Thus direct effect slope 0.35 adaptive slope 0.25. Except Blouch helper function calc_mixed_dmX, used mixed design matrices, functions adaptive model . One complication beta term calc_adaptive_V function call - sending function adaptive slope line beta[(Z_direct+1):(Z_adaptive+Z_direct)] one way specifying term. Finally make quick plot results.   Next simulate measurement error - use standard deviation measurement error 0.01, provide Blouch vector (X_error Y_error), use rnorm function add error X Y variables. words, telling Blouch estimated error X Y 0.01, providing X Y variables offset random amount error standard deviation. complication simulating error one trait - adaptive direct effect trait - extra lines code .","code":"############################################################################################################ #Direct effect + Adaptive Model ############################################################################################################ hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0  Z_direct<-1 Z_adaptive<-1 Z<-Z_direct+Z_adaptive sigma2_x<-matrix(1,1,1) #Variance of BM Process Xd<-rnorm(N,0,1) names(Xd)<-phy$tip.label phytools::phenogram(phy,Xd,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... Xa<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 phytools::phenogram(phy,Xa,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... Xs<-cbind(Xd,Xa) optima<-2 #Intecept beta<-c(0.35,0.25) #Slopes dmX<-calc_mixed_dmX(phy,a,Xs,Z_direct,Z_adaptive) mu<-optima+dmX%*%beta #Simulate mu for Y  V<-calc_adaptive_V(phy,a, sigma2_y, beta[(Z_direct+1):(Z_adaptive+Z_direct)],  sigma2_x, Z_adaptive) Y<-MASS::mvrnorm(n=1,mu,V)  df<-data.frame(Y=Y,X=Xs)  summary(lm(Y~Xs,df)) #>  #> Call: #> lm(formula = Y ~ Xs, data = df) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.238679 -0.059603  0.004496  0.053077  0.163165  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.97929    0.01391  142.32   <2e-16 *** #> XsXd         0.35619    0.01019   34.94   <2e-16 *** #> XsXa         0.24084    0.01588   15.17   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.0977 on 47 degrees of freedom #> Multiple R-squared:  0.9706, Adjusted R-squared:  0.9694  #> F-statistic: 775.9 on 2 and 47 DF,  p-value: < 2.2e-16  ggplot2::ggplot(data=df,ggplot2::aes(x=X.Xd,y=Y))+   ggplot2::geom_point() summary(lm(Y~X.Xd,df)) #>  #> Call: #> lm(formula = Y ~ X.Xd, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.56057 -0.12940  0.01279  0.18762  0.44894  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.99121    0.03335   59.70   <2e-16 *** #> X.Xd         0.36927    0.02440   15.13   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2347 on 48 degrees of freedom #> Multiple R-squared:  0.8267, Adjusted R-squared:  0.8231  #> F-statistic:   229 on 1 and 48 DF,  p-value: < 2.2e-16  ggplot2::ggplot(data=df,ggplot2::aes(x=X.Xa,y=Y))+   ggplot2::geom_point() summary(lm(Y~X.Xa,df)) #>  #> Call: #> lm(formula = Y ~ X.Xa, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.06619 -0.32149 -0.09678  0.24479  1.26696  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.02444    0.07117  28.446  < 2e-16 *** #> X.Xa         0.28776    0.08133   3.538 0.000905 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.5022 on 48 degrees of freedom #> Multiple R-squared:  0.2069, Adjusted R-squared:  0.1903  #> F-statistic: 12.52 on 1 and 48 DF,  p-value: 0.0009055 ######################################################################################################## #Simulate errors - for use with blouchOU_reg_direct_adaptive_ME Z_X_error<-2 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) names(X_error)<-c(\"Xd_error\",\"Xa_error\") Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-apply(Xs,2,function(X){X+rnorm(N,0,0.01)})"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"data-setup-for-blouch-2","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Basic Model Walkthrough","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. Next set priors following format - see exploring priors","code":"############################################################################################################ #Make trdata file trait.data<-data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error)) trdata<-treeplyr::make.treedata(phy,trait.data) ######################################################################################################## #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(2,0.2) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model #View priors in Prior and Posterior Plots Code.Rmd"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"exploring-priors-2","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Basic Model Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot   use helper function blouch.direct.adapt.prep setup dat file Stan. names direct effect adaptive columns Xd, Xa associated errors, Z_direct Z_adaptive number direct effect adaptive traits, respectively. Priors set , blouchOU_direct_adapt model run . results include, order, direct effect regression, optimal regression, finally beta_e, evolutionary regression, following Hansen et al. (2008) Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance Adaptation model  Prior vs. Posterior Plot Regression","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims));  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta,x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.direct.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X.Xd))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  prior.direct.slope.plot prior.adapt.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X.Xa))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.adapt.slope.plot ############################################################################################################ #Test Blouch prep code - Direct effect + Adaptive Model dat<-blouch.direct.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"Xd\",\"Xa\"),c(\"Xd_error\",\"Xa_error\"),Z_direct=1,Z_adaptive=1,hl.prior,vy.prior,optima.prior,beta.prior) fit.direct.adapt<- rstan::sampling(object = blouch:::stanmodels$blouchOU_direct_adapt,data = dat,chains = 2, cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.direct.adapt,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_direct_adapt. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.10       0 0.06 0.03 0.06 0.08 0.12  0.26   946    1 #> vy        0.01       0 0.00 0.00 0.01 0.01 0.01  0.02  2457    1 #> optima    1.99       0 0.03 1.93 1.97 1.99 2.01  2.05  2175    1 #> beta[1]   0.35       0 0.01 0.33 0.34 0.35 0.35  0.36  3466    1 #> beta[2]   0.28       0 0.04 0.23 0.26 0.28 0.30  0.38   914    1 #> beta_e[1] 0.24       0 0.02 0.20 0.23 0.24 0.26  0.28  2188    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:22:03 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.direct.adapt) hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims));  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta,x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_adaptive_cov_plot(post$a[i],post$sigma2_y[i],post$beta[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-data.frame(post$optima) names(optima.post)<-\"post.optima\"  beta.post<-data.frame(post$beta) names(beta.post)<-\"post.beta\"  #Direct Effect Model mu.link<-function(x.seq){optima.post+x.seq*beta.post[,1]} x.seq <- seq(from=min(df$X.Xd), to=max(df$X.Xd) , length.out=100) mu <- sapply(x.seq , mu.link ) mu.mean <-lapply( mu , mean ) mu.mean<-data.frame(as.numeric(mu.mean)) names(mu.mean)<-\"mu.mean\"  mu.CI <- lapply( mu ,rethinking:: PI , prob=0.89 ) mu.CI<-data.frame(t(data.frame(mu.CI)),x.seq) names(mu.CI)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")   df2<-data.frame(x.seq,mu.mean)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.diirect.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xd))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::geom_abline(intercept=optima,slope=beta[1],alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df2,ggplot2::aes(x=x.seq,y=mu.mean),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  slope.diirect.plot #Adaptation Model mu.link<-function(x.seq){optima.post+x.seq*beta.post[,2]} x.seq <- seq(from=min(df$X.Xa), to=max(df$X.Xa) , length.out=100) mu <- sapply(x.seq , mu.link ) mu.mean <-lapply( mu , mean ) mu.mean<-data.frame(as.numeric(mu.mean)) names(mu.mean)<-\"mu.mean\"  mu.CI <- lapply( mu ,rethinking:: PI , prob=0.89 ) mu.CI<-data.frame(t(data.frame(mu.CI)),x.seq) names(mu.CI)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df2<-data.frame(x.seq,mu.mean)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.adapt.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xa))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::geom_abline(intercept=optima,slope=beta[2],alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df2,ggplot2::aes(x=x.seq,y=mu.mean),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  slope.adapt.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Basic_Models-Examples.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Basic Model Walkthrough","text":"Grabowski M., Voje K.L., Hansen T.F. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Grabowski M., Kopperud B.T., Tsuboi M., Hansen T.F. 2023. Diet Sociality Affect Primate Brain-Size Evolution. Systematic Biology.:syac075. Hansen T.F., Bartoszek K. 2012. Interpreting evolutionary regression: interplay observational biological errors phylogenetic comparative studies. Syst Biol. 61:413–425. McElreath R. 2020. Statistical rethinking: Bayesian course examples R Stan. CRC press. Revell L.J. 2011. phytools: R package phylogenetic comparative biology (things). Methods Ecol. Evol. 3:217–223. Uyeda J.C., Harmon L.J. 2014. Novel Bayesian Method Inferring Interpreting Dynamics Adaptive Landscapes Phylogenetic Comparative Data. Systematic Biology. 63:902–918.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Tsuboi et al. (2024) collected expansive dataset antler size body size generated new Cervidae phylogeny test hypothesis Gould (1973) elaborate antlers Irish Elk result positive allometric relationship body size. supplemented dataset data Cervidae breeding group size categories Plard et al. (2011) Clutton-Brock et al. (1980) test hypothesis antler size influenced sexual selection using breeding group size predictor antler size. formulated Clutton-Brock et al. (1980), specific hypothesis relatively larger antlers larger bodied deer result intense sexual selection comes along tendency live larger breeding groups. Following Tsuboi et al. (2024) relationship posterior skull length antler volume hypothesized allometric thus direct effect model reasonable choice. Following Hansen (2014), sexual selection likely cause immediate change either body size antler volume, multi-optima model indicated. hypothesized causal relationship three variables shown directed acyclic graph (DAG) .  Blouch uses RStan implement Stan. following code enables compiler optimizations improve estimation speed model, taken : https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started.","code":"set.seed(11) ggplot2::theme_set(ggdag::theme_dag())  dag<-ggdag::ggdag(ggdag::dagify(   A ~ B,   P ~ B,   A ~ P,   A ~ u,   B ~ u,   P ~ u,   u ~ R   ))  dag #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) #2 For R package checks - use line above on your own machine rstan::rstan_options(auto_write = TRUE)  dotR <- file.path(Sys.getenv(\"HOME\"), \".R\") if (!file.exists(dotR)) dir.create(dotR) M <- file.path(dotR, \"Makevars\") if (!file.exists(M)) file.create(M) arch <- ifelse(R.version$arch == \"aarch64\", \"arm64\", \"x86_64\") cat(paste(\"\\nCXX14FLAGS += -O3 -mtune=native -arch\", arch, \"-ftemplate-depth-256\"),     file = M, sep = \"\\n\", append = FALSE)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"load-datasets","dir":"Articles","previous_headings":"","what":"Load datasets","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"First, load tree Tsuboi et al. (2024) dataset. Original ata Tsuboi et al. (2024) available DRYAD: https://doi.org/10.5061/dryad.kh18932dt, dataset including breeding group regims included Blouch package.","code":"######################################################################################################## set.seed(10)  ######################################################################################################## #For execution on a local, multicore CPU with excess RAM we recommend calling options(mc.cores = parallel::detectCores()) rstan::rstan_options(auto_write = TRUE)  ########################################################################################################  #Remove Muntiacus_atherodes, Elaphodus_cephalophus - rudamentary and female Rangifer - following Tsuboi et al. (2024) antler.data<-dplyr::filter(antler.data,Genus_Species != \"Sinomegaloceros_yabei\" & ! Genus_Species ==\"Alces_alces_gigas\"  & ! Genus_Species == \"Muntiacus_truongsonensis\" & ! Genus_Species ==  \"Mazama_temama\"& ! Genus_Species ==  \"Muntiacus_feae\" & ! Genus_Species ==  \"Muntiacus_atherodes\" & ! Genus_Species ==  \"Elaphodus_cephalophus\")"},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"combine-data-and-tree-and-paint-regimes-on-tree-","dir":"Articles","previous_headings":"","what":"Combine data and tree and paint regimes on tree.","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. Next reconstruct breeding group size regimes phylogeny using ace function R package ape. calculate likely regime node using maximum likelihood estimation (Pagel 1994) add internal nodes phylogeny. use equal-rates model (ER), -rates different model (ARD), symmetrical model (SYM), compare using AICc. Now lets check regime placements make sense","code":"cervid.trdata <- treeplyr::make.treedata(cervidae.tree, antler.data,name_column=\"Genus_Species\")  cervid.trdata<-dplyr::filter(cervid.trdata,!(is.na(log_ant_vol)) & !(is.na(log_psl))) #cervid.trdata<-dplyr::mutate(cervid.trdata,mc.log_psl=cervid.trdata$dat$log_psl-(mean(cervid.trdata$dat$log_psl)))  cervid.trdata<-dplyr::mutate(cervid.trdata,me.log_ant_vol=cervid.trdata$dat$log_vol_var_est/cervid.trdata$dat$n) cervid.trdata<-dplyr::mutate(cervid.trdata,me.log_psl=cervid.trdata$dat$log_psl_var_est/cervid.trdata$dat$n) cervid.trdata<-dplyr::filter(cervid.trdata,!(is.na(me.log_ant_vol)) & !(is.na(me.log_psl)))  #Mean standardize predictor cervid.trdata$dat$mc_log_psl<-cervid.trdata$dat$log_psl-mean(cervid.trdata$dat$log_psl) cervid.trdata$dat$mc_log_ant_vol<-cervid.trdata$dat$log_ant_vol-mean(cervid.trdata$dat$log_ant_vol)   ######################################################################################################## #Main text analysis adding in BGS effect as adaptive predictor ######################################################################################################## cervid.trdata.BGS<-dplyr::filter(cervid.trdata,!(is.na(BGS)))  #Rescale tree height to 1 l.tree<-max(ape::branching.times(cervid.trdata.BGS$phy)) cervid.trdata.BGS$phy$edge.length<-cervid.trdata.BGS$phy$edge.length/l.tree ## rescale tree to height 1 max(ape::branching.times(cervid.trdata.BGS$phy)) #> [1] 1  tip.label<-cervid.trdata.BGS$phy$tip.label phy<-cervid.trdata.BGS$phy #Dmat<-cophenetic(phy) #Time separating tips, same as tij matrix in Slouch/Blouch code ######################################################################################################## #Regime reconstruction using ace from ape reconstructed.BGS.ER <- ape::ace(as.factor(cervid.trdata.BGS$dat$BGS), cervid.trdata.BGS$phy, type = \"d\", model=\"ER\") reconstructed.BGS.ARD <- ape::ace(as.factor(cervid.trdata.BGS$dat$BGS), cervid.trdata.BGS$phy, type = \"d\", model=\"ARD\") reconstructed.BGS.SYM <- ape::ace(as.factor(cervid.trdata.BGS$dat$BGS), cervid.trdata.BGS$phy, type = \"d\", model=\"SYM\")  AIC(reconstructed.BGS.ER) #> [1] 61.86089 AIC(reconstructed.BGS.ARD) #> [1] 71.36351 AIC(reconstructed.BGS.SYM) #> [1] 65.36549  #The lowest AIC is for the equal rates model so we will use that in our analysis reconstructed.BGS<-reconstructed.BGS.ER  internal.regimes.BGS<- apply(reconstructed.BGS$lik.anc,                                       1,                                       function(e) colnames(reconstructed.BGS$lik.anc)[which.max(e)])  #Assign internal regimes to node.label on phylogeny - for use by Blouch prep functions cervid.trdata.BGS$phy$node.label<-as.factor(internal.regimes.BGS) ######################################################################################################## #Check if manual setting code worked - not needed for setting regimes shifts.total<-unlist(list(as.factor(cervid.trdata.BGS$dat$BGS),factor(internal.regimes.BGS))) edge.regimes <- factor(shifts.total[cervid.trdata.BGS$phy$edge[,2]]) print(edge.regimes) #> 32 33    34 35 36 37 38    39 40                41    42          43       44  #>  B  B  B  B  B  B  B  B  B  B  B  C  B  A  B  A  B  A  B  B  B  C  B  B  B  C  #> 45 46 47    48          49 50 51 52 53    54          55       56          57  #>  C  C  C  C  C  A  C  C  C  C  C  C  C  C  C  C  B  C  C  C  B  C  C  C  C  A  #>    58 59           #>  A  A  A  A  A  A  #> Levels: A B C  reg.colors<-ggsci::pal_aaas(\"default\", alpha = 1)(length(unique(edge.regimes)))  plot(cervid.trdata.BGS$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.5)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"setup-dataset-and-add-measurement-errors","dir":"Articles","previous_headings":"","what":"Setup dataset and add measurement errors","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now lets set variables - including measurement errors. call data whatever wanted (e.g “Y_with_error” ), long combine data together one Lets add data trdata variable, already contains tree","code":"######################################################################################################## #Setup Measurement Errors - for use with blouchOU_reg_direct N<-length(cervid.trdata.BGS$phy$tip.label) Z_direct<-1 Z_X_error<-1 Y_with_error<-cervid.trdata.BGS$dat$mc_log_ant_vol X_with_error<-cervid.trdata.BGS$dat$mc_log_psl Y_error<-sqrt(cervid.trdata.BGS$dat$me.log_ant_vol) #Standard error not variance X_error<-sqrt(cervid.trdata.BGS$dat$me.log_psl) #Standard error not variance trdata<-cervid.trdata.BGS regimes_tip <- cervid.trdata.BGS$dat$BGS ############################################################################################################ #Add errors to trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error)))"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"setting-priors","dir":"Articles","previous_headings":"","what":"Setting Priors","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Let’s make simple plot data, look simple ordinary least squares regression Y X. intercept slope values give us idea center priors .  priors used first analysis. See Grabowski (press) setting priors, optima (intercept) slope informed linar model.","code":"df<-data.frame(Y=Y_with_error,X=X_with_error) ols.coef<-summary(lm(Y~X,df)) ols.coef$coefficients[c(1,2)] #Intercept and slope #> [1] 0.0444186 6.3044512  ols.plot<-ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point()+   ggplot2::geom_abline(intercept=ols.coef$coefficients[1],slope=ols.coef$coefficients[2],alpha=0.1)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())  ols.plot ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.25) vy.prior<-10 optima.prior<-c(0.05,0.75) #Informed by linear model above beta.prior<-c(6.304451,1.75) #Informed by linear model above"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Lets simulate priors check reasonable values intercept slope - futher code looking priors parameters model, prior vs. posterior plots section. “.sims” values - priors based intercept slope OLS regression , standard deviations set visualizing priors versus data. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+    #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2)  x<-seq(0,1,by=0.01) df<-data.frame(x)  p<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   p<-p+ggplot2::stat_function(fun=function(x,i) {sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x))},                               args=list(i=i),alpha=0.2,lwd=2)} p<-p+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\") p optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  df<-data.frame(Y=trdata$dat$Y_with_error,X=trdata$dat$X_with_error)  slope.plot.1<-ggplot2::ggplot()+   ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"X - Direct Effect Model\")+   ggsci::scale_color_npg()  slope.plot.1"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"explore-priors---built-in-functions","dir":"Articles","previous_headings":"","what":"Explore Priors - built in functions","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Blouch also contains built functions plot priors, seen .","code":"hl.prior.plot.code(hl.prior) vy.prior.plot.code(vy.prior) covariance.prior.direct.plot.code(hl.prior,vy.prior) reg.direct.prior.plot.code(trdata,optima.prior,beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"data-setup-for-blouch","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"line combines existing trdata file make.trdata regime info tips X Y values errors. use helper function blouch.reg.direct.prep() setup dat object Stan. function helper functions included Blouch require trdata files, names columns contain Y (sometimes depending model) X data error data. “Z_direct” number predictors, “BGS” name column tip regime data located. rest priors defined . See help info function articles github.com functionality.","code":"dat<-blouch.reg.direct.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"BGS\",hl.prior,vy.prior,optima.prior,beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"running-models","dir":"Articles","previous_headings":"","what":"Running models","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"First run multi-optima direct effect model varying intercepts. allow intercepts (optima) vary regimes, results similar OU model fitting approaches (e.g Slouch). Now let’s run model. Stan prints lot info, lets just look parameter estimates store posterior distribution later use. Results","code":"#Combination of regime model with multiple traits direct effect model with measurement error and varying intercepts fit.reg.direct<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct,data = dat,chains = 2,cores=2,iter =4000) #Fig S11 from Grabowski (in press) print(fit.reg.direct,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>            mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> hl         0.21    0.00 0.05  0.13  0.18  0.21  0.24  0.34  5957    1 #> vy         0.24    0.00 0.08  0.12  0.18  0.23  0.28  0.42  3444    1 #> optima[1] -1.01    0.01 0.35 -1.70 -1.24 -1.01 -0.78 -0.30  4814    1 #> optima[2]  0.23    0.00 0.20 -0.16  0.10  0.23  0.36  0.62  7651    1 #> optima[3]  0.46    0.00 0.22  0.00  0.31  0.46  0.60  0.87  5459    1 #> beta[1]    5.03    0.01 0.44  4.18  4.73  5.02  5.32  5.90  4589    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:22:43 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post.basic<-rstan::extract(fit.reg.direct) #Table S7 from Grabowski (in press)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"priors-vs--posterior-plots-for-multi-optima-direct-effect-model","dir":"Articles","previous_headings":"","what":"Priors vs. posterior plots for multi-optima direct effect model","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Half-life  Vy  Covariance  Regression plots  Let’s combine four plots one plot","code":"######################################################################################################## #Composite Figures post<-post.basic  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) mypal[2]<-palette()[1]  hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\" df<-data.frame(cbind(hl.sims,hl.post))  hl.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot ######################################################################################################## vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  df<-data.frame(cbind(vy.sims,vy.post))  vy.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Vy\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot ######################################################################################################## hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) #mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) x<-seq(0,1,by=0.01) df<-data.frame(x) covariance.plot<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x))},                               args=list(i=i),alpha=0.2,lwd=2)   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x))},                               args=list(i=i),alpha=0.2,lwd=2,color=mypal[1]) } covariance.plot<-covariance.plot+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\")+   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Prior\",\"Posterior\"))  covariance.plot ######################################################################################################## #Varying intercepts post<-post.basic mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(3)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,1]} mu.link.13<-function(x.seq){optima.post[,3]+x.seq*beta.post[,1]}   x.seq <- seq(from=min(trdata$dat$X_with_error), to=max(trdata$dat$X_with_error) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.13 <- sapply(x.seq , mu.link.13 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.13<-colMeans(mu.13)   mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) mu.mean.13<-data.frame(as.numeric(mu.mean.13))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\" names(mu.mean.13)<-\"mu.mean.13\"   mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.13 <- apply( mu.13 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq) mu.CI.13<-data.frame(t(data.frame(mu.CI.13)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.13)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=trdata$dat$Y_with_error,X=trdata$dat$X_with_error,Regimes=trdata$dat$BGS) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df13<-data.frame(x.seq,mu.mean.13)  regression.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.05)+ #Prior      ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.75,color=mypal[1])+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.75,color=mypal[2])+   ggplot2::geom_ribbon(data=mu.CI.13,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df13,ggplot2::aes(x=x.seq,y=mu.mean.13),linetype=1,linewidth=1,alpha=0.75,color=mypal[3])+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"log Antler Volume (l)\") + ggplot2::xlab(\"log Posterior Skull Length (cm)\")+   ggplot2::scale_color_manual(name=\"Breeding Group \\nSize\",values=mypal,labels=c('1-2', '3-5', '>5'))  regression.plot #Label points regression.plot<-regression.plot+ggplot2::theme(legend.position=\"none\") fig<-ggpubr::ggarrange(hl.plot, vy.plot,covariance.plot,regression.plot,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #fig<-ggpubr::annotate_figure(fig,top=paste(\"Multi-Optima Adaptive Model - Varying Effects,\\n hl=\",hl,sep=\"\")) #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS11.pdf\", plot = fig, width=7, height=7 ) fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"multi-optima-direct-effect-model-with-varying-effects","dir":"Articles","previous_headings":"","what":"Multi-optima direct effect model with varying effects","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now lets run multi-optima direct effect model varying effects. allow intercepts (optima) slopes vary regimes, allow multilevel modeling. use priors sane data formatting step produce “dat” file. Results","code":"fit.reg.direct.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_ve,data = dat,chains = 2,cores=2,iter =4000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #Fig S8 from Grabowski (in press) print(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_ve. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl        0.24    0.00 0.06  0.14  0.20 0.23 0.28  0.38  5976    1 #> vy        0.20    0.00 0.07  0.10  0.15 0.18 0.23  0.36  2521    1 #> optima[1] 0.17    0.01 0.53 -0.87 -0.20 0.17 0.52  1.23  3447    1 #> optima[2] 0.27    0.00 0.18 -0.08  0.15 0.27 0.38  0.64  5895    1 #> optima[3] 0.53    0.00 0.23  0.07  0.38 0.54 0.68  0.99  4472    1 #> beta[1,1] 7.27    0.01 0.84  5.69  6.68 7.27 7.83  8.92  3324    1 #> beta[2,1] 4.47    0.01 0.57  3.36  4.10 4.45 4.83  5.62  5696    1 #> beta[3,1] 4.62    0.01 0.59  3.48  4.22 4.59 5.02  5.84  3930    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:23:07 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post.ve<-rstan::extract(fit.reg.direct.ve)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"priors-vs--posterior-plots-for-multi-optima-direct-effect-model-with-varying-effects","dir":"Articles","previous_headings":"","what":"Priors vs. posterior plots for multi-optima direct effect model with varying effects","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Lets look Prior versus Posterior plots parameter estimates  Vy  Covariance  Now lets look varying effects model  Let’s combine four plots one plot","code":"######################################################################################################## #Composite Figures post<-post.ve  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) mypal[2]<-palette()[1]  hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\" df<-data.frame(cbind(hl.sims,hl.post))  hl.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot ######################################################################################################## vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  df<-data.frame(cbind(vy.sims,vy.post))  vy.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Vy\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot ######################################################################################################## hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) #mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) x<-seq(0,1,by=0.01) df<-data.frame(x) covariance.plot<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x))},                               args=list(i=i),alpha=0.2,lwd=2)   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x))},                               args=list(i=i),alpha=0.2,lwd=2,color=mypal[1]) } covariance.plot<-covariance.plot+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\")+   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Prior\",\"Posterior\"))  covariance.plot ######################################################################################################## #For Fig. 2 X<-dat$X_obs Y<-dat$Y_obs  mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(3)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\",\"post.beta.3\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]} mu.link.13<-function(x.seq){optima.post[,3]+x.seq*beta.post[,3]}   x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.13 <- sapply(x.seq , mu.link.13 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.13<-colMeans(mu.13)   mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) mu.mean.13<-data.frame(as.numeric(mu.mean.13))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\" names(mu.mean.13)<-\"mu.mean.13\"   mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.13 <- apply( mu.13 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq) mu.CI.13<-data.frame(t(data.frame(mu.CI.13)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.13)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df13<-data.frame(x.seq,mu.mean.13)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ fig2<-ggplot2::ggplot()+     ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.04)+ #Prior      ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.75,color=mypal[1])+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.75,color=mypal[2])+   ggplot2::geom_ribbon(data=mu.CI.13,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df13,ggplot2::aes(x=x.seq,y=mu.mean.13),linetype=1,linewidth=1,alpha=0.75,color=mypal[3])+   ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2:: ylab(\"log Antler Volume (l)\") + ggplot2::xlab(\"log Posterior Skull Length (cm)\")+   ggplot2::scale_color_manual(name=\"Breeding \\nGroup Size\",values=mypal,labels=c('1-2', '3-5', '>5'))  fig2 #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/Fig2.pdf\", plot = fig2, width=9, height=7 ) fig2<-fig2+ggplot2::theme(legend.position=\"none\") fig<-ggpubr::ggarrange(hl.plot, vy.plot,covariance.plot,fig2,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS8.pdf\", plot = fig, width=7, height=7 ) fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"multilevel-models","dir":"Articles","previous_headings":"","what":"Multilevel Models","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now let’s run multilevel version two models. multilevel model, information can shared across regimes, can produce accurate parameter estimates. priors used simulation. use non-centered version aid ease calculation. See Grabowski (press) non-centered models. compare models terms predictive performance end. priors used first analysis. See Grabowski (press) setting priors. new prior sigma","code":"############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.25) vy.prior<-10 optima.prior<-c(0.05,0.75) #Informed by linear model beta.prior<-c(6.304451,1.75) #Informed by linear model sigma.prior<-c(0,1)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"multilevel-multi-optima-direct-effect-model-with-varying-intercepts","dir":"Articles","previous_headings":"","what":"Multilevel Multi-Optima Direct Effect Model with Varying Intercepts","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"First run multilevel multi-optima direct effect model varying intercepts, non-centered ease estimation. Fit model Let’s check results","code":"dat<-blouch.reg.direct.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"BGS\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.direct.mlm.vi.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_vi_nc,data = dat,chains = 2,cores=2,iter =4000,control = list(adapt_delta = 0.99)) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking'  #Fig S10/Table S6 in Grabowski (in press) print(fit.reg.direct.mlm.vi.nc,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"beta\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_vi_nc. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>             mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> hl          0.22    0.00 0.05  0.13  0.18  0.21  0.25  0.34  3541    1 #> vy          0.24    0.00 0.08  0.12  0.18  0.23  0.28  0.42  2087    1 #> optima[1]  -1.02    0.01 0.44 -1.87 -1.31 -1.03 -0.74 -0.12  1942    1 #> optima[2]   0.23    0.00 0.19 -0.16  0.10  0.23  0.35  0.60  4080    1 #> optima[3]   0.45    0.00 0.23 -0.02  0.30  0.45  0.60  0.89  2741    1 #> optima_bar -0.08    0.01 0.43 -0.94 -0.34 -0.07  0.19  0.78  1483    1 #> beta[1]     5.02    0.01 0.48  4.12  4.70  5.00  5.33  6.02  1717    1 #> sigma       0.92    0.01 0.43  0.25  0.61  0.85  1.15  1.93  1766    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:24:15 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post.mlm.vi<-rstan::extract(fit.reg.direct.mlm.vi.nc)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"priors-vs--posterior-plots-for-multilevel-multi-optima-direct-effect-model-with-varying-intercepts","dir":"Articles","previous_headings":"","what":"Priors vs. posterior plots for multilevel multi-optima direct effect model with varying intercepts","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Lets look Prior versus Posterior plots parameter estimates Half-life  Vy  Covariance  Regression Plots  Let’s combine four plots one plot","code":"######################################################################################################## #Composite Figures post<-post.mlm.vi  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) mypal[2]<-palette()[1]  hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\" df<-data.frame(cbind(hl.sims,hl.post))  hl.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot ######################################################################################################## vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  df<-data.frame(cbind(vy.sims,vy.post))  vy.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Vy\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot ######################################################################################################## hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) #mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) x<-seq(0,1,by=0.01) df<-data.frame(x) covariance.plot<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x))},                               args=list(i=i),alpha=0.2,lwd=2)   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x))},                               args=list(i=i),alpha=0.2,lwd=2,color=mypal[1]) } covariance.plot<-covariance.plot+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\")+   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Prior\",\"Posterior\"))  covariance.plot ######################################################################################################## #Varying intercepts mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(3)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,1]} mu.link.13<-function(x.seq){optima.post[,3]+x.seq*beta.post[,1]}   x.seq <- seq(from=min(trdata$dat$X_with_error), to=max(trdata$dat$X_with_error) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.13 <- sapply(x.seq , mu.link.13 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.13<-colMeans(mu.13)   mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) mu.mean.13<-data.frame(as.numeric(mu.mean.13))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\" names(mu.mean.13)<-\"mu.mean.13\"   mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.13 <- apply( mu.13 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq) mu.CI.13<-data.frame(t(data.frame(mu.CI.13)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.13)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=trdata$dat$Y_with_error,X=trdata$dat$X_with_error,Regimes=trdata$dat$BGS) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df13<-data.frame(x.seq,mu.mean.13)  regression.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.05)+ #Prior      ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.75,color=mypal[1])+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.75,color=mypal[2])+   ggplot2::geom_ribbon(data=mu.CI.13,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df13,ggplot2::aes(x=x.seq,y=mu.mean.13),linetype=1,linewidth=1,alpha=0.75,color=mypal[3])+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"log Antler Volume (l)\") + ggplot2::xlab(\"log Posterior Skull Length (cm)\")+   ggplot2::scale_color_manual(name=\"Breeding Group \\nSize\",values=mypal,labels=c('1-2', '3-5', '>5'))  regression.plot #Label points fig2<-fig2+ggplot2::theme(legend.position=\"none\") fig<-ggpubr::ggarrange(hl.plot, vy.plot,covariance.plot,regression.plot,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS10.pdf\", plot = fig, width=7, height=7 ) fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"multilevel-multi-optima-direct-effect-model-with-varying-effects","dir":"Articles","previous_headings":"","what":"Multilevel Multi-Optima Direct Effect Model with Varying Effects","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now let’s run Multilevel Multi-optima Direct Effect Model Varying Effects. allow intercepts (optima) slopes vary regimes. multilevel model, information can shared across regimes, can produce accurate parameter estimates. Results","code":"fit.reg.direct.mlm.ve.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_ve_nc,data = dat,chains = 2,cores=2,iter =4000,control = list(adapt_delta = 0.99)) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho[1,2]\",\"sigma\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_ve_nc. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>             mean se_mean   sd  2.5%   25%   50%  75% 97.5% n_eff Rhat #> hl          0.24    0.00 0.06  0.14  0.20  0.23 0.27  0.38  5017    1 #> vy          0.20    0.00 0.07  0.10  0.15  0.19 0.24  0.36  2466    1 #> optima_bar  0.26    0.01 0.33 -0.52  0.10  0.29 0.46  0.84  1758    1 #> beta_bar    5.56    0.02 0.82  4.05  5.01  5.54 6.08  7.30  2413    1 #> Rho[1,2]   -0.06    0.00 0.32 -0.65 -0.29 -0.06 0.18  0.56  4283    1 #> sigma[1]    0.45    0.01 0.38  0.01  0.16  0.36 0.65  1.41  2036    1 #> sigma[2]    1.31    0.01 0.54  0.31  0.95  1.28 1.63  2.47  2152    1 #> optima[1]   0.09    0.01 0.52 -1.15 -0.17  0.18 0.42  0.97  1605    1 #> optima[2]   0.29    0.00 0.17 -0.07  0.18  0.29 0.41  0.62  4766    1 #> optima[3]   0.48    0.00 0.22  0.07  0.33  0.47 0.61  0.92  3810    1 #> beta[1,1]   7.00    0.02 0.88  5.06  6.50  7.07 7.58  8.56  1635    1 #> beta[2,1]   4.52    0.01 0.57  3.41  4.13  4.51 4.90  5.66  3294    1 #> beta[3,1]   4.74    0.01 0.59  3.57  4.36  4.74 5.13  5.86  4588    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:25:42 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post.mlm.ve<-rstan::extract(fit.reg.direct.mlm.ve.nc)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"priors-vs--posterior-plots-for-multilevel-multi-optima-direct-effect-model-with-varying-effects","dir":"Articles","previous_headings":"","what":"Priors vs. posterior plots for multilevel multi-optima direct effect model with varying effects","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Lets look Prior versus Posterior plots parameter estimates Half-life  Vy  Covariance  Regression Plots  Let’s combine four plots one plot","code":"######################################################################################################## #Composite Figures post<-post.mlm.ve  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) mypal[2]<-palette()[1]  hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\" df<-data.frame(cbind(hl.sims,hl.post))  hl.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot ######################################################################################################## vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  df<-data.frame(cbind(vy.sims,vy.post))  vy.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Vy\", y = \"Density\")+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot ######################################################################################################## hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) #mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) x<-seq(0,1,by=0.01) df<-data.frame(x) covariance.plot<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x))},                               args=list(i=i),alpha=0.2,lwd=2)   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i) {post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x))},                               args=list(i=i),alpha=0.2,lwd=2,color=mypal[1]) } covariance.plot<-covariance.plot+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\")+   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Prior\",\"Posterior\"))  covariance.plot ######################################################################################################## #For Fig. 3 X<-dat$X_obs Y<-dat$Y_obs  mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(3)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\",\"post.beta.3\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]} mu.link.13<-function(x.seq){optima.post[,3]+x.seq*beta.post[,3]}   x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.13 <- sapply(x.seq , mu.link.13 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.13<-colMeans(mu.13)   mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) mu.mean.13<-data.frame(as.numeric(mu.mean.13))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\" names(mu.mean.13)<-\"mu.mean.13\"   mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.13 <- apply( mu.13 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq) mu.CI.13<-data.frame(t(data.frame(mu.CI.13)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.13)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df13<-data.frame(x.seq,mu.mean.13)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ regression.plot<-ggplot2::ggplot()+     ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.04)+ #Prior      ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.75,color=mypal[1])+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.75,color=mypal[2])+   ggplot2::geom_ribbon(data=mu.CI.13,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df13,ggplot2::aes(x=x.seq,y=mu.mean.13),linetype=1,linewidth=1,alpha=0.75,color=mypal[3])+   ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2:: ylab(\"log Antler Volume (l)\") + ggplot2::xlab(\"log Posterior Skull Length (cm)\")+   ggplot2::scale_color_manual(name=\"Breeding \\nGroup Size\",values=mypal,labels=c('1-2', '3-5', '>5'))  regression.plot #Fig 3 in Grabowski (in press) fig2<-fig2+ggplot2::theme(legend.position=\"none\") fig<-ggpubr::ggarrange(hl.plot, vy.plot,covariance.plot,regression.plot,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS9.pdf\", plot = fig, width=7, height=7 ) fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"model-comparison-using-psis","dir":"Articles","previous_headings":"","what":"Model Comparison using PSIS","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Lets model comparison using Pareto-Smoothed Importance Sampling (PSIS) R Package loo (Vehtari et al. 2023). loo estimates leave-one-cross-validation Bayesian analyses. looking Pareto k values ~0.7, suggest results accurate estimation cross-validation. PSIS also provides way look outliers analysis. compare two models using loo_compare function package.","code":"dev.off() #> null device  #>           1 old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  ############################################################################################################ loo_mlm_ve_nc <- loo::loo(fit.reg.direct.mlm.ve.nc, cores = 2, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_mlm_ve_nc) #>  #> Computed from 4000 by 30 log-likelihood matrix. #>  #>          Estimate  SE #> elpd_loo    -26.0 4.3 #> p_loo        14.2 2.6 #> looic        51.9 8.5 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.5, 1.5]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     23    76.7%   214      #>    (0.7, 1]   (bad)       7    23.3%   <NA>     #>    (1, Inf)   (very bad)  0     0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_mlm_ve_nc) plot(loo_mlm_ve_nc,label_points=TRUE)   #library(loo) #Non-mlm varying effects model loo_ve <- loo::loo(fit.reg.direct.ve, cores = 2, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_ve) #>  #> Computed from 4000 by 30 log-likelihood matrix. #>  #>          Estimate  SE #> elpd_loo    -25.2 4.2 #> p_loo        13.8 2.6 #> looic        50.4 8.5 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.5, 1.7]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     23    76.7%   496      #>    (0.7, 1]   (bad)       6    20.0%   <NA>     #>    (1, Inf)   (very bad)  1     3.3%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_ve) plot(loo_ve,label_points=TRUE)   #library(loo) #MLM Varying intercepts model loo_mlm_vi_nc <- loo::loo(fit.reg.direct.mlm.vi.nc, cores = 2, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_mlm_vi_nc) #>  #> Computed from 4000 by 30 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo    -28.3  5.3 #> p_loo        12.9  3.3 #> looic        56.7 10.6 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.4, 1.2]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     24    80.0%   152      #>    (0.7, 1]   (bad)       6    20.0%   <NA>     #>    (1, Inf)   (very bad)  0     0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_mlm_vi_nc) plot(loo_mlm_vi_nc,label_points=TRUE)   #library(loo) #Basic model loo_basic <- loo::loo(fit.reg.direct, cores = 2, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_basic) #>  #> Computed from 4000 by 30 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo    -27.8  5.1 #> p_loo        12.3  3.1 #> looic        55.6 10.3 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.5, 1.9]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     26    86.7%   416      #>    (0.7, 1]   (bad)       4    13.3%   <NA>     #>    (1, Inf)   (very bad)  0     0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_basic) plot(loo_basic,label_points=TRUE)  loo::loo_compare(loo_mlm_ve_nc, loo_ve, loo_mlm_vi_nc, loo_basic) #>        elpd_diff se_diff #> model2  0.0       0.0    #> model1 -0.7       0.9    #> model4 -2.6       3.6    #> model3 -3.1       3.6 2.6 + c(-1,1)*3.3*1.86 #95% interval of the difference, z-score of 1.86 #> [1] -3.538  8.738"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now lets compare two models using Bayes Factors. use bridgesampling R package (Gronau et al. 2020). Looking , can read results data X times likely model assumes first mode rather second model.","code":"############################################################################################################ lml.fit.reg.direct.mlm.ve.nc<-bridgesampling::bridge_sampler(fit.reg.direct.mlm.ve.nc,silent=TRUE) lml.fit.reg.direct.mlm.vi.nc<-bridgesampling::bridge_sampler(fit.reg.direct.mlm.vi.nc,silent=TRUE) lml.fit.reg.direct.ve<-bridgesampling::bridge_sampler(fit.reg.direct.ve,silent=TRUE) lml.fit.reg.direct<-bridgesampling::bridge_sampler(fit.reg.direct,silent=TRUE)  #bridgesampling::bf(lml.fit.reg.direct.mlm.ve, lml.fit.reg.direct.mlm.ve.nc) bridgesampling::bf(lml.fit.reg.direct.ve, lml.fit.reg.direct.mlm.ve.nc) #> Estimated Bayes factor in favor of lml.fit.reg.direct.ve over lml.fit.reg.direct.mlm.ve.nc: 13.81466 bridgesampling::bf(lml.fit.reg.direct.ve, lml.fit.reg.direct.mlm.vi.nc) #> Estimated Bayes factor in favor of lml.fit.reg.direct.ve over lml.fit.reg.direct.mlm.vi.nc: 59.28168 bridgesampling::bf(lml.fit.reg.direct.ve, lml.fit.reg.direct) #> Estimated Bayes factor in favor of lml.fit.reg.direct.ve over lml.fit.reg.direct: 9.73733"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"trace-for-estimated-parameters","dir":"Articles","previous_headings":"","what":"Trace for estimated parameters","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Let’s look traceplots models, give visualization degree convergence.","code":"############################################################################################################ #Trankplots/Traceplots 4X10 rstan::traceplot(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) rstan::traceplot(fit.reg.direct.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) rstan::traceplot(fit.reg.direct.mlm.vi.nc,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"beta\",\"sigma\")) rstan::traceplot(fit.reg.direct,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #plot.emp.ve<-rstan::traceplot(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #plot.emp.mlm.ve<-rstan::traceplot(fit.reg.direct.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) #plot.emp.vi<-rstan::traceplot(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #plot.emp.mlm.vi<-rstan::traceplot(fit.reg.direct.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"beta\",\"sigma\"))  #fig<-ggpubr::ggarrange(plot.emp.vi, plot.emp.ve,plot.emp.mlm.vi,plot.emp.mlm.ve,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #fig<-ggpubr::annotate_figure(fig,top=paste(\"Multi-Optima Direct Effect - Varying Effects, hl=\",hl,sep=\"\")) #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS6.pdf\", plot = fig, width=9, height=9) ########################################################################################################"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"compare-posterior-distributions","dir":"Articles","previous_headings":"","what":"Compare posterior distributions","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now best model, lets compare posterior distributions slopes usuful stats","code":"######################################################################################################## #Compare slopes df<-data.frame(post.ve$beta) mean(df[,1]-df[,2]) #> [1] 2.800276 rethinking::PI(df[,1]-df[,2],prob=0.95) #>        3%       98%  #> 0.7948055 4.8046596 sum((df[,1]-df[,2])<0)/4000 #> [1] 0.00275 sum((df[,1]-df[,2])>=0)/4000 #> [1] 0.99725  unscaled.hl<-post.ve$hl*l.tree mean(unscaled.hl) #> [1] 3.384105 rethinking::PI(unscaled.hl,prob=0.95) #>       3%      98%  #> 2.030006 5.282994"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"predictive-checks","dir":"Articles","previous_headings":"","what":"Predictive Checks","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Now lets run prior posterior predictive checks two models. Prior predictive checks generate predictions model using prior distributions order assess whether priors appropriate – equivalent running model without data (Gabry et al. 2019). Posterior predictive checks generate data according posterior predictive distribution compare observed data assess fit model (Gabry et al. 2019). Blouch includes Stan functions run prior posterior predictive checks included models use demonstrated simulation empirical examples.     Posterior predictive checks show model well fit generates data close approximation true dataset.","code":"dat<-blouch.reg.direct.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"BGS\",hl.prior,vy.prior,optima.prior,beta.prior)  fit.reg.direct.ve.priorpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_ve_priorpc,data=dat,chains = 2,cores=2, iter =2000,algorithm=c(\"Fixed_param\")) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking'  post<-rstan::extract(fit.reg.direct.ve.priorpc)  num.plots<-5 plots<-ysim.ppc.plot.code(dat,post,1:num.plots) plots<-gridExtra::grid.arrange(grobs=plots, ncol=5, nrow=1,common.legend=TRUE,legend=\"top\") tgrob <- ggpubr::text_grob(\"Multi-Optima Direct Effect Model - Varying Efects - Prior PC\",size = 10) plots.prior<-ggpubr::annotate_figure(plots,top=tgrob)  fit.reg.direct.ve.postpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_ve_postpc,data=dat,chains = 2,cores=2, iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking'   post<-rstan::extract(fit.reg.direct.ve.postpc)  num.plots<-5 plots<-ysim.ppc.plot.code(dat,post,1:num.plots) plots<-gridExtra::grid.arrange(grobs=plots, ncol=5, nrow=1,common.legend=TRUE,legend=\"top\") tgrob <- ggpubr::text_grob(\"Multi-Optima Direct Effect Model - Varying Efects - Posterior PC\",size = 10) plots.post<-ggpubr::annotate_figure(plots,top=tgrob) fig<-ggpubr::ggarrange(plots.prior, plots.post,ncol=1,nrow=2, labels = c(\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\")  plots.prior plots.post"},{"path":"https://mark-grabowski.github.io/blouch/articles/Empirical-Example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Empirical Example from Grabowski (in press) Walkthrough","text":"Pagel, M (1994) Detecting correlated evolution phylogenies: general method comparative analysis discrete characters. Proceedings Royal Society London. Series B. Biological Sciences, 255, 37–445. Tsuboi M., Kopperud B.T., Matschiner M., Grabowski M., Syrowatka C., Pélabon C., Hansen T.F. 2024. Antler Allometry, Irish Elk Gould Revisited. Evol Biol.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"multi-optima-model","dir":"Articles","previous_headings":"","what":"Multi-optima Model","title":"Mullti-Optima Models Walkthrough","text":"Next run series models include categorical variables - regimes painted phylogeny following Hansen (1997) Hansen et al. (2008). article abbreviated versions Simulation Example article - steps analysis repeated . Note Stan runs also iterations use 1 chain 1 core. First set regime painting    Format tree Now simulate Y data based generative model","code":"######################################################################################################## #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label   #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree #source(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Simulation Code/Functions/set.converge.regimes.R\") #Macbook Pro  shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) ############################################################################################################ #Simulate data n<-length(trdata$phy$tip.label) regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ############################################################################################################ #Set true values for parameters hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl)); optima<-c(0.5,0.25) #Optima for two regimes  dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach mu<-dmX%*%optima #Simulate mu for Y V<-calc_direct_V(phy, sigma2_y, a) Y<-MASS::mvrnorm(n=1,mu,V)  ######################################################################################################## #Simulate errors Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01)  phytools::phenogram(phy,Y_with_error,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... ############################################################################################################ #Make trdata file trait.data<-data.frame(cbind(Y_with_error,Y_error)) trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error)))  ############################################################################################################ ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(0,1) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Mullti-Optima Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Prior Plot  use helper function blouch.reg.prep() setup dat file Stan. “regimes” name regime column trdata$dat. run basic Multi-optima Model, look results, rstan::extract posterior Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance  Prior vs. Posterior Plot  Next code Multilevel Multi-optima Model - include additional prior sigma, parameter variance among regimes Finally run non-centered version model, can used posterior hard explore centered version model produces divergences.","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)  plot( NULL , xlim=c(0,1) , ylim=c(0,0.3) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot library(ggsci)  #Direct Model #intercept_test<-rnorm(100,stan_sim_data$ols_intercept,0.2) #slope_test<-rnorm(100,stan_sim_data$ols_slope,0.1)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) optima.sims<-data.frame(optima.sims,Prior=\"Prior\")  df<-data.frame(Y=Y,regimes=regimes_tip) names(df)<-c(\"Y\",\"Regimes\")  optima.plot<-   ggplot2::ggplot(data=df, Mapping = ggplot2::aes(x = Y, y = Regimes))+      ggplot2::geom_jitter(data=optima.sims,ggplot2::aes(y=optima.sims,x=Prior),alpha=0.25,width=0.15)+   ggplot2::geom_jitter(data=df,ggplot2::aes(y=Y,x=Regimes),width=0.15)+   ggplot2::theme_bw()+   ggplot2::ylab(\"Optima\") + ggplot2::xlab(\"\")+   ggsci::scale_color_npg()  optima.plot dat<-blouch.reg.prep(trdata,\"Y_with_error\",\"Y_error\",\"regimes\",hl.prior,vy.prior,optima.prior) fit.reg<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg,data = dat,chains = 2,iter =2000,cores=2) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg,pars = c(\"hl\",\"vy\",\"optima\")) #> Inference for Stan model: blouchOU_reg. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.09       0 0.05 0.03 0.06 0.09 0.11  0.21  1072    1 #> vy        0.02       0 0.01 0.01 0.02 0.02 0.02  0.03  1055    1 #> optima[1] 0.47       0 0.03 0.40 0.46 0.48 0.50  0.54  1892    1 #> optima[2] 0.27       0 0.05 0.15 0.23 0.27 0.30  0.37  1766    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:26:48 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg) #rstan::extract posterior hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot plot( NULL , xlim=c(0,1) , ylim=c(0,0.3) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) #covariance.plot <- recordPlot() #dev.off() library(ggsci)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) optima.sims<-data.frame(optima.sims,Prior=\"Prior\") optima.post<-data.frame(post$optima) names(optima.post)<-c(paste(\"OU\",1:dim(optima.post)[2],sep=\"\"))  mu.mean <-apply( optima.post, 2, mean ) mu.mean<-data.frame(mu.mean) mu.mean<-data.frame(mu.mean,\"Regimes\"=1:dim(mu.mean)[1]) mu.mean<-data.frame(mu.mean,optima)  mu.CI <- apply( optima.post , 2, rethinking::PI , prob=0.89 ) mu.CI<-data.frame(t(data.frame(mu.CI)),\"Regimes\"=1:dim(mu.CI)[2]) names(mu.CI)<-c(\"min.5.5\",\"max.94.5\",\"Regimes\")  df<-data.frame(Y=Y,regimes=regimes_tip) names(df)<-c(\"Y\",\"Regimes\")    optima.plot<-   ggplot2::ggplot(data=df, Mapping = aes(x = Y, y = Regimes))+   ggplot2::geom_jitter(data=optima.sims,ggplot2::aes(y=optima.sims,x=Prior),alpha=0.25,width=0.15)+   ggplot2::geom_segment(data=mu.mean,ggplot2::aes(x=Regimes-0.5,xend=Regimes+0.5,y=mu.mean,yend=mu.mean),linetype=1)+   ggplot2::geom_segment(data=mu.mean,ggplot2::aes(x=Regimes-0.5,xend=Regimes+0.5,y=optima,yend=optima),linetype=2)+   ggplot2::geom_linerange(data=mu.CI, mapping=ggplot2::aes(x=Regimes,ymin=min.5.5,ymax=max.94.5),size=35,color=\"darkgrey\",alpha=0.5)+   ggplot2::geom_jitter(data=df,ggplot2::aes(y=Y,x=Regimes),width=0.15)+   ggplot2::theme_bw()+   ggplot2::ylab(\"Optima\") + ggplot2::xlab(\"\")+   ggsci::scale_color_npg() #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  optima.plot ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(0,1) #Informed by linear model sigma.prior<-c(0,1) ############################################################################################################ #Blouch Prep Code dat<-blouch.reg.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"regimes\",hl.prior,vy.prior,optima.prior,sigma.prior) fit.mlm.vi.regimes<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_mlm_vi,data = dat,chains = 2,iter= 2000,cores=2) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 154 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems  print(fit.mlm.vi.regimes,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_mlm_vi. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl         0.09    0.00 0.04  0.03 0.07 0.09 0.11  0.19  1264    1 #> vy         0.02    0.00 0.01  0.01 0.02 0.02 0.02  0.03  1192    1 #> optima[1]  0.47    0.00 0.03  0.41 0.45 0.47 0.49  0.53  1789    1 #> optima[2]  0.28    0.00 0.05  0.17 0.24 0.28 0.31  0.39  1583    1 #> optima_bar 0.33    0.01 0.34 -0.47 0.19 0.35 0.48  0.97  1283    1 #> sigma      0.47    0.01 0.39  0.07 0.19 0.35 0.62  1.50   946    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:27:10 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.mlm.vi.regimes) fit.mlm.vi.regimes.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_mlm_vi_nc,data = dat,chains = 2,iter =2000,cores=2) #,control=list(adapt_delta=0.95)) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 74 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(fit.mlm.vi.regimes.nc,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_mlm_vi_nc. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl         0.09    0.00 0.04  0.04 0.06 0.09 0.11  0.20   786 1.00 #> vy         0.02    0.00 0.01  0.01 0.02 0.02 0.02  0.03   633 1.00 #> optima[1]  0.47    0.00 0.03  0.40 0.45 0.47 0.49  0.53  1656 1.00 #> optima[2]  0.28    0.00 0.06  0.17 0.24 0.28 0.32  0.39  1327 1.00 #> optima_bar 0.36    0.01 0.20 -0.09 0.25 0.37 0.46  0.76   697 1.01 #> sigma      0.68    0.09 0.55  0.12 0.32 0.52 0.85  2.50    39 1.05 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:27:54 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). ###plot(rethinking::precis(fit.mlm.vi.regimes.nc,depth=2,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"sigma\"))) post<-rstan::extract(fit.mlm.vi.regimes.nc) rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"multi-optima-direct-effect-model","dir":"Articles","previous_headings":"","what":"Multi-optima Direct Effect Model","title":"Mullti-Optima Models Walkthrough","text":"now include regimes painted tree direct effect predictor    Now simulate X Y data   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"############################################################################################################ #Regimes + Direct Effect Model ############################################################################################################ #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label  #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree #source(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Simulation Code/Functions/set.converge.regimes.R\") #Macbook Pro shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label) mrca1 <- ape::mrca(trdata$phy) times <- ape::node.depth.edgelength(trdata$phy)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ######################### hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0 Sxx<-10 #Look at effects  Z_direct<-1  V<-calc_direct_V(phy,sigma2_y,a) X<-phytools::fastBM(phy,a=vX0,sig2=Sxx,internal=FALSE) #Simulate X BM variable on tree, with scaling 10 #X<-rnorm(N,0,1) names(X)<-phy$tip.label  phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach dmX<-cbind(dmX,X)  beta<-c(2,1,0.25) #Two Optima/One Slope mu<-dmX%*%beta #Simulate mu for Y  V<-calc_direct_V(phy,sigma2_y,a) Y<-MASS::mvrnorm(n=1,mu,V)  #Plot data df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.00801  0.05843  0.18122  0.26742  0.44140  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.79802    0.07104   25.31   <2e-16 *** #> X            0.25223    0.02025   12.46   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.4464 on 48 degrees of freedom #> Multiple R-squared:  0.7638, Adjusted R-squared:  0.7589  #> F-statistic: 155.2 on 1 and 48 DF,  p-value: < 2.2e-16  #################################################################################################################Simulate errors Z_X_error<-1 #Number of X traits with error X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)  ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(2,0.5) #Informed by linear model beta.prior<-c(0.25,0.25) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"exploring-priors-1","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Mullti-Optima Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot  use helper function blouch.reg.direct.prep() setup dat file Stan. “Z_direct” number predictors, “regimes” name regime column trdata$dat. Now run basic Multi-optima Direct Effect Model, look results, rstan::extract posterior Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance  Prior vs. Posterior Plot Regression  Multilevel version model use helper function blouch.reg.direct.prep() setup dat file Stan. “Z_direct” number predictors, “regimes” name regime column trdata$dat. finally non-centered version Multilevel model","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  prior.slope.plot ############################################################################################################ #Test Blouch prep code - Regimes + Direct Efffect model dat<-blouch.reg.direct.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.direct<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.16       0 0.08 0.06 0.11 0.15 0.20  0.36  1153    1 #> vy        0.02       0 0.01 0.01 0.01 0.02 0.02  0.03  1334    1 #> optima[1] 2.01       0 0.04 1.93 1.99 2.01 2.04  2.09  2807    1 #> optima[2] 0.94       0 0.09 0.73 0.90 0.95 0.99  1.07  1158    1 #> beta[1]   0.25       0 0.01 0.24 0.25 0.25 0.26  0.27  2788    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:28:16 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct) #rstan::extract posterior distribution hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\")  mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,1]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.05)+ #Prior   ggplot2::geom_abline(intercept=beta[1],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=beta[2],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.3)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.3)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+ggplot2::labs(color=\"Regimes\")+   ggsci::scale_color_npg()  slope.plot.1 #Label points ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(2,0.5) #Informed by linear model beta.prior<-c(0.25,0.25) #Informed by linear model sigma.prior<-c(0,1) ############################################################################################################ #Test Blouch prep code - Regimes + Direct Efffect model dat<-blouch.reg.direct.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.direct.mlm.vi<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_vi,data = dat,chains = 2,cores=2,iter = 2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.mlm.vi,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"beta\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_vi. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl         0.17    0.00 0.10 0.06 0.11 0.15 0.21  0.45   701    1 #> vy         0.02    0.00 0.01 0.01 0.01 0.02 0.02  0.04   666    1 #> optima[1]  2.01    0.00 0.04 1.93 1.99 2.01 2.03  2.09  2407    1 #> optima[2]  0.92    0.00 0.11 0.62 0.88 0.94 0.99  1.05   732    1 #> optima_bar 1.76    0.01 0.38 1.05 1.51 1.74 2.00  2.57  3375    1 #> beta[1]    0.25    0.00 0.01 0.24 0.25 0.25 0.26  0.27  3129    1 #> sigma      0.90    0.01 0.42 0.32 0.60 0.82 1.12  1.96  2388    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:28:39 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.mlm.vi) #rstan::extract posterior distribution fit.reg.direct.mlm.vi<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_vi_nc,data = dat,chains = 2,cores=2,iter = 2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 193 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is NA, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(fit.reg.direct.mlm.vi,pars = c(\"hl\",\"vy\",\"optima\",\"optima_bar\",\"beta\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_vi_nc. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl         0.17    0.01 0.10 0.06 0.10 0.15 0.21  0.44   200 1.01 #> vy         0.02    0.00 0.01 0.01 0.01 0.02 0.02  0.03   503 1.00 #> optima[1]  2.01    0.00 0.04 1.92 1.99 2.01 2.03  2.09  1977 1.00 #> optima[2]  0.92    0.00 0.12 0.59 0.89 0.94 0.98  1.06   927 1.00 #> optima_bar 1.81    0.05 0.40 1.07 1.53 1.77 2.08  2.58    74 1.03 #> beta[1]    0.26    0.00 0.01 0.24 0.25 0.26 0.26  0.27  1114 1.01 #> sigma      0.97    0.08 0.48 0.34 0.61 0.86 1.21  2.11    33 1.06 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:29:44 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.mlm.vi) #rstan::extract posterior distribution rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"multi-optima-adaptive-model","dir":"Articles","previous_headings":"","what":"Multi-optima Adaptive Model","title":"Mullti-Optima Models Walkthrough","text":"now include regimes painted tree adaptive predictor    Simulate X Y data using generative model   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"#Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label  #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ############################################################################################################ ######################### hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0  Z_adaptive<-1 sigma2_x<-matrix(1,1,1) #Variance of BM Process  X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... #sigma2_x<-ratematrix(phy,Xa) #Calculate evolutionary v/cv matrix  dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach dmX<-cbind(dmX,calc_adaptive_dmX(phy,a,X))  beta<-c(2,1,0.25) #Two Optima/Two Slopes mu<-dmX%*%beta #Simulate mu for Y  V<-calc_adaptive_V(phy,a, sigma2_y, beta[3],  sigma2_x,Z_adaptive) Y<-MASS::mvrnorm(n=1,mu,V)  ################################################################################################################ #Plot data df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.0206  0.0130  0.2201  0.2994  0.4077  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.75536    0.07480  23.467  < 2e-16 *** #> X            0.19407    0.06742   2.879  0.00595 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.47 on 48 degrees of freedom #> Multiple R-squared:  0.1472, Adjusted R-squared:  0.1295  #> F-statistic: 8.287 on 1 and 48 DF,  p-value: 0.005947 ################################################################################################################ #Simulate errors Z_X_error<-1 #Number of X traits with error X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)  ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.75,0.55) #Informed by linear model beta.prior<-c(0.25,0.25) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"exploring-priors-2","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Mullti-Optima Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot  use helper function blouch.reg.adapt.prep() setup dat file Stan. “Z_adapt” number predictors, “regimes” name regime column trdata$dat. Now run basic Multi-optima Adaptive Model, look results, rstan::extract posterior Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance  Prior vs. Posterior Plot Regression  Multilevel version model Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors. non-centered version posteriors explored, compared priors, etc. See Simulation Example one example .","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)   plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta[3],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } #multiple traits   par(mar=c(3,3,0.25,0.25)) optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.slope.plot dat<-blouch.reg.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.adapt<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt,data = dat,chains = 2,cores = 2, iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.adapt,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_reg_adapt. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.23       0 0.12 0.07 0.15 0.20 0.28  0.51   872    1 #> vy        0.02       0 0.01 0.01 0.01 0.02 0.02  0.04  1237    1 #> optima[1] 2.03       0 0.06 1.92 1.99 2.02 2.06  2.14  2544    1 #> optima[2] 0.85       0 0.14 0.48 0.80 0.88 0.94  1.03  1011    1 #> beta[1]   0.24       0 0.05 0.16 0.21 0.23 0.27  0.38  1428    1 #> beta_e[1] 0.17       0 0.03 0.10 0.15 0.17 0.19  0.23  2776    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:30:19 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt) #rstan::extract Posterior Distribution hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)   plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta[3],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_adaptive_cov_plot(post$a[i],post$sigma2_y[i],post$beta[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } #multiple traits   par(mar=c(3,3,0.25,0.25)) optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\")  mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,1]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12))  names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)  #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.05)+ #Prior   ggplot2::geom_abline(intercept=beta[1],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=beta[2],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1,linewidth=1,alpha=0.3)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.1)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1,linewidth=1,alpha=0.3)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+ggplot2::labs(color=\"Regimes\")+   ggsci::scale_color_npg()  slope.plot.1 #Label points ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.25) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model sigma.prior<-c(0,1)  ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ dat<-blouch.reg.adapt.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.adapt.mlm.vi<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_vi,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.adapt.mlm.vi,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_vi. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.25    0.00 0.06 0.15 0.21 0.24 0.28  0.39  1880    1 #> vy        0.02    0.00 0.01 0.01 0.02 0.02 0.02  0.03  2482    1 #> optima[1] 2.04    0.00 0.06 1.91 2.00 2.04 2.07  2.16  3475    1 #> optima[2] 0.84    0.00 0.11 0.58 0.77 0.85 0.91  1.03  2165    1 #> beta[1]   0.23    0.00 0.05 0.14 0.20 0.24 0.27  0.34  3130    1 #> beta_e[1] 0.16    0.00 0.03 0.09 0.14 0.16 0.18  0.22  3536    1 #> sigma     0.92    0.01 0.43 0.34 0.59 0.83 1.15  2.00  2906    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:30:51 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt.mlm.vi) fit.reg.adapt.mlm.vi.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_vi_nc,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 15 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.adapt.mlm.vi.nc,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\",\"sigma\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_vi_nc. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.25    0.00 0.06 0.15 0.21 0.24 0.28  0.38  1849    1 #> vy        0.02    0.00 0.01 0.01 0.02 0.02 0.02  0.03  2024    1 #> optima[1] 2.04    0.00 0.06 1.92 2.00 2.03 2.07  2.16  2378    1 #> optima[2] 0.84    0.00 0.11 0.59 0.77 0.85 0.92  1.03  1822    1 #> beta[1]   0.23    0.00 0.05 0.14 0.20 0.23 0.26  0.33  2439    1 #> beta_e[1] 0.16    0.00 0.03 0.09 0.14 0.16 0.18  0.21  2610    1 #> sigma     0.90    0.01 0.40 0.37 0.60 0.82 1.12  1.86  1098    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:32:18 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt.mlm.vi.nc) rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"multi-optima-direct-effect-and-adaptive-model","dir":"Articles","previous_headings":"","what":"Multi-optima Direct Effect and Adaptive Model","title":"Mullti-Optima Models Walkthrough","text":"now include regimes painted tree direct effect adaptive predictor        Half-life Prior plot  Vy Prior Plot  Adaptation model  Prior vs. Posterior Plot   use helper function blouch.reg.direct.adapt.prep() setup dat file Stan. names direct effect adaptive columns “Xd”, “Xa” associated errors, Z_direct Z_adaptive th number direct adaptive traits, respectively, “regimes” name regimes column data trdata$dat. First run basic Multi-optima Direct Effect Adaptive Model. Prior vs. posterior  Prior vs. posterior plot  Adaptation model  Slope plots direct adaptive models Measurement Error   Next run Multilevel version model Finally run non-centered version model posteriors explored, compared priors, etc. See Simulation Example one example .","code":"############################################################################################################ #Regimes + Adaptive + Direct Model ############################################################################################################ #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label  #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ############################################################################################################ hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0  Z_direct<-1 Z_adaptive<-1 Z<-Z_direct+Z_adaptive sigma2_x<-matrix(1,1,1) #Variance of BM Process  Xd<-rnorm(N,0,1) names(Xd)<-phy$tip.label phytools::phenogram(phy,Xd,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... Xa<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 phytools::phenogram(phy,Xa,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... #sigma2_x<-ratematrix(phy,Xa) #Calculate evolutionary v/cv matrix Xs<-cbind(Xd,Xa)  dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach dmX<-cbind(dmX,calc_mixed_dmX(phy,a,Xs,Z_direct,Z_adaptive))  beta<-c(2,1,0.35,0.25) #Two Optima/Two Slopes mu<-dmX%*%beta #Simulate mu for Y  V<-calc_adaptive_V(phy,a, sigma2_y,   beta[length(beta)],  sigma2_x,Z_adaptive) Y<-MASS::mvrnorm(n=1,mu,V)  ################################################################################################################ #Plot data df<-data.frame(Y=Y,Xd=Xs[,1],Xa=Xs[,2])  ggplot2::ggplot(data=df,ggplot2::aes(x=Xd,y=Y))+   ggplot2::geom_point() ggplot2::ggplot(data=df,ggplot2::aes(x=Xa,y=Y))+   ggplot2::geom_point() summary(lm(Y~Xs,df)) #>  #> Call: #> lm(formula = Y ~ Xs, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.84900 -0.16208  0.08845  0.25892  0.67924  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.78206    0.05601  31.818  < 2e-16 *** #> XsXd         0.23270    0.04105   5.668 8.52e-07 *** #> XsXa         0.14175    0.06396   2.216   0.0315 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.3935 on 47 degrees of freedom #> Multiple R-squared:  0.4563, Adjusted R-squared:  0.4332  #> F-statistic: 19.72 on 2 and 47 DF,  p-value: 6.034e-07  ######################################################################################################## #Simulate errors - for use with blouchOU_reg_direct_adaptive_ME Z_X_error<-2 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) names(X_error)<-c(\"Xd_error\",\"Xa_error\") Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-apply(Xs,2,function(X){X+rnorm(N,0,0.01)}) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.25) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)   plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta[3],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1  covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  df<-data.frame(Y=Y_with_error,X=X_with_error,Regimes=regimes_tip)  slope.plot.Xd<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xd,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct effect trait\")+   ggsci::scale_color_npg()  slope.plot.Xd slope.plot.Xa<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xa,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.Xa ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ dat<-blouch.reg.direct.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"Xd\",\"Xa\"),c(\"Xd_error\",\"Xa_error\"),Z_direct=1,Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.direct.adapt<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.adapt,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_reg_direct_adapt. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.21       0 0.05 0.13 0.18 0.21 0.25  0.33  1792    1 #> vy        0.01       0 0.00 0.00 0.01 0.01 0.01  0.02  2638    1 #> optima[1] 1.98       0 0.05 1.88 1.95 1.98 2.01  2.09  4501    1 #> optima[2] 0.95       0 0.09 0.77 0.89 0.95 1.01  1.11  2045    1 #> beta[1]   0.35       0 0.01 0.33 0.34 0.35 0.35  0.36  3624    1 #> beta[2]   0.33       0 0.05 0.25 0.30 0.33 0.36  0.44  1504    1 #> beta_e[1] 0.23       0 0.03 0.18 0.21 0.23 0.25  0.29  2259    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:32:52 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt) #rstan::extract posterior hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); #x<-seq(from=0,to=1,by=0.001) #V.sim<-calc_direct_V(phy,a.sims,sigma2_y.sims)   plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta[3:4],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_adaptive_cov_plot(post$a[i],post$sigma2_y[i],post$beta[i,],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } #multiple traits   par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1  #Vt = sigma2_y /( 2 * a) * ((1 - exp(-2 * a * ta)) .* exp(-a * tij)); //From Hansen (1997)  covariance.plot library(ggsci)  optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima  beta.post.1<-data.frame(post$beta[,1]) names(beta.post.1)<-\"post.beta.1\"  beta.post.2<-data.frame(post$beta[,2]) names(beta.post.2)<-\"post.beta.2\"  mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post.1} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post.1} mu.link.21<-function(x.seq){optima.post[,1]+x.seq*beta.post.2} mu.link.22<-function(x.seq){optima.post[,2]+x.seq*beta.post.2} x.seq <- seq(from=min(Xs), to=max(Xs) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.21 <- sapply(x.seq , mu.link.21 ) mu.22 <- sapply(x.seq , mu.link.22 ) mu.mean.11 <-lapply( mu.11 , mean ) mu.mean.12 <-lapply( mu.12 , mean ) mu.mean.21 <-lapply( mu.21 , mean ) mu.mean.22 <-lapply( mu.22 , mean )  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\" mu.mean.21<-data.frame(as.numeric(mu.mean.21)) mu.mean.22<-data.frame(as.numeric(mu.mean.22)) names(mu.mean.21)<-\"mu.mean.21\" names(mu.mean.22)<-\"mu.mean.22\"  mu.CI.11 <- lapply( mu.11 , rethinking::PI , prob=0.89 ) mu.CI.12 <- lapply( mu.12 , rethinking::PI , prob=0.89 ) mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  mu.CI.21 <- lapply( mu.21 , rethinking::PI , prob=0.89 ) mu.CI.22 <- lapply( mu.22 , rethinking::PI , prob=0.89 ) mu.CI.21<-data.frame(t(data.frame(mu.CI.21)),x.seq) mu.CI.22<-data.frame(t(data.frame(mu.CI.22)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.21)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.22)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df21<-data.frame(x.seq,mu.mean.21) df22<-data.frame(x.seq,mu.mean.22)  slope.plot.Xd<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xd,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_abline(intercept=beta[1],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=beta[2],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct effect trait\")+   ggsci::scale_color_npg()  slope.plot.Xd slope.plot.Xa<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xa,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::geom_abline(intercept=beta[1],slope=beta[4],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=beta[2],slope=beta[4],alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df21,ggplot2::aes(x=x.seq,y=mu.mean.21),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.21,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df22,ggplot2::aes(x=x.seq,y=mu.mean.22),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.22,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.Xa #Next we run the Multilevel version of the same model ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.25) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model sigma.prior<-c(0,1) ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ dat<-blouch.reg.direct.adapt.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"Xd\",\"Xa\"),c(\"Xd_error\",\"Xa_error\"),Z_direct=1,Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.direct.adapt.mlm.vi<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt_mlm_vi,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.adapt.mlm.vi,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_reg_direct_adapt_mlm_vi. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.22       0 0.05 0.13 0.18 0.21 0.25  0.34  2022    1 #> vy        0.01       0 0.00 0.00 0.01 0.01 0.01  0.02  2938    1 #> optima[1] 1.98       0 0.05 1.89 1.95 1.98 2.02  2.08  3500    1 #> optima[2] 0.94       0 0.10 0.72 0.88 0.95 1.00  1.10  1848    1 #> beta[1]   0.35       0 0.01 0.33 0.34 0.35 0.35  0.36  4252    1 #> beta[2]   0.33       0 0.05 0.25 0.30 0.33 0.36  0.45  1886    1 #> beta_e[1] 0.23       0 0.03 0.18 0.22 0.23 0.25  0.29  2202    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:33:25 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt.mlm.vi) fit.reg.direct.adapt.mlm.vi.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt_mlm_vi_nc,data = dat,chains = 1,cores=1,iter =2000) #> Warning: There were 2 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.direct.adapt.mlm.vi.nc,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_reg_direct_adapt_mlm_vi_nc. #> 1 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=1000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.22       0 0.05 0.13 0.18 0.21 0.25  0.33  1152    1 #> vy        0.01       0 0.00 0.00 0.01 0.01 0.01  0.02  1586    1 #> optima[1] 1.98       0 0.05 1.89 1.95 1.98 2.02  2.07  1061    1 #> optima[2] 0.94       0 0.09 0.73 0.88 0.95 1.00  1.10   941    1 #> beta[1]   0.35       0 0.01 0.33 0.34 0.35 0.35  0.36  1311    1 #> beta[2]   0.33       0 0.05 0.25 0.30 0.33 0.36  0.44  1030    1 #> beta_e[1] 0.23       0 0.03 0.18 0.21 0.23 0.25  0.29  1571    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:34:50 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt.mlm.vi.nc)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Multi-optima_Models-Examples.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Mullti-Optima Models Walkthrough","text":"Hansen T.F. 1997. Stabilizing Selection Comparative Analysis Adaptation. Evolution. 51:1341–1351. Hansen T.F., Pienaar J., Orzack S.H. 2008. comparative method studying adaptation randomly evolving environment. Evolution. 62:1965–1977.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Blouch uses RStan implement Stan. following code enables compiler optimizations improve estimation speed model, taken : https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started Blouch package includes primate phylogeny 10KTrees Project (Arnold et al. 2010), used various simulations comes https://10ktrees.nunn-lab.org/. Version 3 primate phylogeny 301 tips. randomly reduce tip number 100 manageable tree using functions ape R package (Paradis et al. 2004). Note set.seed R function used make generated X Y data repeatable (.e. data generated R), step lead repeatability MCMC sampling. Hence small differences parameter estimates published results. Lets plot tree nodes labeled - placing regime shifts next step. use nodes 164, 192, 104, results 4 regimes - shifts+root regime.","code":"rm(list=ls()) library(blouch) #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) #2 For R package checks - use line above on your own machine rstan::rstan_options(auto_write = TRUE)  dotR <- file.path(Sys.getenv(\"HOME\"), \".R\") if (!file.exists(dotR)) dir.create(dotR) M <- file.path(dotR, \"Makevars\") if (!file.exists(M)) file.create(M) arch <- ifelse(R.version$arch == \"aarch64\", \"arm64\", \"x86_64\") cat(paste(\"\\nCXX14FLAGS += -O3 -mtune=native -arch\", arch, \"-ftemplate-depth-256\"),     file = M, sep = \"\\n\", append = FALSE) #Four regimes with one adaptive trait and multiple slopes per optima but single alpha parameter set.seed(10) #Set sequence of random numbers for reproducability N<-100 #Number of species  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy) #Collapse or resolve multichotomies in phylogenetic trees.  l.tree<-max(ape::branching.times(phy)) ## Rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree #Set regimes - manually - 4 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels()"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"combine-data-and-tree-and-paint-regimes-on-tree-","dir":"Articles","previous_headings":"","what":"Combine data and tree and paint regimes on tree.","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. step basically make dummy trdata object containing tree blank “dat” dataset object. place regime shifts tree identified earlier using Blouch’s set.converge.regimes R function. function also produces plot tree colored regimes. addition, manually plot tree shifts colored make sure done everything correctly.","code":"trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata)  shifts<-c(164,192,104) #Location of nodes with regime shifts #100 species trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #> [1] 2 #> [1] 3 #>   [1] OU1 OU1 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [19] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [37] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [55] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [73] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #>  [91] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [109] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 #> [127] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [145] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [163] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [181] OU2 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 #> Levels: OU1 OU2 OU3 OU4 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" #Check if code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]])  reg.colors<-ggsci::pal_npg(palette=c(\"nrc\"),alpha=1)(4)  print(reg.colors) #> [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" #plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1,show.tip.label=FALSE) plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1,show.tip.label=FALSE) #FigS1a.plot<-recordPlot()  #pdf(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS1a.pdf\", width=5, height=7 ) plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1,show.tip.label=FALSE) #dev.off()  reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"get-info-on-phylogeny","dir":"Articles","previous_headings":"","what":"Get info on phylogeny","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Next build regimes object include internal node tip regimes, use Blouch’s lineage.constructor R function trace lineages tips root determine regime node - R function built Blouch uses internally given empirical dataset, use function part data simulation.","code":"regimes_internal <-trdata$phy$node.label #Get internal regimes at nodes regimes_tip <- trdata$dat$regimes #Get regimes at tips regimes <- concat.factor(regimes_tip, regimes_internal) #Combine these into a list anc_maps<-\"regimes\" #Type of regime placement - currently only at nodes lineages <- lapply(1:N, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"set-trueknown-parameter-values","dir":"Articles","previous_headings":"","what":"Set true/known parameter values","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Next set true/known parameter values. half-life (hl), stationary variance (vy), simulation translate α\\alpha () σy2\\sigma^2_y (sigma2_y). set ancestral value root (vX0) 0, instantaneous variance BM process (Sxx) 10.","code":"hl<-0.1 #Half life a<-log(2)/hl #hl expressed as alpha parameter vy<-0.01 #Stationary Variance sigma2_y<-vy*(2*(log(2)/hl)); #Vy expressed as random fluctuations of Y  vX0<-0 #Ancestral value at root sigma2_x<-matrix(1,1,1) #Variance of BM Process #Sxx<-10"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulate-x-data","dir":"Articles","previous_headings":"","what":"Simulate X data","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"first simulate X data following Brownian-Motion Process using fastBM function phytools package (Revell 2011) parameter values set . plot values using phenogram function package make sure things look .","code":"#X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with BM scaling 10 X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with BM scaling 10 names(X)<-phy$tip.label phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels..."},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulate-y-data","dir":"Articles","previous_headings":"","what":"Simulate Y data","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Next need simulate Y data - using four different optima (intercepts) four different slopes. use R function weight.matrix, Blouch includes produce optima_matrix object, weighting lineage based amount time spent regime (see Hansen 1997 derivation). followed using R function calc_adaptive_dmX Blouch, calculates design matrix observed predictor X variables species multiplied phylogenetic correction factor, following Hansen et al. (2008), values stored object pred_X. set values optima/intercepts (optima) slopes (beta), use linear model construct deterministic relationship set parameter values mu, vector mean values species analysis.","code":"optima_matrix<-weight.matrix(trdata$phy, a, lineages) #Calculate optima/intercepts matrix pred_X<-calc_adaptive_dmX(phy,a,X) #Calculate design matrix  optima<-c(1,2,3,4) #Simulated optima/intercepts beta<-c(0.75,0.5,0.35,0.25) #Simulated slopes  mu<-matrix(NA,N,1) for(i in 1:N){ #Generative function to produce average Y values for each combination of optima/intercepts and slopes following Blouch approach   mu[i] = optima_matrix[i,]%*%optima+beta[reg_tips[i]]%*%pred_X[i] }"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"calculating-v","dir":"Articles","previous_headings":"","what":"Calculating V","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"construct variance/covariance matrix (V) based previously set parameter values Blouch R function calc_adaptive_V, following Hansen et al. (2008). Finally sill simulate Y values based mean vector mu covariance matrix V. Let’s make simple plot data, look simple ordinary least squares regression Y X. intercept slope values give us idea center priors .","code":"n_reg<-length(unique(regimes)) #Count number of regimes Z_adaptive<-1 #Number of adaptive X traits V<-calc_adaptive_V(phy,a, sigma2_y,  beta,  sigma2_x, Z_adaptive) #Calculate V based on set values Y<-MASS::mvrnorm(n=1,mu,V) #Simulate Y variables centered on mu with covariariance matrix V df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.6669 -0.9433 -0.3463  1.1055  1.7289  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   2.7978     0.1254  22.305   <2e-16 *** #> X             0.1595     0.1102   1.447    0.151     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.1 on 98 degrees of freedom #> Multiple R-squared:  0.02093,    Adjusted R-squared:  0.01094  #> F-statistic: 2.095 on 1 and 98 DF,  p-value: 0.151"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulating-measurement-error","dir":"Articles","previous_headings":"","what":"Simulating measurement error","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Next simulate measurement error - use standard deviation measurement error 0.01, provide Blouch vector (X_error Y_error), use rnorm function add error X Y variables. words, telling Blouch estimated error X Y 0.01, providing X Y variables offset random amount error standard deviation.","code":"#Simulate errors Z_X_error<-1 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) #Add ME to Y X_with_error<-X+rnorm(N,0,0.01) #Add ME to X"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"data-setup-for-blouch","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"line combines existing trdata file make.trdata regime info tips X Y values errors. First run multilevel multi-optima adaptive model varying effects. allow intercepts (optima) slopes vary regimes. multilevel model, information can shared across regimes, can produce accurate parameter estimates. priors used simulation. See Grabowski (press) setting priors. change values requires open Stan function, case blouchOU_reg_adapt_mlm_ve, manually edit . Unfortunately way around present, trust - worth","code":"#Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(2.8,1) #Informed by linear model beta.prior<-c(0.16,0.25) #Informed by linear model sigma.prior<-c(0,1)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot beta.sims<-data.frame(rnorm(n=1000,beta.prior[1],beta.prior[2])) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2)  x<-seq(0,1,by=0.01) df<-data.frame(x)  p<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   p<-p+ggplot2::stat_function(fun=function(x,i){calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i,],x)},                               args=list(i=i),alpha=0.2,lwd=2) }  p<-p+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\") p"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"exploring-priors-1","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Lets check simulated data reasonable values priors shown light grey lines. “.sims” values - priors based intercept slope OLS regression , standard deviations set visualizing priors versus data. See Grabowski (press) setting priors.","code":"optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  df<-data.frame(Y=trdata$dat$Y_with_error,X=trdata$dat$X_with_error)  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.slope.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"explore-priors---built-in-functions","dir":"Articles","previous_headings":"","what":"Explore Priors - built in functions","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"use helper function blouch.reg.adapt.prep() setup dat object Stan. function helper functions included Blouch require trdata files, names columns contain Y (sometimes depending model) X data error data. “Z_adaptive” number predictors, “regimes” name column tip regime data located. See help info function articles github.com functionality.","code":"hl.prior.plot.code(hl.prior) vy.prior.plot.code(vy.prior) covariance.prior.direct.plot.code(hl.prior,vy.prior) reg.adapt.prior.plot.code(trdata,optima.prior,beta.prior) dat<-blouch.reg.adapt.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"running-models","dir":"Articles","previous_headings":"","what":"Running models","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Now let’s run multi-level multi-optima adaptive model varying effects (blouchOU_reg_adapt_mlm_ve ). Stan prints lot info, lets just look parameter estimates store posterior distribution later use. real analysis explore posterior distributions fitting additional models, done previously. Now let’s run non-multilevel version model. compare models terms predictive performance . priors without prior sigma. slightly different (non-mlm) helper function Run model can also compare parameter estimates values set earlier.","code":"fit.reg.adapt.mlm.ve<- rstan::sampling(blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve,data = dat,chains = 2,cores=2,iter =4000, control = list(adapt_delta = 0.95)) #> Warning: There were 2 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho[1,2]\",\"sigma\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_ve. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>              mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> hl           0.08    0.00 0.03  0.04  0.06  0.07  0.09  0.17  2280    1 #> vy           0.01    0.00 0.01  0.00  0.00  0.01  0.01  0.02  5402    1 #> optima_bar   2.58    0.01 0.54  1.54  2.24  2.56  2.90  3.68  5703    1 #> beta_bar[1]  0.34    0.00 0.15  0.00  0.25  0.36  0.45  0.60  3998    1 #> Rho[1,2]    -0.35    0.01 0.34 -0.88 -0.62 -0.39 -0.12  0.41  3971    1 #> sigma[1]     1.25    0.01 0.38  0.69  0.98  1.19  1.46  2.15  4952    1 #> sigma[2]     0.35    0.00 0.21  0.11  0.21  0.30  0.43  0.90  2620    1 #> optima[1]    1.02    0.00 0.11  0.81  0.95  1.02  1.09  1.25  5869    1 #> optima[2]    1.87    0.00 0.12  1.64  1.80  1.87  1.94  2.10  5661    1 #> optima[3]    2.77    0.00 0.27  2.21  2.60  2.79  2.95  3.23  3936    1 #> optima[4]    3.96    0.00 0.12  3.75  3.88  3.95  4.02  4.24  3871    1 #> beta[1,1]    0.74    0.00 0.07  0.61  0.70  0.74  0.79  0.88  4699    1 #> beta[2,1]    0.46    0.00 0.08  0.29  0.41  0.46  0.51  0.62  6695    1 #> beta[3,1]    0.22    0.00 0.18 -0.18  0.11  0.24  0.35  0.53  3664    1 #> beta[4,1]    0.28    0.00 0.06  0.18  0.24  0.28  0.32  0.40  6087    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:40:52 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  post.mlm.ve<-rstan::extract(fit.reg.adapt.mlm.ve) #Extract posterior distribution #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(2.8,1) #Informed by linear model beta.prior<-c(0.16,0.25) #Informed by linear model dat<-blouch.reg.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.adapt.ve<- rstan::sampling(blouch:::stanmodels$blouchOU_reg_adapt_ve,data = dat,chains = 2,cores=2,iter =4000, control = list(adapt_delta = 0.95)) print(fit.reg.adapt.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_adapt_ve. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.08       0 0.03  0.04 0.06 0.08 0.10  0.16  1744    1 #> vy        0.01       0 0.01  0.00 0.00 0.01 0.01  0.03  4826    1 #> optima[1] 1.04       0 0.11  0.83 0.97 1.04 1.11  1.27  6266    1 #> optima[2] 1.88       0 0.11  1.66 1.81 1.88 1.96  2.11  5995    1 #> optima[3] 2.68       0 0.25  2.19 2.51 2.68 2.85  3.14  7129    1 #> optima[4] 3.96       0 0.12  3.76 3.89 3.95 4.02  4.21  2926    1 #> beta[1,1] 0.73       0 0.07  0.60 0.69 0.73 0.78  0.86  6837    1 #> beta[2,1] 0.44       0 0.08  0.28 0.38 0.44 0.49  0.60  7370    1 #> beta[3,1] 0.15       0 0.17 -0.20 0.03 0.15 0.27  0.49  7508    1 #> beta[4,1] 0.28       0 0.05  0.17 0.24 0.28 0.31  0.39  7722    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:47:09 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post.ve<-rstan::extract(fit.reg.adapt.ve)#Extract posterior distribution"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"plotting-posterior-versus-prior-distributions","dir":"Articles","previous_headings":"","what":"Plotting posterior versus prior distributions","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Great. can see marginal likelihood tables Blouch fairly accurate recovering known parameter values. effective way look full estimated posterior distribution compare prior plot results. Lets use non-multi-optima adaptive model varying effects - model’s posteriors looks quite similar. plots dotted line true values parameter. First half-life (hl):  Now stationary variance parameter (Vy):  Now lets plot covariance function distance tips - gives idea decay covariance OU process. use Blouch’s R helper function, calc_multiadaptive_cov_plot.R make plots, calculates expected covariance adaptive model given values alpha, sigma2_y, beta, x, sequence values across X axis.  Finally lets plot regression results - posterior compared prior true values (dotted lines). Posterior predicted means (black line) 89% compatibility intervals (light grey region) shown optimal intercepts slopes. Species values regime shown colored circles matching legend colors, priors intercept slope shown light grey lines. Dotted lines true values parameters. Let’s combine four plots one plot","code":"post<-post.ve #post<-post.mlm.ve mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2) mypal[2]<-palette()[1]  hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\" df<-data.frame(cbind(hl.sims,hl.post))  hl.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  df<-data.frame(cbind(vy.sims,vy.post))  vy.plot<-ggplot2::ggplot(data=df)+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims, fill=mypal[2]),alpha=0.2)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims, fill=mypal[1]),alpha=0.2)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+   #ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))   ggplot2::scale_fill_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) vy.sims<-rexp(n=1000,rate=vy.prior) beta.cov.sims<-data.frame(rnorm(n=1000,beta.prior[1],beta.prior[2])) a.sims<-log(2)/hl.sims sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)) #mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2)  x<-seq(0,1,by=0.01) df<-data.frame(x)  covariance.plot<-ggplot2::ggplot(df,ggplot2::aes(x)) for(i in 1:30){   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i){calc_adaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.cov.sims[i,],x)},                               args=list(i=i),alpha=0.2,lwd=2)   covariance.plot<-covariance.plot+ggplot2::stat_function(fun=function(x,i){calc_adaptive_cov_plot(post$a[i],post$sigma2_y[i],post$beta[i],x)},                               args=list(i=i),alpha=0.2,color=mypal[1],lwd=2)   }  covariance.plot<-covariance.plot+ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+   ggplot2::labs(title=\"\",x=\"Time Since MRCA\", y = \"Covariance\")+ ggplot2::scale_color_manual(values=mypal,name=\"\",labels=c(\"Posterior\",\"Prior\"))  covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\",\"post.beta.3\",\"post.beta.4\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]}  mu.link.21<-function(x.seq){optima.post[,3]+x.seq*beta.post[,3]} mu.link.22<-function(x.seq){optima.post[,4]+x.seq*beta.post[,4]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.21 <- sapply(x.seq , mu.link.21 ) mu.22 <- sapply(x.seq , mu.link.22 )  mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.21<-colMeans(mu.21) mu.mean.22<-colMeans(mu.22)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.mean.21<-data.frame(as.numeric(mu.mean.21)) mu.mean.22<-data.frame(as.numeric(mu.mean.22)) names(mu.mean.21)<-\"mu.mean.21\" names(mu.mean.22)<-\"mu.mean.22\"    mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  mu.CI.21 <- apply( mu.21 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.22 <- apply( mu.22 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  mu.CI.21<-data.frame(t(data.frame(mu.CI.21)),x.seq) mu.CI.22<-data.frame(t(data.frame(mu.CI.22)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.21)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.22)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df21<-data.frame(x.seq,mu.mean.21) df22<-data.frame(x.seq,mu.mean.22)  #mypal.reg <- ggsci::pal_npg(\"nrc\", alpha = 0.7)(length(beta))  regression.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.1)+      ggplot2::geom_abline(intercept=optima[1],slope=beta[1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[3],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[4],slope=beta[4],alpha=0.5,linetype=2)+      ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+      ggplot2::geom_line(data=df21,ggplot2::aes(x=x.seq,y=mu.mean.21),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.21,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+   ggplot2::geom_line(data=df22,ggplot2::aes(x=x.seq,y=mu.mean.22),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.22,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+         ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::theme(     legend.margin = ggplot2::margin(6, 6, 6, 6)   )+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"X - Adaptation Model\")+   ggsci::scale_color_npg()  regression.plot regression.plot<-regression.plot+ggplot2::theme(legend.position=\"none\") fig<-ggpubr::ggarrange(hl.plot, vy.plot,covariance.plot,regression.plot,ncol=2,nrow=2, labels = c(\"A)\",\"B)\",\"C)\",\"D)\"),common.legend = TRUE,legend=\"top\") #fig<-ggpubr::annotate_figure(fig,top=paste(\"Multi-Optima Adaptive Model - Varying Effects,\\n hl=\",hl,sep=\"\")) #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/Fig2.pdf\", plot = fig, width=7, height=7 ) fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"model-comparison-using-psis","dir":"Articles","previous_headings":"","what":"Model Comparison using PSIS","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Lets model comparison using Pareto-Smoothed Importance Sampling (PSIS) R Package loo (Vehtari et al. 2023). loo estimates leave-one-cross validation Bayesian analyses. looking Pareto k values ~0.7, suggest results accurate. two species consistently high Pareto shape values across models Daubentonia madagascariensis, sole member distinct lemur family, Tarsius bancanus, tarsier included phylogeny – distinct due long period independent evolution (.e. long single branch phylogeny). leads hard predict based species tree. PSIS also provides way look outliers analysis. compare two models using loo_compare function package.    Let’s combine two plots one  results suggest models indistinguishable - standard error difference expected log pointwise predictive density (elpd) three models big larger difference.","code":"#Mlm varying effects model loo_mlm_ve <- loo::loo(fit.reg.adapt.mlm.ve, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_mlm_ve) #>  #> Computed from 4000 by 100 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo     30.2  6.5 #> p_loo         5.3  1.5 #> looic       -60.4 12.9 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.5, 1.7]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     99    99.0%   478      #>    (0.7, 1]   (bad)       1     1.0%   <NA>     #>    (1, Inf)   (very bad)  0     0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_mlm_ve) #4X6 loo_mlm_ve.plot<-recordPlot()  #Varying effects model loo_ve <- loo::loo(fit.reg.adapt.ve, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_ve) #>  #> Computed from 4000 by 100 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo     30.0  6.8 #> p_loo         5.7  1.7 #> looic       -60.1 13.5 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.6, 1.9]). #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. ESS #> (-Inf, 0.7]   (good)     99    99.0%   561      #>    (0.7, 1]   (bad)       1     1.0%   <NA>     #>    (1, Inf)   (very bad)  0     0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. plot(loo_ve) #4X6 plot(loo_ve,label_points=TRUE) #Label outliers loo_ve.plot<-recordPlot()  loo::loo_compare(loo_mlm_ve, loo_ve) #>        elpd_diff se_diff #> model1  0.0       0.0    #> model2 -0.2       0.6  0.2 + c(-1,1)*0.6*1.86 #95% comparability interval of the difference, z-score of 1.86 #> [1] -0.916  1.316 #pdf(file=\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS4.pdf\", width=12, height=4 )  cowplot::plot_grid(loo_mlm_ve.plot,loo_ve.plot,labels=c(\"A)\",\"B)\")) #> Warning: Package `gridGraphics` is required to handle base-R plots. #> Substituting empty plot. #> Warning: Package `gridGraphics` is required to handle base-R plots. #> Substituting empty plot. #fig<-ggpubr::ggarrange(loo_mlm_ve.plot, loo_ve.plot,ncol=2,nrow=1, labels = c(\"A)\",\"B)\"),common.legend = TRUE,legend=\"top\") #fig<-ggpubr::annotate_figure(fig,top=paste(\"Multi-Optima Adaptive Model - Varying Effects,\\n hl=\",hl,sep=\"\"))  #dev.off()"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Now lets compare two models using Bayes Factors. use bridgesampling R package (Gronau et al. 2020). Looking , can read results data X times likely model assumes first mode rather second model. , non-multilevel varying effects model best supported compared multilevel version model.","code":"#Bayes Factors lml.fit.reg.adapt.mlm.ve<-bridgesampling::bridge_sampler(fit.reg.adapt.mlm.ve,silent=TRUE,maxiter=5000) lml.fit.reg.adapt.ve<-bridgesampling::bridge_sampler(fit.reg.adapt.ve,silent=TRUE,maxiter=5000)  bridgesampling::bf(lml.fit.reg.adapt.ve,lml.fit.reg.adapt.mlm.ve) #> Estimated Bayes factor in favor of lml.fit.reg.adapt.ve over lml.fit.reg.adapt.mlm.ve: 27.15117"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"trace-for-estimated-parameters","dir":"Articles","previous_headings":"","what":"Trace for estimated parameters","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Lets focus non-multilevel varying effects model best Pareto k values - none >0.7 Let’s look traceplot, givea visualization degree chain convergence.","code":"rstan::traceplot(fit.reg.adapt.mlm.ve,pars = c(c(\"hl\",\"vy\",\"optima\",\"beta\",\"Rho[1,2]\"))) rstan::traceplot(fit.reg.adapt.ve,pars = c(c(\"hl\",\"vy\",\"optima\",\"beta\"))) #plot.mlm<-rstan::traceplot(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) #plot.ve<-rstan::traceplot(fit.reg.adapt.ve,pars = c(c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")))  #fig<-ggpubr::ggarrange(plot.mlm, plot.ve,ncol=1,nrow=2, labels = c(\"A)\",\"B)\"),common.legend = TRUE,legend=\"top\") #fig<-ggpubr::annotate_figure(fig,top=paste(\"Multi-Optima Direct Effect - Varying Effects, hl=\",hl,sep=\"\")) #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS2.pdf\", plot = fig, width=9, height=7) #fig"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"predictive-checks","dir":"Articles","previous_headings":"","what":"Predictive Checks","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Now lets run prior posterior predictive checks two models. Prior predictive checks generate predictions model using prior distributions order assess whether priors appropriate – equivalent running model without data (Gabry et al. 2019). Posterior predictive checks generate data according posterior predictive distribution compare observed data assess fit model (Gabry et al. 2019). Blouch includes Stan functions run prior posterior predictive checks included models use demonstrated simulation empirical examples.     Posterior predictive checks show model well fit generates data close approximation true dataset.","code":"######################################################################################################## fit.reg.adapt.ve.priorpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_ve_priorpc,data=dat,chains = 2,cores=2, iter =2000,algorithm=c(\"Fixed_param\")) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking'  post<-rstan::extract(fit.reg.adapt.ve.priorpc)  num.plots<-5 plots<-ysim.ppc.plot.code(dat,post,1:num.plots) plots<-gridExtra::grid.arrange(grobs=plots, ncol=5, nrow=1,common.legend=TRUE,legend=\"top\") tgrob <- ggpubr::text_grob(\"Multi-Optima Adaptive Model - Varying Efects - Prior PC\",size = 10) plots.prior<-ggpubr::annotate_figure(plots,top=tgrob)  fit.reg.adapt.ve.postpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_ve_postpc,data=dat,chains = 2,cores=2, iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking'  post<-rstan::extract(fit.reg.adapt.ve.postpc)  num.plots<-5 plots<-ysim.ppc.plot.code(dat,post,1:num.plots) plots<-gridExtra::grid.arrange(grobs=plots, ncol=5, nrow=1,common.legend=TRUE,legend=\"top\") tgrob <- ggpubr::text_grob(\"Multi-Optima Adaptive Model - Varying Efects - Posterior PC\",size = 10) plots.post<-ggpubr::annotate_figure(plots,top=tgrob) fig<-ggpubr::ggarrange(plots.prior, plots.post,ncol=1,nrow=2, labels = c(\"A)\",\"B)\"),common.legend = TRUE,legend=\"top\")  #ggplot2::ggsave(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch Project - SBR2/Blouch ms/R2/Figures/FigS5.pdf\", plot = fig, width=9, height=5)  #plot(post$Y_sim_obs[4,],dat$Y_obs)  plots.prior plots.post"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Simulation Example from Grabowski (in press) Walkthrough","text":"Arnold, C., L. J. Matthews, C. L. Nunn. 2010. 10kTrees Website: New Online Resource Primate Phylogeny. Evolutionary Anthropology 19:114-118. Gabry J., Simpson D., Vehtari ., Betancourt M., Gelman . 2019. Visualization Bayesian workflow. Journal Royal Statistical Society: Series (Statistics Society). 182:389–402. Gronau Q.F., Singmann H., Wagenmakers E.-J. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software. 92:1–29. Hansen T.F. 1997. Stabilizing Selection Comparative Analysis Adaptation. Evolution. 51:1341–1351. McElreath R. 2020. Statistical rethinking: Bayesian course examples R Stan. CRC press. Paradis E., Claude J., Strimmer K. 2004. APE: Analyses Phylogenetics Evolution R language. Bioinformatics. 20:289–290. Revell L.J. 2011. phytools: R package phylogenetic comparative biology (things). Methods Ecol. Evol. 3:217–223. Uyeda J.C., Harmon L.J. 2014. Novel Bayesian Method Inferring Interpreting Dynamics Adaptive Landscapes Phylogenetic Comparative Data. Systematic Biology. 63:902–918. Vehtari ., Gabry J., Magnusson M., Yao Y., Bürkner P.-C., Paananen T., Gelman . 2023. loo: Efficient leave-one-cross-validation WAIC Bayesian models.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"multi-optima-direct-effect-model-with-varying-effects---single-predictor","dir":"Articles","previous_headings":"","what":"Multi-optima Direct Effect Model with Varying Effects - Single Predictor","title":"Varying Effects and Multilevel Models Walkthrough","text":"First create phylogeny randomly sampling 10K Trees phylogeny   Simulate X Y data   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"########################################################################################################  set.seed(10)  N<-50 #Number of species #set.seed(1) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree  shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\"   #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))  reg.colors<-ggsci::pal_npg(palette=c(\"nrc\"),alpha=1)(2) plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal)   anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ######################### hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0 Sxx<-10 #Look at effects  X<-phytools::fastBM(phy,a=vX0,sig2=Sxx,internal=FALSE) #Simulate X BM variable on tree, with scaling 10 Z_direct<-1 names(X)<-phy$tip.label phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach optima<-c(2,1) beta<-c(0.25,0.15) #Two Optima/Two Slopes mu<-matrix(NA,N,1) for(i in 1:N){   mu[i]<-dmX[i,]%*%optima+beta[reg_tips[i]]%*%X[i]; }  V<-calc_direct_V(phy,sigma2_y,a) Y<-MASS::mvrnorm(n=1,mu,V)  ############################################################################################################### df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.37351  0.08688  0.21850  0.31787  0.49193  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.76503    0.08313   21.23  < 2e-16 *** #> X            0.24886    0.02369   10.50 4.96e-14 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.5224 on 48 degrees of freedom #> Multiple R-squared:  0.6968, Adjusted R-squared:  0.6905  #> F-statistic: 110.3 on 1 and 48 DF,  p-value: 4.955e-14  ################################################################################################################ #Simulate errors  Z_X_error<-1 #Number of X traits with error X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)  ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25)"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Varying Effects and Multilevel Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot  use helper function blouch.reg.direct.prep() setup dat file Stan. “Z_direct” number predictors, “regimes” name regime column trdata$dat. Multi-optima Direct Effect Model Varying Effects Now lets look prior vs. posterior plots parameters Half-life plot  Vy Prior vs. posterior plot  Prior versus posterior shared branch lengths correspond covariance  Prior vs. Posterior Plot Regression  `Multilevel Multi-optima Direct Effect Model Varying Effects Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors. use helper function blouch.reg.direct.prep() setup dat file Stan. “Z_direct” number predictors, “regimes” name regime column trdata$dat. Multilevel Multi-optima Direct Effect Model Varying Effects - Non centered","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims));  plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) covariance.prior.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.prior.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Trait 1\") + ggplot2::xlab(\"Trait 2\")+   ggsci::scale_color_npg()  prior.slope.plot ############################################################################################################ #Blouch prep code - Regimes + Direct Efffect model #source(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/R Setup Code/blouch.prep.R\") dat<-blouch.reg.direct.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.direct.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_ve,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.16       0 0.09 0.06 0.10 0.14 0.20  0.37  1106    1 #> vy        0.02       0 0.01 0.01 0.01 0.02 0.02  0.03   973    1 #> optima[1] 2.01       0 0.04 1.92 1.98 2.01 2.03  2.09  2242    1 #> optima[2] 0.98       0 0.11 0.69 0.92 0.99 1.06  1.17  1326    1 #> beta[1,1] 0.26       0 0.01 0.24 0.25 0.26 0.26  0.27  3028    1 #> beta[2,1] 0.13       0 0.03 0.07 0.11 0.13 0.15  0.19  3065    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:51:24 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.ve) hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot plot( NULL , xlim=c(0,1) , ylim=c(0,1) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(sigma2_y.sims[i,] /(2 * a.sims[i,]) * ((1 - exp(-2 * a.sims[i,] * (1-(x/2)))) * exp(-a.sims[i,] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(post$sigma2_y[i] /(2 * post$a[i]) * ((1 - exp(-2 * post$a[i] * (1-(x/2)))) * exp(-post$a[i] * x)) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5)) } par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1 covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\")  mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 )   mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)   slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.1)+      ggplot2::geom_abline(intercept=optima[1],slope=beta[1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2],alpha=0.5,linetype=2)+      ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+      ggplot2::theme_bw()+   ggplot2::theme(   panel.grid.major = ggplot2::element_blank(),   panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct effect trait\")+   ggsci::scale_color_npg()  slope.plot.1 ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25) sigma.prior<-c(0,1) ############################################################################################################ dat<-blouch.reg.direct.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_direct=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.direct.mlm.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_ve,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 25 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.direct.mlm.ve,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>             mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl          0.18    0.01 0.13  0.05  0.10 0.15 0.22  0.51   196 1.01 #> vy          0.02    0.00 0.01  0.01  0.01 0.02 0.02  0.04   195 1.01 #> optima_bar  1.49    0.01 0.38  0.74  1.26 1.48 1.73  2.25  1998 1.00 #> beta_bar[1] 0.12    0.01 0.17 -0.29  0.04 0.16 0.22  0.39  1087 1.00 #> Rho[1,1]    1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> Rho[1,2]    0.07    0.01 0.33 -0.59 -0.16 0.08 0.32  0.67  2602 1.00 #> Rho[2,1]    0.07    0.01 0.33 -0.59 -0.16 0.08 0.32  0.67  2602 1.00 #> Rho[2,2]    1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  1939 1.00 #> sigma[1]    0.86    0.01 0.40  0.33  0.56 0.76 1.06  1.83  1589 1.00 #> sigma[2]    0.34    0.01 0.34  0.04  0.11 0.23 0.43  1.26  1131 1.00 #> optima[1]   2.01    0.00 0.04  1.92  1.98 2.01 2.03  2.09  1561 1.00 #> optima[2]   0.94    0.01 0.19  0.49  0.89 0.97 1.04  1.14   186 1.01 #> beta[1,1]   0.26    0.00 0.01  0.24  0.25 0.26 0.26  0.27  2053 1.00 #> beta[2,1]   0.14    0.00 0.04  0.07  0.11 0.14 0.16  0.21  1554 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:51:51 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.mlm.ve) fit.reg.direct.mlm.ve.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_mlm_ve_nc,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 506 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is NA, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(fit.reg.direct.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_mlm_ve_nc. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl         0.17    0.01 0.10  0.06  0.11 0.14 0.19  0.44   140 1.02 #> vy         0.02    0.00 0.01  0.01  0.01 0.02 0.02  0.03    96 1.02 #> optima_bar 1.48    0.01 0.33  0.79  1.33 1.47 1.65  2.15  1019 1.00 #> beta_bar   0.16    0.01 0.12 -0.15  0.11 0.19 0.24  0.38    80 1.02 #> Rho[1,1]   1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> Rho[1,2]   0.09    0.01 0.29 -0.50 -0.10 0.14 0.26  0.63  1599 1.00 #> Rho[2,1]   0.09    0.01 0.29 -0.50 -0.10 0.14 0.26  0.63  1599 1.00 #> Rho[2,2]   1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  1062 1.00 #> sigma[1]   0.83    0.04 0.39  0.32  0.57 0.70 1.00  1.88    81 1.03 #> sigma[2]   0.35    0.09 0.29  0.04  0.11 0.24 0.57  0.91     9 1.16 #> optima[1]  2.01    0.00 0.04  1.93  1.98 2.01 2.03  2.09   645 1.00 #> optima[2]  0.97    0.02 0.14  0.58  0.91 0.99 1.05  1.17    82 1.02 #> beta[1,1]  0.26    0.00 0.01  0.24  0.25 0.26 0.26  0.27  1176 1.00 #> beta[2,1]  0.13    0.00 0.04  0.06  0.11 0.13 0.16  0.21   133 1.01 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:53:47 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.mlm.ve.nc) rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"multlevel-multi-optima-direct-effect-model-with-varying-effects---multiple-predictors","dir":"Articles","previous_headings":"","what":"Multlevel Multi-optima Direct Effect Model with Varying Effects - Multiple Predictors","title":"Varying Effects and Multilevel Models Walkthrough","text":"Two regimes two direct effect predictors multiple slopes per optima single alpha parameter    Format tree Simulate two direct effect traits   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors. use helper function blouch.reg.direct.prep() setup dat file Stan. “Z_direct” number predictors, “regimes” name regime column trdata$dat. Multi-optima Direct Efect Model Varying Effects posteriors explored, compared priors, etc. One can also use varying effects multilevel models multiple predictors fashion .","code":"############################################################################################################ #Regimes model ############################################################################################################ ######################################################################################################## #Create phylogeny ######################################################################################################## N<-50 #Number of species set.seed(10) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   tip.label<-phy$tip.label   #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree #source(\"/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Simulation Code/Functions/set.converge.regimes.R\") #Macbook Pro  shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) ############################################################################################################ #Simulate data n<-length(trdata$phy$tip.label) regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ######################### hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0 Sxx<-10 #Look at effects  Z_direct<-2 vcv<-matrix(c(1,0,0,1),2,2) #No correlation between traits Xs<-phytools::sim.corrs(phy,vcv) #Simulated correlated BM Xs  phytools::phenogram(phy,Xs[,1],spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... phytools::phenogram(phy,Xs[,2],spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... dmX<-weight.matrix(trdata$phy, a, lineages) #Slouch approach optima<-c(2,1) beta<-data.frame(matrix(c(0.25,0.15,0.35,0.1),ncol=2,nrow=2)) #Two traits on columns, two regimes on vertical  mu<-matrix(NA,N,1) for(i in 1:N){   mu[i]<-dmX[i,]%*%optima+Xs[i,]%*%t(beta[reg_tips[i],]); }  V<-calc_direct_V(phy,sigma2_y,a) Y<-MASS::mvrnorm(n=1,mu,V)   ###############################################################################################################  summary(lm(Y~Xs)) #>  #> Call: #> lm(formula = Y ~ Xs) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.71025 -0.12589  0.09583  0.17052  0.62782  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.08067    0.06724  30.944  < 2e-16 *** #> Xs1          0.14691    0.04486   3.275  0.00199 **  #> Xs2          0.57128    0.05648  10.114 2.22e-13 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2912 on 47 degrees of freedom #> Multiple R-squared:  0.771,  Adjusted R-squared:  0.7612  #> F-statistic:  79.1 on 2 and 47 DF,  p-value: 9.077e-16  ################################################################################################################   ################################################################################################################ #Simulate errors  Z_X_error<-2 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) names(X_error)<-c(\"X1_error\",\"X2_error\") Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-Xs+rnorm(N,0,0.01) X_with_error<-data.frame(X_with_error) names(X_with_error)<-c(\"X1\",\"X2\") ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0,0.25) ############################################################################################################ #Test Blouch prep code - Regimes + Direct Efffect model dat<-blouch.reg.direct.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"X1\",\"X2\"),c(\"X1_error\",\"X2_error\"),Z_direct=2,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.direct.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_ve,data = dat,chains = 2,cores=2,iter =2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.17       0 0.09 0.06 0.11 0.15 0.21  0.41   606    1 #> vy        0.01       0 0.00 0.01 0.01 0.01 0.01  0.02   577    1 #> optima[1] 2.05       0 0.04 1.97 2.02 2.05 2.07  2.12  1341    1 #> optima[2] 1.00       0 0.14 0.72 0.92 1.01 1.09  1.25   826    1 #> beta[1,1] 0.22       0 0.02 0.17 0.20 0.22 0.23  0.26  1587    1 #> beta[1,2] 0.33       0 0.03 0.27 0.31 0.33 0.35  0.39  1482    1 #> beta[2,1] 0.27       0 0.08 0.10 0.22 0.27 0.33  0.44  1870    1 #> beta[2,2] 0.19       0 0.07 0.05 0.14 0.19 0.23  0.33  1142    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:54:13 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). #plot(rethinking::precis(fit.reg.direct.ve,depth=3,pars = c(\"hl\",\"vy\",\"optima\",\"beta\"))) post<-rstan::extract(fit.reg.direct.ve) rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"multlevel-multi-optima-adaptive-model-with-varying-effects---single-predictor","dir":"Articles","previous_headings":"","what":"Multlevel Multi-optima Adaptive Model with Varying Effects - Single Predictor","title":"Varying Effects and Multilevel Models Walkthrough","text":"Simulate X Y data   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"######################################################################################################## #Two regimes with adaptive trait and multiple slopes per optima but single alpha parameter set.seed(10) N<-50 #Number of species #set.seed(1) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) #print(edge.regimes)  reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2)  print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ############################################################################################################################################################################### hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0 sigma2_x<-matrix(1,1,1) #Variance of BM Process   X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 Z_adaptive<-1 names(X)<-phy$tip.label phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... optima_matrix<-weight.matrix(trdata$phy, a, lineages) #Slouch approach pred_X<-calc_adaptive_dmX(phy,a,X) optima<-c(2,1) beta<-c(0.25,0.15) #Two Optima/Two Slopes  mu<-matrix(NA,N,1) for(i in 1:N){   mu[i] = optima_matrix[i,]%*%optima+beta[reg_tips[i]]%*%pred_X[i] }  n_reg<-length(unique(regimes)) V<-calc_adaptive_V(phy,a, sigma2_y, beta,  sigma2_x, Z_adaptive) Y<-MASS::mvrnorm(n=1,mu,V)   ############################################################################################################### df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.05210  0.02654  0.20725  0.32340  0.43378  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.73521    0.07852  22.100  < 2e-16 *** #> X            0.19442    0.07077   2.747  0.00844 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.4934 on 48 degrees of freedom #> Multiple R-squared:  0.1359, Adjusted R-squared:  0.1179  #> F-statistic: 7.548 on 1 and 48 DF,  p-value: 0.008435  ################################################################################################################  ################################################################################################################ #Simulate errors  Z_X_error<-1 #Number of X traits with error X_error<-rep(0.01,N) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-X+rnorm(N,0,0.01)   ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0.2,0.25) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"exploring-priors-1","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Varying Effects and Multilevel Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot  use helper function blouch.reg.adapt.prep() setup dat file Stan. “Z_adaptive” number predictors, “regimes” name regime column trdata$dat. First run Multi-optima Adaptive Model Varying Effects Prior vs. posterior  Prior vs. posterior plot  Adaptation model  Priors + Posteriors  Multilevel Multi-optima Adaptive Model Varying Effects Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors. use helper function blouch.reg.adapt.prep() setup dat file Stan. “Z_adaptive” number predictors, “regimes” name regime column trdata$dat. Now run Multilevel Multi-optima Adaptive Model Varying Effects, look results, rstan::extract posterior Now run non-centered version Multilevel Multi-optima Adaptive Model Varying Effects posteriors explored, compared priors, etc. following format ","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=X))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.slope.plot ############################################################################################################ #Test Blouch prep code - Regimes + Direct Efffect model dat<-blouch.reg.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.adapt.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_ve,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.adapt.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_adapt_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.19    0.00 0.11  0.06 0.12 0.17 0.24  0.47   708    1 #> vy        0.02    0.00 0.01  0.00 0.01 0.01 0.02  0.03  1547    1 #> optima[1] 1.99    0.00 0.06  1.88 1.96 1.99 2.02  2.10  2625    1 #> optima[2] 0.84    0.01 0.15  0.45 0.77 0.86 0.94  1.05   730    1 #> beta[1,1] 0.26    0.00 0.06  0.18 0.23 0.25 0.29  0.40   992    1 #> beta[2,1] 0.12    0.00 0.13 -0.14 0.04 0.12 0.21  0.38  2207    1 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:54:47 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt.ve) #rstan::extract posterior distribution hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  plot( NULL , xlim=c(0,1) , ylim=c(0,0.3) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_multiadaptive_cov_plot(post$a[i],post$sigma2_y[i],as.numeric(data.frame(post$beta)[i,]),x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5))   #curve(calc_multiadaptive_cov(post$a[i],post$sigma2_y[i],beta,x,Z_adaptive,n_reg) , add=TRUE , lwd=4 , col=col.alpha(2,0.5)) } #multiple traits   par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1  #Vt = sigma2_y /( 2 * a) * ((1 - exp(-2 * a * ta)) .* exp(-a * tij)); //From Hansen (1997)  covariance.plot optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])   optima.post<-post$optima beta.post<-data.frame(post$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\")  mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 )  #mu.mean.11 <-lapply( mu.11 , mean ) #mu.mean.12 <-lapply( mu.12 , mean )  mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  #mu.CI.11 <- lapply( mu.11 , PI , prob=0.89 ) #mu.CI.12 <- lapply( mu.12 , PI , prob=0.89 ) mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  #df<-data.frame(Y=stan_sim_data$Y,X=stan_sim_data$direct_cov) df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)   #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.1)+ #Prior   ggplot2::geom_abline(intercept=optima[1],slope=beta[1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2],alpha=0.5,linetype=2)+   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.1 ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-5 optima.prior<-c(1.5,0.5) #Informed by linear model beta.prior<-c(0.2,0.25) #Informed by linear model sigma.prior<-c(0,1) ############################################################################################################ #Test Blouch prep code - Regimes + Direct Efffect model dat<-blouch.reg.adapt.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.adapt.mlm.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 101 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"sigma\",\"optima_bar\",\"beta_bar\",\"Rho\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>             mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl          0.23    0.01 0.15  0.07  0.13 0.19 0.29  0.63   386 1.01 #> vy          0.02    0.00 0.01  0.00  0.01 0.01 0.02  0.04   771 1.00 #> optima[1]   2.00    0.00 0.06  1.88  1.96 2.00 2.04  2.13  1327 1.00 #> optima[2]   0.77    0.01 0.23  0.15  0.70 0.83 0.91  1.04   367 1.01 #> beta[1,1]   0.28    0.00 0.08  0.18  0.23 0.26 0.31  0.48   376 1.01 #> beta[2,1]   0.16    0.01 0.16 -0.16  0.06 0.17 0.27  0.48   701 1.00 #> sigma[1]    0.95    0.01 0.44  0.37  0.62 0.87 1.19  2.01  1508 1.00 #> sigma[2]    0.32    0.01 0.32  0.03  0.10 0.21 0.44  1.25  1273 1.00 #> optima_bar  1.47    0.01 0.40  0.71  1.20 1.46 1.72  2.24  1611 1.00 #> beta_bar[1] 0.22    0.01 0.16 -0.13  0.13 0.23 0.31  0.54   787 1.00 #> Rho[1,1]    1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> Rho[1,2]    0.08    0.01 0.43 -0.73 -0.25 0.09 0.40  0.84  1723 1.00 #> Rho[2,1]    0.08    0.01 0.43 -0.73 -0.25 0.09 0.40  0.84  1723 1.00 #> Rho[2,2]    1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  2030 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:55:38 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt.mlm.ve) #rstan::extract posterior distribution fit.reg.adapt.mlm.ve.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve_nc,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 16 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"sigma\",\"optima_bar\",\"beta_bar\",\"Rho\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>             mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl          0.23    0.01 0.15  0.07  0.13 0.19 0.29  0.63   386 1.01 #> vy          0.02    0.00 0.01  0.00  0.01 0.01 0.02  0.04   771 1.00 #> optima[1]   2.00    0.00 0.06  1.88  1.96 2.00 2.04  2.13  1327 1.00 #> optima[2]   0.77    0.01 0.23  0.15  0.70 0.83 0.91  1.04   367 1.01 #> beta[1,1]   0.28    0.00 0.08  0.18  0.23 0.26 0.31  0.48   376 1.01 #> beta[2,1]   0.16    0.01 0.16 -0.16  0.06 0.17 0.27  0.48   701 1.00 #> sigma[1]    0.95    0.01 0.44  0.37  0.62 0.87 1.19  2.01  1508 1.00 #> sigma[2]    0.32    0.01 0.32  0.03  0.10 0.21 0.44  1.25  1273 1.00 #> optima_bar  1.47    0.01 0.40  0.71  1.20 1.46 1.72  2.24  1611 1.00 #> beta_bar[1] 0.22    0.01 0.16 -0.13  0.13 0.23 0.31  0.54   787 1.00 #> Rho[1,1]    1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> Rho[1,2]    0.08    0.01 0.43 -0.73 -0.25 0.09 0.40  0.84  1723 1.00 #> Rho[2,1]    0.08    0.01 0.43 -0.73 -0.25 0.09 0.40  0.84  1723 1.00 #> Rho[2,2]    1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  2030 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:55:38 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.adapt.mlm.ve) #rstan::extract posterior distribution rm(list=ls())"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"multi-optima-direct-effect-and-adaptive-models-with-varying-effects---multiple-predictors","dir":"Articles","previous_headings":"","what":"Multi-optima Direct Effect and Adaptive models with Varying Effects - Multiple predictors","title":"Varying Effects and Multilevel Models Walkthrough","text":"Two regimes 1 direct 1 adaptive trait two slopes per regime per trait    Simulate X Y data using generative model   Plot Data   Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors.","code":"######################################################################################################## set.seed(10)  N<-50 #Number of species #set.seed(1) #Set seed to get same random species each time  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy)  l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree   #Set regimes - manually - 2 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels() #Paint Regimes on Tree shifts<-c(84) #Location of nodes with regime shifts trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata) trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" #Check if manual setting code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]]) print(edge.regimes) #>  [1] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [20] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [39] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [58] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [77] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [96] OU1 OU1 OU1 #> Levels: OU1 OU2  reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))  reg.colors <- ggsci::pal_aaas(\"default\", alpha = 0.7)(2) print(reg.colors) #> [1] \"#3B4992B2\" \"#EE0000B2\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1, cex = 0.2) #Phylogeny info n<-length(trdata$phy$tip.label)  regimes_internal <-trdata$phy$node.label regimes_tip <- trdata$dat$regimes regimes <- concat.factor(regimes_tip, regimes_internal) anc_maps<-\"regimes\" lineages <- lapply(1:n, function(e) lineage.constructor(phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch ################################################################################################################ hl<-0.1 #0.1, 0.25, 0.75 - testing options a<-log(2)/hl vy<-0.01 #0.25,0.5 - testing options sigma2_y<-vy*(2*(log(2)/hl));  vX0<-0 vY0 <- 0 sigma2_x<-matrix(10,1,1) #Variance of BM Process  Xa<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10 Xd<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with scaling 10  names(Xa)<-phy$tip.label names(Xd)<-phy$tip.label phytools::phenogram(phy,Xd,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... phytools::phenogram(phy,Xa,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels... Xs<-cbind(Xd,Xa)  Z_adaptive<-1 Z_direct<-1  optima_matrix<-weight.matrix(phy, a, lineages) #Slouch approach pred_X<-calc_mixed_dmX(phy,a,Xs,Z_direct,Z_adaptive) optima<-c(2,1.5) beta<-data.frame(matrix(c(0.25,0.15,0.35,0.1),ncol=2,nrow=2)) #Direct efect - column 1, Adaptive, column 2, slopes for regimes on rows  mu<-matrix(NA,N,1) for(i in 1:N){   mu[i] = optima_matrix[i,]%*%optima+pred_X[i,]%*%t(beta[reg_tips[i],])   }  n_reg<-length(unique(regimes)) V<-calc_adaptive_V(phy,a, sigma2_y, beta[,2],  sigma2_x, Z_adaptive) Y<-MASS::mvrnorm(n=1,mu,V)   ###############################################################################################################  summary(lm(Y~Xs)) #>  #> Call: #> lm(formula = Y ~ Xs) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.72841 -0.19574 -0.01492  0.22366  0.85254  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.80422    0.07225   24.97   <2e-16 *** #> XsXd         0.26776    0.01919   13.95   <2e-16 *** #> XsXa         0.30498    0.01524   20.01   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.313 on 47 degrees of freedom #> Multiple R-squared:  0.9514, Adjusted R-squared:  0.9494  #> F-statistic: 460.4 on 2 and 47 DF,  p-value: < 2.2e-16  ################################################################################################################ ############################################################################################################### #Simulate errors - original Hansen setup Z_X_error<-2 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) names(X_error)<-c(\"Xd_error\",\"Xa_error\") Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) X_with_error<-Xs+rnorm(N,0,0.01) X_with_error<-data.frame(X_with_error) names(X_with_error)<-c(\"Xd\",\"Xa\") ############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) #names(trdata$dat)[6:7]<-c(\"Xd_error\",\"Xa_error\") #Plot of data df<-data.frame(Y=trdata$dat$Y_with_error,Xd=trdata$dat$Xd,Xa=trdata$dat$Xa,Regimes=trdata$dat$regimes)   #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=Xd,color=Regimes))+      ggplot2::geom_abline(intercept=optima[1],slope=beta[1,1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2,1],alpha=0.5,linetype=2)+         ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct effect trait\")+   ggsci::scale_color_npg()  slope.plot.1 #slope.prior.plot<-ggplot(data=reg.trdata$dat,aes(y=Sim1,x=X))+ slope.plot.2<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=Xa,color=Regimes))+      ggplot2::geom_abline(intercept=optima[1],slope=beta[1,2],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2,2],alpha=0.5,linetype=2)+      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.2 ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(1.5,0.25) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model"},{"path":"https://mark-grabowski.github.io/blouch/articles/Varying_Effects_Models-Examples.html","id":"exploring-priors-2","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Varying Effects and Multilevel Models Walkthrough","text":"point one want explore priors appropriate - prior distributions look consistent know system? See Grabowski (press) setting priors. Half-life Prior plot  Vy Prior Plot  Prior shared branch lengths correspond covariance  Slope intercept Prior Plot   use helper function blouch.reg.adapt.prep() setup dat file Stan. “Z_adaptive” number predictors, “regimes” name regime column trdata$dat. First run Multi-optima Direct Effect Adaptive Model Varying Effects Let’s look results Rember, true values optima<-c(2,1) beta<-data.frame(matrix(c(0.25,0.15,0.35,0.1),ncol=2,nrow=2)) Direct effect - column 1, Adaptive, column 2, rows - slopes regimes Prior vs. posterior  Prior vs. posterior plot  Adaptation model  Now lets plot prior vs. posterior plots   Now run Multilevel Multi-optima Direct Effect Adaptation Model Varying Effects, look results, rstan::extract posterior Next set priors estimated parameters - model includes half-life, Vy, optima, beta. latter two parameters use results linear model inform priors. use helper function blouch.reg.adapt.prep() setup dat file Stan. “Z_adaptive” number predictors, “regimes” name regime column trdata$dat. Now run non-centered version Multilevel Multi-optima Direct Effect Adaptive Model Varying Effects posteriors explored, compared priors, etc. following methods .","code":"hl.sims<-data.frame(rlnorm(n=1000,meanlog=hl.prior[1],sdlog=hl.prior[2])) names(hl.sims)<-\"prior.hl.sims\"  hl.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))  hl.prior.plot vy.sims<-rexp(n=1000,rate=vy.prior) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"  vy.prior.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Prior\"))   vy.prior.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  plot( NULL , xlim=c(0,1) , ylim=c(0,0.4) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i],x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(1,0.15)) } par(mar=c(3,3,0.25,0.25)) optima.sims<-rnorm(100,optima.prior[1],optima.prior[2]) beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=Xd))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct Effect X\")+   ggsci::scale_color_npg()  prior.slope.plot prior.slope.plot<-ggplot2::ggplot()+    ggplot2:: geom_point(data=df,ggplot2::aes(y=Y,x=Xa))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive X\")+   ggsci::scale_color_npg()  prior.slope.plot ############################################################################################################ dat<-blouch.reg.direct.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"Xd\",\"Xa\"),c(\"Xd_error\",\"Xa_error\"),Z_direct=1,Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior) fit.reg.direct.adapt.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt_ve,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' print(fit.reg.direct.adapt.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_direct_adapt_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.12       0 0.07  0.05 0.08 0.10 0.14  0.32   338 1.01 #> vy        0.01       0 0.01  0.00 0.00 0.01 0.02  0.05  2698 1.00 #> optima[1] 1.70       0 0.12  1.45 1.62 1.70 1.78  1.94  3302 1.00 #> optima[2] 1.46       0 0.20  1.05 1.33 1.47 1.60  1.87  3154 1.00 #> beta[1,1] 0.22       0 0.03  0.17 0.20 0.22 0.24  0.27  4365 1.00 #> beta[1,2] 0.38       0 0.05  0.32 0.35 0.37 0.39  0.48   329 1.01 #> beta[2,1] 0.16       0 0.05  0.06 0.13 0.16 0.19  0.26  3150 1.00 #> beta[2,2] 0.10       0 0.07 -0.05 0.05 0.10 0.15  0.25  4100 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:57:58 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt.ve) hl.post<-data.frame(post$hl) names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.post<-data.frame(post$vy) names(vy.post)<-\"post.vy.sims\"  vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); beta.sims<-rnorm(n=100,beta.prior[1],beta.prior[2])  plot( NULL , xlim=c(0,1) , ylim=c(0,0.3) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i],x) , add=TRUE , lwd=4 ,   #curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i,],x) , add=TRUE , lwd=4 ,         col=rethinking::col.alpha(1,0.15)) }  for (i in 1:30){   curve(calc_multiadaptive_cov_plot(post$a[i],post$sigma2_y[i],as.numeric(data.frame(post$beta)[i,,2]),x) , add=TRUE , lwd=4 , col=rethinking::col.alpha(2,0.5))   #curve(calc_multiadaptive_cov(post$a[i],post$sigma2_y[i],beta,x,Z_adaptive,n_reg) , add=TRUE , lwd=4 , col=col.alpha(2,0.5)) } #multiple traits   par(mar=c(3,3,0.25,0.25)) covariance.plot <- recordPlot() dev.off() #> null device  #>           1  #Vt = sigma2_y /( 2 * a) * ((1 - exp(-2 * a * ta)) .* exp(-a * tij)); //From Hansen (1997)  covariance.plot optima.post<-post$optima beta.post.Xd<-data.frame(post$beta[,,1]) beta.post.Xa<-data.frame(post$beta[,,2]) names(beta.post.Xd)<-c(\"post.beta.1\",\"post.beta.2\") names(beta.post.Xa)<-c(\"post.beta.1\",\"post.beta.2\")  mu.link.Xd1<-function(x.seq){optima.post[,1]+x.seq*beta.post.Xd[,1]} mu.link.Xd2<-function(x.seq){optima.post[,2]+x.seq*beta.post.Xd[,2]}  x.seq <- seq(from=min(dat$X_obs[,1]), to=max(dat$X_obs[,1]) , length.out=100) mu.11 <- sapply(x.seq , mu.link.Xd1 ) mu.12 <- sapply(x.seq , mu.link.Xd2 )  mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.7)(length(beta))  slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xd,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_abline(intercept=optima[1],slope=beta[1,1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2,1],alpha=0.5,linetype=2)+      ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Direct effect trait\")+   ggsci::scale_color_npg()  slope.plot.1 mu.link.Xa1<-function(x.seq){optima.post[,1]+x.seq*beta.post.Xa[,1]} mu.link.Xa2<-function(x.seq){optima.post[,2]+x.seq*beta.post.Xa[,2]}  x.seq <- seq(from=min(dat$X_obs[,2]), to=max(dat$X_obs[,2]) , length.out=100) mu.11 <- sapply(x.seq , mu.link.Xa1 ) mu.12 <- sapply(x.seq , mu.link.Xa2 )  mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12)  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.7)(length(beta)) slope.plot.2<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X.Xa,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.15)+ #Prior   ggplot2::geom_abline(intercept=optima[1],slope=beta[1,2],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2,2],alpha=0.5,linetype=2)+      ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.25)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.2 ############################################################################################################ #Set Priors hl.prior<-c(log(0.25),0.75) vy.prior<-20 optima.prior<-c(1.5,0.25) #Informed by linear model beta.prior<-c(0,0.25) #Informed by linear model sigma.prior<-c(0,1) #Informed by linear model ############################################################################################################ dat<-blouch.reg.direct.adapt.mlm.prep(trdata,\"Y_with_error\",\"Y_error\",c(\"Xd\",\"Xa\"),c(\"Xd_error\",\"Xa_error\"),Z_direct=1,Z_adaptive=1,\"regimes\",hl.prior,vy.prior,optima.prior,beta.prior,sigma.prior) fit.reg.direct.adapt.mlm.ve<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt_mlm_ve,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 374 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(fit.reg.direct.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"sigma\",\"Rho\")) #> Inference for Stan model: blouchOU_reg_direct_adapt_mlm_ve. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>           mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl        0.13    0.01 0.11  0.05  0.08 0.10 0.14  0.45   205 1.01 #> vy        0.01    0.00 0.01  0.00  0.00 0.01 0.02  0.05  1946 1.00 #> optima[1] 1.72    0.00 0.14  1.45  1.63 1.73 1.81  2.00  1068 1.00 #> optima[2] 1.54    0.01 0.27  0.94  1.38 1.56 1.71  2.02  1155 1.00 #> beta[1,1] 0.22    0.00 0.03  0.16  0.20 0.22 0.24  0.27  1855 1.00 #> beta[1,2] 0.38    0.01 0.07  0.32  0.35 0.37 0.39  0.59   194 1.01 #> beta[2,1] 0.18    0.00 0.05  0.07  0.15 0.19 0.22  0.27  1518 1.00 #> beta[2,2] 0.12    0.00 0.08 -0.04  0.07 0.12 0.17  0.27   958 1.00 #> sigma[1]  0.42    0.02 0.38  0.03  0.15 0.31 0.57  1.41   617 1.00 #> sigma[2]  0.25    0.01 0.29  0.02  0.06 0.15 0.34  1.04   795 1.00 #> sigma[3]  0.47    0.01 0.35  0.08  0.21 0.36 0.62  1.42  1532 1.00 #> Rho[1,1]  1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> Rho[1,2]  0.01    0.01 0.31 -0.57 -0.21 0.01 0.24  0.60  1760 1.00 #> Rho[1,3]  0.02    0.01 0.32 -0.56 -0.21 0.02 0.24  0.62  2206 1.00 #> Rho[2,1]  0.01    0.01 0.31 -0.57 -0.21 0.01 0.24  0.60  1760 1.00 #> Rho[2,2]  1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  1699 1.00 #> Rho[2,3]  0.02    0.01 0.31 -0.56 -0.20 0.02 0.24  0.63   854 1.00 #> Rho[3,1]  0.02    0.01 0.32 -0.56 -0.21 0.02 0.24  0.62  2206 1.00 #> Rho[3,2]  0.02    0.01 0.31 -0.56 -0.20 0.02 0.24  0.63   854 1.00 #> Rho[3,3]  1.00    0.00 0.00  1.00  1.00 1.00 1.00  1.00  1316 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 20:58:53 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt.mlm.ve) fit.reg.direct.adapt.mlm.ve.nc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_direct_adapt_mlm_ve_nc,data = dat,chains = 2,cores=2,iter=2000) #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Found more than one class \"stanfit\" in cache; using the first, from namespace 'rstan' #> Also defined by 'rethinking' #> Warning: There were 111 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.direct.adapt.mlm.ve.nc,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"sigma\",\"L_Rho\")) #> Inference for Stan model: blouchOU_reg_direct_adapt_mlm_ve_nc. #> 2 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=2000. #>  #>            mean se_mean   sd  2.5%   25%  50%  75% 97.5% n_eff Rhat #> hl         0.13    0.00 0.12  0.05  0.07 0.10 0.15  0.43   833 1.00 #> vy         0.01    0.00 0.01  0.00  0.00 0.01 0.02  0.05  2368 1.00 #> optima[1]  1.71    0.00 0.14  1.42  1.63 1.72 1.80  1.98  1572 1.00 #> optima[2]  1.57    0.01 0.25  1.05  1.43 1.59 1.73  2.04  1666 1.00 #> beta[1,1]  0.22    0.00 0.03  0.17  0.20 0.22 0.24  0.27  1434 1.00 #> beta[1,2]  0.38    0.00 0.08  0.32  0.35 0.37 0.39  0.57   752 1.00 #> beta[2,1]  0.19    0.00 0.05  0.08  0.16 0.19 0.22  0.28  1471 1.00 #> beta[2,2]  0.12    0.00 0.08 -0.03  0.07 0.12 0.17  0.27  1334 1.00 #> sigma[1]   0.39    0.01 0.37  0.02  0.12 0.28 0.56  1.40   862 1.00 #> sigma[2]   0.18    0.01 0.24  0.00  0.04 0.10 0.22  0.87   658 1.01 #> sigma[3]   0.37    0.01 0.27  0.07  0.17 0.28 0.47  1.10   457 1.00 #> L_Rho[1,1] 1.00     NaN 0.00  1.00  1.00 1.00 1.00  1.00   NaN  NaN #> L_Rho[1,2] 0.00     NaN 0.00  0.00  0.00 0.00 0.00  0.00   NaN  NaN #> L_Rho[1,3] 0.00     NaN 0.00  0.00  0.00 0.00 0.00  0.00   NaN  NaN #> L_Rho[2,1] 0.03    0.01 0.43 -0.77 -0.32 0.02 0.36  0.79  1947 1.00 #> L_Rho[2,2] 0.89    0.00 0.13  0.54  0.85 0.94 0.98  1.00   788 1.00 #> L_Rho[2,3] 0.00     NaN 0.00  0.00  0.00 0.00 0.00  0.00   NaN  NaN #> L_Rho[3,1] 0.07    0.01 0.40 -0.71 -0.23 0.08 0.39  0.79  1599 1.00 #> L_Rho[3,2] 0.07    0.01 0.42 -0.75 -0.25 0.09 0.42  0.82  1423 1.00 #> L_Rho[3,3] 0.79    0.01 0.17  0.37  0.69 0.83 0.92  0.99   815 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Fri Jul 12 21:01:27 2024. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). post<-rstan::extract(fit.reg.direct.adapt.mlm.ve.nc)"},{"path":"https://mark-grabowski.github.io/blouch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Grabowski. Author, maintainer.","code":""},{"path":"https://mark-grabowski.github.io/blouch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grabowski M (2024). blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses. R package version 1.0.0, https://mark-grabowski.github.io/blouch/.","code":"@Manual{,   title = {blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses},   author = {Mark Grabowski},   year = {2024},   note = {R package version 1.0.0},   url = {https://mark-grabowski.github.io/blouch/}, }"},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"blouch","dir":"","previous_headings":"","what":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"Blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses fits allometric adaptive models continuous trait evolution Bayesian framework based fixed continuous predictors incorporates measurement error. addition assigning biologically meaningful priors compared non-Bayesian approaches, Blouch includes new implementations Ornstein-Ulenbeck models including allowing varying effects (varying intercepts varying slopes), multilevel modeling, non-centered models. front-end component Blouch written R (R Core Team, 2023), nuts bolts written language Stan (Carpenter et al., 2017), allows estimation Bayesian models using Markov chain Monte Carlo (MCMC) methods based Hamilton Monte Carlo sampler.","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"just getting started Blouch recommend starting Empirical Simulation Example articles available package website. articles abbreviated versions example showing various models implemented Blouch - steps preliminary analysis . Blouch based article: Grabowski, M (press). Blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"instalation-instructions","dir":"","previous_headings":"","what":"Instalation Instructions","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"install R Stan functions associated Blouch github, first install package devtools: install Blouch","code":"install.packages(\"devtools\", repos = \"https://cran.ma.imperial.ac.uk/\") library(devtools) devtools::install_github(\"mark-grabowski/blouch\") library(blouch)"},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"complete walkthrough package visit package website: .","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. Stan: Probabilistic Programming Language. Journal Statistical Software 76:1–32. R Core Team. 2023. R: language environment statistical computing.","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"adapt.prior.plot.code- Create Prior Plot for Adaptive Model — adapt.prior.plot.code","title":"adapt.prior.plot.code- Create Prior Plot for Adaptive Model — adapt.prior.plot.code","text":"adapt.prior.plot.code- Create Prior Plot Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adapt.prior.plot.code- Create Prior Plot for Adaptive Model — adapt.prior.plot.code","text":"","code":"adapt.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adapt.prior.plot.code- Create Prior Plot for Adaptive Model — adapt.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adapt.prior.plot.code- Create Prior Plot for Adaptive Model — adapt.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Adaptive Model — adapt.prior.post.plot.code","title":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Adaptive Model — adapt.prior.post.plot.code","text":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Adaptive Model — adapt.prior.post.plot.code","text":"","code":"adapt.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Adaptive Model — adapt.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/adapt.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Adaptive Model — adapt.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/antler.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Antler Size Dataset from Tsuboi et al. (2024), Evol. Biol. — antler.data","title":"Antler Size Dataset from Tsuboi et al. (2024), Evol. Biol. — antler.data","text":"Antler Size Dataset Tsuboi et al. (2024), Evol. Biol.","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/antler.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antler Size Dataset from Tsuboi et al. (2024), Evol. Biol. — antler.data","text":"","code":"antler.data"},{"path":"https://mark-grabowski.github.io/blouch/reference/antler.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Antler Size Dataset from Tsuboi et al. (2024), Evol. Biol. — antler.data","text":"csv format dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/antler.data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Antler Size Dataset from Tsuboi et al. (2024), Evol. Biol. — antler.data","text":"https://doi.org/10.5061/dryad.kh18932dt","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses — blouch-package","title":"blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses — blouch-package","text":"Blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses fits adaptive models continuous trait evolution Bayesian framework based categorical continuous predictors, incorporates measurement error. Blouch includes new implementations Ornstein-Ulenbeck models including allowing varying effects (varying intercepts varying slopes), multilevel modeling, non-centered models. DESCRIPTION PACKAGE","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses — blouch-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.32.6. https://mc-stan.org","code":""},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses — blouch-package","text":"Maintainer: Mark Grabowski mark.walter.grabowski@gmail.com (ORCID)","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.adapt.prep - Setup dat file to run adaptive model — blouch.adapt.prep","title":"blouch.adapt.prep - Setup dat file to run adaptive model — blouch.adapt.prep","text":"blouch.adapt.prep - Setup dat file run adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.adapt.prep - Setup dat file to run adaptive model — blouch.adapt.prep","text":"","code":"blouch.adapt.prep(   trdata,   Y,   Y_error,   X,   X_error,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.adapt.prep - Setup dat file to run adaptive model — blouch.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.adapt.prep - Setup dat file to run adaptive model — blouch.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.direct.adapt.prep - Setup dat file to run direct effect and adpative model — blouch.direct.adapt.prep","title":"blouch.direct.adapt.prep - Setup dat file to run direct effect and adpative model — blouch.direct.adapt.prep","text":"blouch.direct.adapt.prep - Setup dat file run direct effect adpative model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.direct.adapt.prep - Setup dat file to run direct effect and adpative model — blouch.direct.adapt.prep","text":"","code":"blouch.direct.adapt.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   Z_adaptive,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.direct.adapt.prep - Setup dat file to run direct effect and adpative model — blouch.direct.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits Z_adaptive Vector containing number adaptive predictor traits hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.direct.adapt.prep - Setup dat file to run direct effect and adpative model — blouch.direct.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.direct.prep - Setup dat file to run direct effect model — blouch.direct.prep","title":"blouch.direct.prep - Setup dat file to run direct effect model — blouch.direct.prep","text":"blouch.direct.prep - Setup dat file run direct effect model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.direct.prep - Setup dat file to run direct effect model — blouch.direct.prep","text":"","code":"blouch.direct.prep(   trdata,   Y,   Y_error,   X,   X_error,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.direct.prep - Setup dat file to run direct effect model — blouch.direct.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.direct.prep - Setup dat file to run direct effect model — blouch.direct.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.mlm.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.adapt.mlm.prep - Setup dat file to run Multilevel Multi-Optima adaptive model — blouch.reg.adapt.mlm.prep","title":"blouch.reg.adapt.mlm.prep - Setup dat file to run Multilevel Multi-Optima adaptive model — blouch.reg.adapt.mlm.prep","text":"blouch.reg.adapt.mlm.prep - Setup dat file run Multilevel Multi-Optima adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.mlm.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.adapt.mlm.prep - Setup dat file to run Multilevel Multi-Optima adaptive model — blouch.reg.adapt.mlm.prep","text":"","code":"blouch.reg.adapt.mlm.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_adaptive,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior,   sigma.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.mlm.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.adapt.mlm.prep - Setup dat file to run Multilevel Multi-Optima adaptive model — blouch.reg.adapt.mlm.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior sigma.prior Numeric prior scale sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.mlm.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.adapt.mlm.prep - Setup dat file to run Multilevel Multi-Optima adaptive model — blouch.reg.adapt.mlm.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.adapt.prep - Setup dat file to run multi-optima adaptive model — blouch.reg.adapt.prep","title":"blouch.reg.adapt.prep - Setup dat file to run multi-optima adaptive model — blouch.reg.adapt.prep","text":"blouch.reg.adapt.prep - Setup dat file run multi-optima adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.adapt.prep - Setup dat file to run multi-optima adaptive model — blouch.reg.adapt.prep","text":"","code":"blouch.reg.adapt.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_adaptive,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.adapt.prep - Setup dat file to run multi-optima adaptive model — blouch.reg.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.adapt.prep - Setup dat file to run multi-optima adaptive model — blouch.reg.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.mlm.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.adapt.mlm.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.mlm.prep","title":"blouch.reg.direct.adapt.mlm.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.mlm.prep","text":"blouch.reg.direct.adapt.mlm.prep - Setup dat file run multi-optima direct effect adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.mlm.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.adapt.mlm.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.mlm.prep","text":"","code":"blouch.reg.direct.adapt.mlm.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   Z_adaptive,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior,   sigma.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.mlm.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.adapt.mlm.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.mlm.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior sigma.prior Numeric prior scale sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.mlm.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.adapt.mlm.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.mlm.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.adapt.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","title":"blouch.reg.direct.adapt.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"blouch.reg.direct.adapt.prep - Setup dat file run multi-optima direct effect adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.adapt.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"","code":"blouch.reg.direct.adapt.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   Z_adaptive,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.adapt.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.adapt.prep - Setup dat file to run multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.mlm.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.mlm.prep - Setup dat file to run Multilevel Multi-Optima direct effect model — blouch.reg.direct.mlm.prep","title":"blouch.reg.direct.mlm.prep - Setup dat file to run Multilevel Multi-Optima direct effect model — blouch.reg.direct.mlm.prep","text":"blouch.reg.direct.mlm.prep - Setup dat file run Multilevel Multi-Optima direct effect model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.mlm.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.mlm.prep - Setup dat file to run Multilevel Multi-Optima direct effect model — blouch.reg.direct.mlm.prep","text":"","code":"blouch.reg.direct.mlm.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior,   sigma.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.mlm.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.mlm.prep - Setup dat file to run Multilevel Multi-Optima direct effect model — blouch.reg.direct.mlm.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior sigma.prior Numeric prior scale sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.mlm.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.mlm.prep - Setup dat file to run Multilevel Multi-Optima direct effect model — blouch.reg.direct.mlm.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.prep - Setup dat file to run multi-optima direct effect model — blouch.reg.direct.prep","title":"blouch.reg.direct.prep - Setup dat file to run multi-optima direct effect model — blouch.reg.direct.prep","text":"blouch.reg.direct.prep - Setup dat file run multi-optima direct effect model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.prep - Setup dat file to run multi-optima direct effect model — blouch.reg.direct.prep","text":"","code":"blouch.reg.direct.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   reg.column,   hl.prior,   vy.prior,   optima.prior,   beta.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.prep - Setup dat file to run multi-optima direct effect model — blouch.reg.direct.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior beta.prior Vector containing mu standard error beta prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.prep - Setup dat file to run multi-optima direct effect model — blouch.reg.direct.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.mlm.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.mlm.prep - Setup dat file to run multilevel multi-optima model — blouch.reg.mlm.prep","title":"blouch.reg.mlm.prep - Setup dat file to run multilevel multi-optima model — blouch.reg.mlm.prep","text":"blouch.reg.mlm.prep - Setup dat file run multilevel multi-optima model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.mlm.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.mlm.prep - Setup dat file to run multilevel multi-optima model — blouch.reg.mlm.prep","text":"","code":"blouch.reg.mlm.prep(   trdata,   Y,   Y_error,   reg.column,   hl.prior,   vy.prior,   optima.prior,   sigma.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.mlm.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.mlm.prep - Setup dat file to run multilevel multi-optima model — blouch.reg.mlm.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior sigma.prior Numeric prior scale sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.mlm.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.mlm.prep - Setup dat file to run multilevel multi-optima model — blouch.reg.mlm.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.prep - Setup dat file to run multi-optima model — blouch.reg.prep","title":"blouch.reg.prep - Setup dat file to run multi-optima model — blouch.reg.prep","text":"blouch.reg.prep - Setup dat file run multi-optima model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.prep - Setup dat file to run multi-optima model — blouch.reg.prep","text":"","code":"blouch.reg.prep(   trdata,   Y,   Y_error,   reg.column,   hl.prior,   vy.prior,   optima.prior )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.prep - Setup dat file to run multi-optima model — blouch.reg.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable reg.column Vector containing name regime column treedata$dat hl.prior Vector containing log mu standard error half-life prior vy.prior Numeric prior scale Vy optima.prior Vector containing mu standard error optima prior","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.prep - Setup dat file to run multi-optima model — blouch.reg.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"calc_adaptive_V - Calculate adaptive variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"","code":"calc_adaptive_V(phy, a, sigma2_y, beta, sigma2_x, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"phy phylogney NEXUS format Rate parameter OU model sigma2_y Variance Y beta slope sigma2_x Brownian-motion parameter X Z_adaptive Number adaptive predictors","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"Variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_cov_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_adaptive_cov_plot - Calculate covariance matrix for adaptive covariance plot — calc_adaptive_cov_plot","title":"calc_adaptive_cov_plot - Calculate covariance matrix for adaptive covariance plot — calc_adaptive_cov_plot","text":"calc_adaptive_cov_plot - Calculate covariance matrix adaptive covariance plot","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_cov_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_adaptive_cov_plot - Calculate covariance matrix for adaptive covariance plot — calc_adaptive_cov_plot","text":"","code":"calc_adaptive_cov_plot(a, sigma2_y, beta, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_cov_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_adaptive_cov_plot - Calculate covariance matrix for adaptive covariance plot — calc_adaptive_cov_plot","text":"Rate parameter OU model sigma2_y Variance Y beta Slope parameter x X axis value","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_cov_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_adaptive_cov_plot - Calculate covariance matrix for adaptive covariance plot — calc_adaptive_cov_plot","text":"Variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_adaptive_dmX - Calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","title":"calc_adaptive_dmX - Calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"calc_adaptive_dmX - Calculate adaptive predictor matrix Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_adaptive_dmX - Calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"","code":"calc_adaptive_dmX(phy, a, X)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_adaptive_dmX - Calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"phy Phylogeny NEXUS format Rate parameter OU model X Predictor","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_adaptive_dmX - Calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"Adaptive predictor matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_direct_V - Calculate direct effect model V/CV matrix — calc_direct_V","title":"calc_direct_V - Calculate direct effect model V/CV matrix — calc_direct_V","text":"calc_direct_V - Calculate direct effect model V/CV matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_direct_V - Calculate direct effect model V/CV matrix — calc_direct_V","text":"","code":"calc_direct_V(phy, sigma2_y, a)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_direct_V - Calculate direct effect model V/CV matrix — calc_direct_V","text":"phy Phylogeny NEXUS format sigma2_y Variance Y Rate parameter OU model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_direct_V - Calculate direct effect model V/CV matrix — calc_direct_V","text":"Variance/Covariance marix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_mixed_dmX - Calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","title":"calc_mixed_dmX - Calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"calc_mixed_dmX - Calculate mixed direct effect adaptive predictor matrix Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_mixed_dmX - Calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"","code":"calc_mixed_dmX(phy, a, X, Z_direct, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_mixed_dmX - Calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"phy Phylogeny NEXUS format Rate parameter OU model X Predictor Z_direct Number direct effect predictor traits Z_adaptive Number adaptive predictor traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_mixed_dmX - Calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"Predictor matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"calc_multiadaptive_cov_plot - Calcualte covariance matrix mult-adaptive covariance plot","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"","code":"calc_multiadaptive_cov_plot(a, sigma2_y, beta, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"Rate parameter OU model sigma2_y Variance Y beta Slope parameter x X axis value","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"Variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/cervidae.tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Cervidae phylogent from Tsuboi et al. (2024), Evol. Biol. — cervidae.tree","title":"Cervidae phylogent from Tsuboi et al. (2024), Evol. Biol. — cervidae.tree","text":"Cervidae phylogent Tsuboi et al. (2024), Evol. Biol.","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/cervidae.tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cervidae phylogent from Tsuboi et al. (2024), Evol. Biol. — cervidae.tree","text":"","code":"cervidae.tree"},{"path":"https://mark-grabowski.github.io/blouch/reference/cervidae.tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cervidae phylogent from Tsuboi et al. (2024), Evol. Biol. — cervidae.tree","text":"NEXUS format file","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/cervidae.tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cervidae phylogent from Tsuboi et al. (2024), Evol. Biol. — cervidae.tree","text":"https://doi.org/10.5061/dryad.kh18932dt","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":null,"dir":"Reference","previous_headings":"","what":"concat.factor - For internal Blouch use Thanks to user ","title":"concat.factor - For internal Blouch use Thanks to user ","text":"concat.factor - internal Blouch use Thanks user \"snaut\" stackoverflow, http://stackoverflow.com/users/1999873/snaut","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"concat.factor - For internal Blouch use Thanks to user ","text":"","code":"concat.factor(...)"},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"concat.factor - For internal Blouch use Thanks to user ","text":"... vector factors","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"concat.factor - For internal Blouch use Thanks to user ","text":"factor","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.adapt.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot for Adaptive Model — covariance.prior.adapt.plot.code","title":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot for Adaptive Model — covariance.prior.adapt.plot.code","text":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.adapt.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot for Adaptive Model — covariance.prior.adapt.plot.code","text":"","code":"covariance.prior.adapt.plot.code(hl.prior, vy.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.adapt.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot for Adaptive Model — covariance.prior.adapt.plot.code","text":"hl.prior Prior mean scale parameter Half-life vy.prior Prior scale parameter Vy beta.prior Prior mean scale parameter beta/slope","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.adapt.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"covariance.prior.adapt.plot.code- Create Prior Covariance Plot for Adaptive Model — covariance.prior.adapt.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.direct.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"covariance.prior.direct.plot.code- Create Prior Covariance Plot for Direct Effect Model — covariance.prior.direct.plot.code","title":"covariance.prior.direct.plot.code- Create Prior Covariance Plot for Direct Effect Model — covariance.prior.direct.plot.code","text":"covariance.prior.direct.plot.code- Create Prior Covariance Plot Direct Effect Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.direct.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"covariance.prior.direct.plot.code- Create Prior Covariance Plot for Direct Effect Model — covariance.prior.direct.plot.code","text":"","code":"covariance.prior.direct.plot.code(hl.prior, vy.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.direct.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"covariance.prior.direct.plot.code- Create Prior Covariance Plot for Direct Effect Model — covariance.prior.direct.plot.code","text":"hl.prior Prior mean scale parameter Half-life vy.prior Prior scale parameter Vy","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.direct.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"covariance.prior.direct.plot.code- Create Prior Covariance Plot for Direct Effect Model — covariance.prior.direct.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.adapt.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot for Adaptive Model — covariance.prior.post.adapt.plot.code","title":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot for Adaptive Model — covariance.prior.post.adapt.plot.code","text":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.adapt.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot for Adaptive Model — covariance.prior.post.adapt.plot.code","text":"","code":"covariance.prior.post.adapt.plot.code(hl.prior, vy.prior, beta.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.adapt.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot for Adaptive Model — covariance.prior.post.adapt.plot.code","text":"hl.prior Prior mean scale parameter Half-life vy.prior Prior scale parameter Vy beta.prior Prior mean scale parameter beta/slope post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.adapt.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"covariance.prior.post.adapt.plot.code- Create Prior vs. Posterior Covariance Plot for Adaptive Model — covariance.prior.post.adapt.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.direct.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot for Direct Effect Model — covariance.prior.post.direct.plot.code","title":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot for Direct Effect Model — covariance.prior.post.direct.plot.code","text":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot Direct Effect Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.direct.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot for Direct Effect Model — covariance.prior.post.direct.plot.code","text":"","code":"covariance.prior.post.direct.plot.code(hl.prior, vy.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.direct.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot for Direct Effect Model — covariance.prior.post.direct.plot.code","text":"hl.prior Prior mean scale parameter Half-life vy.prior Prior scale parameter Vy post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/covariance.prior.post.direct.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"covariance.prior.post.direct.plot.code- Create Prior vs. Posterior Covariance Plot for Direct Effect Model — covariance.prior.post.direct.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"direct.adapt.prior.plot.code- Create Prior Plot for Direct Effect + Adaptive Model — direct.adapt.prior.plot.code","title":"direct.adapt.prior.plot.code- Create Prior Plot for Direct Effect + Adaptive Model — direct.adapt.prior.plot.code","text":"direct.adapt.prior.plot.code- Create Prior Plot Direct Effect + Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"direct.adapt.prior.plot.code- Create Prior Plot for Direct Effect + Adaptive Model — direct.adapt.prior.plot.code","text":"","code":"direct.adapt.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"direct.adapt.prior.plot.code- Create Prior Plot for Direct Effect + Adaptive Model — direct.adapt.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"direct.adapt.prior.plot.code- Create Prior Plot for Direct Effect + Adaptive Model — direct.adapt.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Direct Effect + Adaptive Model - Simulated Data — direct.adapt.prior.post.plot.code","title":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Direct Effect + Adaptive Model - Simulated Data — direct.adapt.prior.post.plot.code","text":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot Direct Effect + Adaptive Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Direct Effect + Adaptive Model - Simulated Data — direct.adapt.prior.post.plot.code","text":"","code":"direct.adapt.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Direct Effect + Adaptive Model - Simulated Data — direct.adapt.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.adapt.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Direct Effect + Adaptive Model - Simulated Data — direct.adapt.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"direct.prior.plot.code- Create Prior Plot for Direct Effect Model — direct.prior.plot.code","title":"direct.prior.plot.code- Create Prior Plot for Direct Effect Model — direct.prior.plot.code","text":"direct.prior.plot.code- Create Prior Plot Direct Effect Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"direct.prior.plot.code- Create Prior Plot for Direct Effect Model — direct.prior.plot.code","text":"","code":"direct.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"direct.prior.plot.code- Create Prior Plot for Direct Effect Model — direct.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"direct.prior.plot.code- Create Prior Plot for Direct Effect Model — direct.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"direct.prior.plot.code- Create Prior vs. Posterior Plot for Direct Effect Model — direct.prior.post.plot.code","title":"direct.prior.plot.code- Create Prior vs. Posterior Plot for Direct Effect Model — direct.prior.post.plot.code","text":"direct.prior.plot.code- Create Prior vs. Posterior Plot Direct Effect Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"direct.prior.plot.code- Create Prior vs. Posterior Plot for Direct Effect Model — direct.prior.post.plot.code","text":"","code":"direct.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"direct.prior.plot.code- Create Prior vs. Posterior Plot for Direct Effect Model — direct.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/direct.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"direct.prior.plot.code- Create Prior vs. Posterior Plot for Direct Effect Model — direct.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"hl.prior.plot.code- Create Plot for Half-life Prior Distribution — hl.prior.plot.code","title":"hl.prior.plot.code- Create Plot for Half-life Prior Distribution — hl.prior.plot.code","text":"hl.prior.plot.code- Create Plot Half-life Prior Distribution","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hl.prior.plot.code- Create Plot for Half-life Prior Distribution — hl.prior.plot.code","text":"","code":"hl.prior.plot.code(hl.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hl.prior.plot.code- Create Plot for Half-life Prior Distribution — hl.prior.plot.code","text":"hl.prior Prior log mean log sd half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hl.prior.plot.code- Create Plot for Half-life Prior Distribution — hl.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.emp.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Half-life Prior Distribution for Empirical Dataset — hl.prior.post.emp.plot.code","title":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Half-life Prior Distribution for Empirical Dataset — hl.prior.post.emp.plot.code","text":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot Half-life Prior Distribution Empirical Dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.emp.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Half-life Prior Distribution for Empirical Dataset — hl.prior.post.emp.plot.code","text":"","code":"hl.prior.post.emp.plot.code(hl.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.emp.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Half-life Prior Distribution for Empirical Dataset — hl.prior.post.emp.plot.code","text":"hl.prior Prior log mean log sd half-life post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.emp.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hl.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Half-life Prior Distribution for Empirical Dataset — hl.prior.post.emp.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"hl.prior.plot.code- Create Prior vs Posterior Plot for Half-life Prior Distribution for Simulated Dataset — hl.prior.post.plot.code","title":"hl.prior.plot.code- Create Prior vs Posterior Plot for Half-life Prior Distribution for Simulated Dataset — hl.prior.post.plot.code","text":"hl.prior.plot.code- Create Prior vs Posterior Plot Half-life Prior Distribution Simulated Dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hl.prior.plot.code- Create Prior vs Posterior Plot for Half-life Prior Distribution for Simulated Dataset — hl.prior.post.plot.code","text":"","code":"hl.prior.post.plot.code(hl.prior, post, hl)"},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hl.prior.plot.code- Create Prior vs Posterior Plot for Half-life Prior Distribution for Simulated Dataset — hl.prior.post.plot.code","text":"hl.prior Prior log mean log sd half-life post Posterior distribution stanfit class hl True half-life value","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/hl.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hl.prior.plot.code- Create Prior vs Posterior Plot for Half-life Prior Distribution for Simulated Dataset — hl.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"lineage.constructor function - Construct a list with variables based on regime timing and placement — lineage.constructor","title":"lineage.constructor function - Construct a list with variables based on regime timing and placement — lineage.constructor","text":"lineage.constructor function - Construct list variables based regime timing placement","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lineage.constructor function - Construct a list with variables based on regime timing and placement — lineage.constructor","text":"","code":"lineage.constructor(phy, e, anc_maps = \"regimes\", regimes)"},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lineage.constructor function - Construct a list with variables based on regime timing and placement — lineage.constructor","text":"phy phylogeny NEXUS format e Lineage number anc_maps Vector name regime placement type regimes Regimes factor format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lineage.constructor function - Construct a list with variables based on regime timing and placement — lineage.constructor","text":"list information individual regime lineages","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"lineage.nodes - Function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","title":"lineage.nodes - Function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"lineage.nodes - Function internal Blouch use Given certain node, return list parent nodes back root tree","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lineage.nodes - Function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"","code":"lineage.nodes(phy, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lineage.nodes - Function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"phy phylogeny NEXUS format x node interest","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lineage.nodes - Function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"list Given certain node, return list parent nodes back root tree","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"optima.prior.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.plot.code","title":"optima.prior.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.plot.code","text":"optima.prior.plot.code- Create Prior Plot Multi-Optima Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"optima.prior.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.plot.code","text":"","code":"optima.prior.plot.code(trdata, optima.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"optima.prior.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"optima.prior.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"optima.prior.post.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.post.plot.code","title":"optima.prior.post.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.post.plot.code","text":"optima.prior.post.plot.code- Create Prior Plot Multi-Optima Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"optima.prior.post.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.post.plot.code","text":"","code":"optima.prior.post.plot.code(trdata, optima.prior, post, optima)"},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"optima.prior.post.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima post Posterior distribution stanfit class optima True optima","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/optima.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"optima.prior.post.plot.code- Create Prior Plot for Multi-Optima Model — optima.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":null,"dir":"Reference","previous_headings":"","what":"parent function - Returns parent node of offspring node given node number — parent","title":"parent function - Returns parent node of offspring node given node number — parent","text":"parent function - Returns parent node offspring node given node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parent function - Returns parent node of offspring node given node number — parent","text":"","code":"parent(phy, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parent function - Returns parent node of offspring node given node number — parent","text":"phy phylogeny phytools format x node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parent function - Returns parent node of offspring node given node number — parent","text":"value Returns parent node offspring node given node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.mlm.ve.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.mlm.ve.prior.post.plot.code","title":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.mlm.ve.prior.post.plot.code","text":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.mlm.ve.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.mlm.ve.prior.post.plot.code","text":"","code":"reg.adapt.mlm.ve.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   vary.effects )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.mlm.ve.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.mlm.ve.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class vary.effects Data frame true optima beta regime","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.mlm.ve.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.adapt.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.mlm.ve.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.plot.code","title":"reg.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.plot.code","text":"reg.adapt.prior.plot.code- Create Prior Plot Multi-Optima Adaptive Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.plot.code","text":"","code":"reg.adapt.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.post.plot.code","title":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.post.plot.code","text":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Adaptive Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.post.plot.code","text":"","code":"reg.adapt.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Simulated Data — reg.adapt.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.ve.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.ve.prior.post.plot.code","title":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.ve.prior.post.plot.code","text":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Adaptive Model - Varying Effects - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.ve.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.ve.prior.post.plot.code","text":"","code":"reg.adapt.ve.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.ve.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.ve.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.adapt.ve.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Adaptive Model - Varying Effects - Simulated Data — reg.adapt.ve.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect + Adaptive Model — reg.direct.adapt.prior.plot.code","title":"reg.direct.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect + Adaptive Model — reg.direct.adapt.prior.plot.code","text":"reg.direct.adapt.prior.plot.code- Create Prior Plot Multi-Optima Direct Effect + Adaptive Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect + Adaptive Model — reg.direct.adapt.prior.plot.code","text":"","code":"reg.direct.adapt.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect + Adaptive Model — reg.direct.adapt.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.adapt.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect + Adaptive Model — reg.direct.adapt.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Simulated Data — reg.direct.adapt.prior.post.plot.code","title":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Simulated Data — reg.direct.adapt.prior.post.plot.code","text":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect + Adaptive Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Simulated Data — reg.direct.adapt.prior.post.plot.code","text":"","code":"reg.direct.adapt.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Simulated Data — reg.direct.adapt.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.adapt.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Simulated Data — reg.direct.adapt.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.ve.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data — reg.direct.adapt.ve.prior.post.plot.code","title":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data — reg.direct.adapt.ve.prior.post.plot.code","text":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.ve.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data — reg.direct.adapt.ve.prior.post.plot.code","text":"","code":"reg.direct.adapt.ve.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.ve.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data — reg.direct.adapt.ve.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.adapt.ve.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.adapt.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect + Adaptive Model - Varying Effects - Simulated Data — reg.direct.adapt.ve.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.mlm.ve.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.mlm.ve.prior.post.plot.code","title":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.mlm.ve.prior.post.plot.code","text":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.mlm.ve.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.mlm.ve.prior.post.plot.code","text":"","code":"reg.direct.mlm.ve.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   vary.effects )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.mlm.ve.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.mlm.ve.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class vary.effects Data frame true optima beta regime","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.mlm.ve.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.mlm.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multilevel Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.mlm.ve.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.plot.code","title":"reg.direct.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.plot.code","text":"reg.direct.prior.plot.code- Create Prior Plot Multi-Optima Direct Effect Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.plot.code","text":"","code":"reg.direct.prior.plot.code(trdata, optima.prior, beta.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.prior.plot.code- Create Prior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.emp.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model — reg.direct.prior.post.emp.plot.code","title":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model — reg.direct.prior.post.emp.plot.code","text":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect Model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.emp.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model — reg.direct.prior.post.emp.plot.code","text":"","code":"reg.direct.prior.post.emp.plot.code(trdata, optima.prior, beta.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.emp.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model — reg.direct.prior.post.emp.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.emp.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model — reg.direct.prior.post.emp.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.post.plot.code","title":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.post.plot.code","text":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect Model - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.post.plot.code","text":"","code":"reg.direct.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Simulated Data — reg.direct.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.emp.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects — reg.direct.ve.prior.post.emp.plot.code","title":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects — reg.direct.ve.prior.post.emp.plot.code","text":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect Model - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.emp.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects — reg.direct.ve.prior.post.emp.plot.code","text":"","code":"reg.direct.ve.prior.post.emp.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.emp.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects — reg.direct.ve.prior.post.emp.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.emp.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.ve.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects — reg.direct.ve.prior.post.emp.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.ve.prior.post.plot.code","title":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.ve.prior.post.plot.code","text":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot Multi-Optima Direct Effect Model - Varying Effects - Simulated Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.ve.prior.post.plot.code","text":"","code":"reg.direct.ve.prior.post.plot.code(   trdata,   optima.prior,   beta.prior,   post,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.ve.prior.post.plot.code","text":"trdata Phylogeny data treeplyr format optima.prior Prior mean scale parameter optima beta.prior Prior mean scale parameter half-life post Posterior distribution stanfit class optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/reg.direct.ve.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reg.direct.ve.prior.post.plot.code- Create Prior vs. Posterior Plot for Multi-Optima Direct Effect Model - Varying Effects - Simulated Data — reg.direct.ve.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":null,"dir":"Reference","previous_headings":"","what":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"set.converge.regimes - function assign regimes phylogeny","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"","code":"set.converge.regimes(trdata, regimes)"},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"trdata treeplyr format file regimes node numbers regimes shift","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"treeplyr format file new column dat tip regimes internal regime assignments node.labels","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.plot.code","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.plot.code","text":"sigma.prior.plot.code- Create Prior vs. Posterior Plot Sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.plot.code","text":"","code":"sig.prior.plot.code(sigma.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.plot.code","text":"sigma.prior Prior mean sd parameters sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.post.plot.code","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.post.plot.code","text":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot Sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.post.plot.code","text":"","code":"sig.prior.post.plot.code(sigma.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.post.plot.code","text":"sigma.prior Prior mean standard deviation parmateres post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sig.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sig.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.plot.code","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.plot.code","text":"sigma.prior.plot.code- Create Prior vs. Posterior Plot Sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.plot.code","text":"","code":"# S3 method for prior.plot.code sigma(sigma.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.plot.code","text":"sigma.prior Prior mean sd parameters sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigma.prior.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.post.plot.code","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.post.plot.code","text":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot Sigma","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.post.plot.code","text":"","code":"# S3 method for prior.post.plot.code sigma(sigma.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.post.plot.code","text":"sigma.prior Prior mean standard deviation parmateres post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sigma.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigma.prior.post.plot.code- Create Prior vs. Posterior Plot for Sigma — sigma.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.adaptive.data- Simulate Adaptive Data — sim.adaptive.data","title":"sim.adaptive.data- Simulate Adaptive Data — sim.adaptive.data","text":"sim.adaptive.data- Simulate Adaptive Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.adaptive.data- Simulate Adaptive Data — sim.adaptive.data","text":"","code":"sim.adaptive.data(phy, N, Z, hl, vy, Sxx, optima, beta)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.adaptive.data- Simulate Adaptive Data — sim.adaptive.data","text":"phy object class \"phylo\" N Number tips tree Z Number traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.adaptive.data- Simulate Adaptive Data — sim.adaptive.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.multi.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.adaptive.multi.data- Simulate Adaptive Data with Multiple X Traits — sim.adaptive.multi.data","title":"sim.adaptive.multi.data- Simulate Adaptive Data with Multiple X Traits — sim.adaptive.multi.data","text":"sim.adaptive.multi.data- Simulate Adaptive Data Multiple X Traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.multi.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.adaptive.multi.data- Simulate Adaptive Data with Multiple X Traits — sim.adaptive.multi.data","text":"","code":"sim.adaptive.multi.data(phy, N, Z, hl, vy, Sxx, optima, beta)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.multi.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.adaptive.multi.data- Simulate Adaptive Data with Multiple X Traits — sim.adaptive.multi.data","text":"phy object class \"phylo\" N Number tips tree Z Number traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.adaptive.multi.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.adaptive.multi.data- Simulate Adaptive Data with Multiple X Traits — sim.adaptive.multi.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.adaptive.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data with Multiple X Traits — sim.direct.adaptive.data","title":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data with Multiple X Traits — sim.direct.adaptive.data","text":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data Multiple X Traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.adaptive.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data with Multiple X Traits — sim.direct.adaptive.data","text":"","code":"sim.direct.adaptive.data(   phy,   N,   Z_direct,   Z_adaptive,   hl,   vy,   Sxx,   optima,   beta )"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.adaptive.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data with Multiple X Traits — sim.direct.adaptive.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number direct effect traits Z_adaptive Number adaptive traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.adaptive.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.adaptive.multi.data- Simulate Direct Effect + Adaptive Data with Multiple X Traits — sim.direct.adaptive.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.direct.data- Simulate Direct Effect Model Data — sim.direct.data","title":"sim.direct.data- Simulate Direct Effect Model Data — sim.direct.data","text":"sim.direct.data- Simulate Direct Effect Model Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.direct.data- Simulate Direct Effect Model Data — sim.direct.data","text":"","code":"sim.direct.data(phy, N, Z, hl, vy, Sxx, optima, beta)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.direct.data- Simulate Direct Effect Model Data — sim.direct.data","text":"phy object class \"phylo\" N Number tips tree Z Number traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.direct.data- Simulate Direct Effect Model Data — sim.direct.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.multi.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.direct.multi.data- Simulate Direct Effect Model Data with Multiple X Traits — sim.direct.multi.data","title":"sim.direct.multi.data- Simulate Direct Effect Model Data with Multiple X Traits — sim.direct.multi.data","text":"sim.direct.multi.data- Simulate Direct Effect Model Data Multiple X Traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.multi.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.direct.multi.data- Simulate Direct Effect Model Data with Multiple X Traits — sim.direct.multi.data","text":"","code":"sim.direct.multi.data(phy, N, Z, hl, vy, Sxx, optima, beta)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.multi.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.direct.multi.data- Simulate Direct Effect Model Data with Multiple X Traits — sim.direct.multi.data","text":"phy object class \"phylo\" N Number tips tree Z Number traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.direct.multi.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.direct.multi.data- Simulate Direct Effect Model Data with Multiple X Traits — sim.direct.multi.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data — sim.reg.adapt.data","title":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data — sim.reg.adapt.data","text":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data — sim.reg.adapt.data","text":"","code":"sim.reg.adapt.data(phy, N, Z_adaptive, hl, vy, Sxx, optima, beta, shifts)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data — sim.reg.adapt.data","text":"phy object class \"phylo\" N Number tips tree Z_adaptive Number X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.adapt.data- Simulate Multi-Optima Adaptive Model Data — sim.reg.adapt.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.mlm.ve.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.mlm.ve.data","title":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.mlm.ve.data","text":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.mlm.ve.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.mlm.ve.data","text":"","code":"sim.reg.adapt.mlm.ve.data(   phy,   N,   Z_adaptive,   hl,   vy,   Sxx,   optima.bar,   optima.sd,   beta.bar,   beta.sd,   rho,   shifts )"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.mlm.ve.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.mlm.ve.data","text":"phy object class \"phylo\" N Number tips tree Z_adaptive Number Adaptive X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima.bar True average optima optima.sd True standard deviation optima beta.bar True average beta beta.sd True standard deviation betas rho True corelation optimas betas shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.mlm.ve.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.adapt.mlm.ve.data- Simulate Multilevel Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.mlm.ve.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.ve.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.ve.data","title":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.ve.data","text":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.ve.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.ve.data","text":"","code":"sim.reg.adapt.ve.data(phy, N, Z_adaptive, hl, vy, Sxx, optima, beta, shifts)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.ve.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.ve.data","text":"phy object class \"phylo\" N Number tips tree Z_adaptive Number X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.adapt.ve.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.adapt.ve.data- Simulate Multi-Optima Adaptive Model Data - Varying Effects — sim.reg.adapt.ve.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.data- Simulate Multi-Optima Data — sim.reg.data","title":"sim.reg.data- Simulate Multi-Optima Data — sim.reg.data","text":"sim.reg.data- Simulate Multi-Optima Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.data- Simulate Multi-Optima Data — sim.reg.data","text":"","code":"sim.reg.data(phy, N, hl, vy, Sxx, optima, shifts)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.data- Simulate Multi-Optima Data — sim.reg.data","text":"phy object class \"phylo\" N Number tips tree hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.data- Simulate Multi-Optima Data — sim.reg.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data — sim.reg.direct.adapt.data","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data — sim.reg.direct.adapt.data","text":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data — sim.reg.direct.adapt.data","text":"","code":"sim.reg.direct.adapt.data(   phy,   N,   Z_direct,   Z_adaptive,   hl,   vy,   Sxx,   optima,   beta,   shifts )"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data — sim.reg.direct.adapt.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number Direct Effect X traits Z_adaptive Number Adaptive X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data — sim.reg.direct.adapt.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.ve.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects — sim.reg.direct.adapt.ve.data","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects — sim.reg.direct.adapt.ve.data","text":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.ve.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects — sim.reg.direct.adapt.ve.data","text":"","code":"sim.reg.direct.adapt.ve.data(   phy,   N,   Z_direct,   Z_adaptive,   hl,   vy,   Sxx,   optima,   beta,   shifts )"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.ve.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects — sim.reg.direct.adapt.ve.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number Direct Effect X traits Z_adaptive Number Adaptive X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.adapt.ve.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.direct.adapt.data- Simulate Multi-Optima Direct EFfect + Adaptive Model Data - Varying Effects — sim.reg.direct.adapt.ve.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data — sim.reg.direct.data","title":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data — sim.reg.direct.data","text":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data — sim.reg.direct.data","text":"","code":"sim.reg.direct.data(phy, N, Z_direct, hl, vy, Sxx, optima, beta, shifts)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data — sim.reg.direct.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.direct.data- Simulate Multi-Optima Direct Effect Model Data — sim.reg.direct.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.mlm.ve.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects — sim.reg.direct.mlm.ve.data","title":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects — sim.reg.direct.mlm.ve.data","text":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.mlm.ve.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects — sim.reg.direct.mlm.ve.data","text":"","code":"sim.reg.direct.mlm.ve.data(   phy,   N,   Z_direct,   hl,   vy,   Sxx,   optima.bar,   optima.sd,   beta.bar,   beta.sd,   rho,   shifts )"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.mlm.ve.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects — sim.reg.direct.mlm.ve.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number Direct Effect X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima.bar True average optima optima.sd True standard deviation optima beta.bar True average beta beta.sd True standard deviation betas rho True corelation optimas betas shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.mlm.ve.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.direct.mlm.ve.data- Simulate Multilevel Multi-Optima Direct Effect Data - Varying Effects — sim.reg.direct.mlm.ve.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.ve.data.html","id":null,"dir":"Reference","previous_headings":"","what":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects — sim.reg.direct.ve.data","title":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects — sim.reg.direct.ve.data","text":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.ve.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects — sim.reg.direct.ve.data","text":"","code":"sim.reg.direct.ve.data(phy, N, Z_direct, hl, vy, Sxx, optima, beta, shifts)"},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.ve.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects — sim.reg.direct.ve.data","text":"phy object class \"phylo\" N Number tips tree Z_direct Number X traits hl True half-life value vy True Vy value Sxx Instantaneous variance BM process optima True optima beta True beta shifts Nodes regime shifts","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/sim.reg.direct.ve.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sim.reg.direct.ve.data- Simulate Multi-Optima Direct Effect Model Data - Varying Effects — sim.reg.direct.ve.data","text":"Merged phylogeny data treeplyr format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":null,"dir":"Reference","previous_headings":"","what":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"Primate tree 301 tip species primate phylogeny Version 3 10K trees","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"","code":"tree.10K"},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"NEXUS Format dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"https://10ktrees.nunn-lab.org/","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":null,"dir":"Reference","previous_headings":"","what":"ts_fxn function - Internal Blouch function to return tree data — ts_fxn","title":"ts_fxn function - Internal Blouch function to return tree data — ts_fxn","text":"ts_fxn function - Internal Blouch function return tree data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts_fxn function - Internal Blouch function to return tree data — ts_fxn","text":"","code":"ts_fxn(phy)"},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ts_fxn function - Internal Blouch function to return tree data — ts_fxn","text":"phy Phylogeny NEXUS format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ts_fxn function - Internal Blouch function to return tree data — ts_fxn","text":"list object tree data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"vy.prior.plot.code- Create plot for Vy Prior Distribution — vy.prior.plot.code","title":"vy.prior.plot.code- Create plot for Vy Prior Distribution — vy.prior.plot.code","text":"vy.prior.plot.code- Create plot Vy Prior Distribution","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vy.prior.plot.code- Create plot for Vy Prior Distribution — vy.prior.plot.code","text":"","code":"vy.prior.plot.code(vy.prior)"},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vy.prior.plot.code- Create plot for Vy Prior Distribution — vy.prior.plot.code","text":"vy.prior Prior log mean log sd half-life","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vy.prior.plot.code- Create plot for Vy Prior Distribution — vy.prior.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.emp.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Vy for Empirical Dataset — vy.prior.post.emp.plot.code","title":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Vy for Empirical Dataset — vy.prior.post.emp.plot.code","text":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot Vy Empirical Dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.emp.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Vy for Empirical Dataset — vy.prior.post.emp.plot.code","text":"","code":"vy.prior.post.emp.plot.code(vy.prior, post)"},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.emp.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Vy for Empirical Dataset — vy.prior.post.emp.plot.code","text":"vy.prior Prior log mean log sd half-life post Posterior distribution stanfit class","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.emp.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vy.prior.post.emp.plot.code- Create Prior vs. Posterior Plot for Vy for Empirical Dataset — vy.prior.post.emp.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot for Vy — vy.prior.post.plot.code","title":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot for Vy — vy.prior.post.plot.code","text":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot Vy","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot for Vy — vy.prior.post.plot.code","text":"","code":"vy.prior.post.plot.code(vy.prior, post, vy)"},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot for Vy — vy.prior.post.plot.code","text":"vy.prior Prior scale parameter post Posterior distribution stanfit class vy True Vy","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/vy.prior.post.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vy.prior.post.plot.code- Create Prior vs. Posterior Plot for Vy — vy.prior.post.plot.code","text":"Plots ggplot2 format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"weight.matrix - For internal Blouch use - wrapper to apply weights_regimes to each lineage — weight.matrix","title":"weight.matrix - For internal Blouch use - wrapper to apply weights_regimes to each lineage — weight.matrix","text":"weight.matrix - internal Blouch use - wrapper apply weights_regimes lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight.matrix - For internal Blouch use - wrapper to apply weights_regimes to each lineage — weight.matrix","text":"","code":"weight.matrix(phy, a, lineages)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight.matrix - For internal Blouch use - wrapper to apply weights_regimes to each lineage — weight.matrix","text":"phy phylogeny NEXUS format OU rate parameter lineages Vector regime values","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight.matrix - For internal Blouch use - wrapper to apply weights_regimes to each lineage — weight.matrix","text":"weights lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":null,"dir":"Reference","previous_headings":"","what":"weights_regimes - For internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","title":"weights_regimes - For internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"weights_regimes - internal Blouch use individual lineage, sum segments regimes","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weights_regimes - For internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"","code":"weights_regimes(a, lineage)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weights_regimes - For internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"Rate parameter OU model lineage Individual regime values lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weights_regimes - For internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"Return named vector regimes weights individual lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"weights_segments - For internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","title":"weights_segments - For internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"weights_segments - internal Blouch use individual lineage, determine weighting segment","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weights_segments - For internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"","code":"weights_segments(a, lineage)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weights_segments - For internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"Rate parameter OU model lineage Individual lineage regime values","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weights_segments - For internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"individual lineage, determine weighting segment","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ysim.ppc.plot.code.html","id":null,"dir":"Reference","previous_headings":"","what":"ysim.ppc.plot.code - Create plot for Prior and Poserior Predictive Checks — ysim.ppc.plot.code","title":"ysim.ppc.plot.code - Create plot for Prior and Poserior Predictive Checks — ysim.ppc.plot.code","text":"ysim.ppc.plot.code - Create plot Prior Poserior Predictive Checks","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ysim.ppc.plot.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ysim.ppc.plot.code - Create plot for Prior and Poserior Predictive Checks — ysim.ppc.plot.code","text":"","code":"ysim.ppc.plot.code(dat, post, row.nums)"},{"path":"https://mark-grabowski.github.io/blouch/reference/ysim.ppc.plot.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ysim.ppc.plot.code - Create plot for Prior and Poserior Predictive Checks — ysim.ppc.plot.code","text":"dat Data formatted Blouch models blouch.prep functions post Posterior distribution stanfit class row.nums Rows sampled distribution","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ysim.ppc.plot.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ysim.ppc.plot.code - Create plot for Prior and Poserior Predictive Checks — ysim.ppc.plot.code","text":"Plots ggplot2 format","code":""},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/news/index.html","id":"bug-fixes-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"blouch 1.0","text":"Currently outstanding bugs.","code":""},{"path":"https://mark-grabowski.github.io/blouch/news/index.html","id":"other-changes-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"blouch 1.0","text":"None","code":""}]
