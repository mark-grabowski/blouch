[{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mark-grabowski.github.io/blouch/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Simulation Example","text":"Blouch uses RStan implement Stan. following code enables compiler optimizations improve estimation speed model, taken : https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started Blouch package includes primate phylogeny 10KTrees Project (Arnold et al. 2010), used various simulations comes https://10ktrees.nunn-lab.org/. Version 3 primate phylogeny 301 tips. randomly reduce tip number 100 manageable tree using functions ape R package (Paradis et al. 2004) Lets plot tree nodes labeled - placing regime shifts next step. use nodes 164, 192, 104, results 4 regimes - shifts+root regime.","code":"rm(list=ls()) library(blouch) #For execution on a local, multicore CPU with excess RAM we recommend calling options(mc.cores = parallel::detectCores()) #options(mc.cores = 8) rstan::rstan_options(auto_write = TRUE)  dotR <- file.path(Sys.getenv(\"HOME\"), \".R\") if (!file.exists(dotR)) dir.create(dotR) M <- file.path(dotR, \"Makevars\") if (!file.exists(M)) file.create(M) arch <- ifelse(R.version$arch == \"aarch64\", \"arm64\", \"x86_64\") cat(paste(\"\\nCXX14FLAGS += -O3 -mtune=native -arch\", arch, \"-ftemplate-depth-256\"),     file = M, sep = \"\\n\", append = FALSE) ######################################################################################################## #Four regimes with one adaptive trait and multiple slopes per optima but single alpha parameter set.seed(10) #Set sequence of random numbers for replicability N<-100 #Number of species  phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N])  phy<-ape::multi2di(phy) #Collapse or resolve multichotomies in phylogenetic trees.  l.tree<-max(ape::branching.times(phy)) ## Rescale tree to height 1 phy$edge.length<-phy$edge.length/l.tree #Set regimes - manually - 4 regimes #Locate nodes plot(phy,no.margin=TRUE,edge.width=2,cex=0.7) ape::nodelabels(frame=\"none\",adj=c(1.1,-0.4)) ape::tiplabels()"},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"combine-data-and-tree-and-paint-regimes-on-tree-","dir":"Articles","previous_headings":"","what":"Combine data and tree and paint regimes on tree.","title":"Simulation Example","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based taxa names. See https://github.com/uyedaj/treeplyr package. step basically make dummy trdata object containing tree blank “dat” dataset object. place regime shifts tree identified earlier using Blouch’s set.converge.regimes R function. function also produces plot tree colored regimes. addition, manually plot tree shifts colored make sure done everything correctly.","code":"trdata<-data.frame(phy$tip.label) trdata<-treeplyr::make.treedata(phy,trdata)  shifts<-c(164,192,104) #Location of nodes with regime shifts #100 species trdata<-set.converge.regimes(trdata,shifts) #> [1] 1 #> [1] 2 #> [1] 3 #>   [1] OU1 OU1 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [19] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [37] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [55] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 #>  [73] OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU4 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #>  [91] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 #> [109] OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU1 OU2 #> [127] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [145] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [163] OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 OU2 #> [181] OU2 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 OU3 #> Levels: OU1 OU2 OU3 OU4 #> [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" #Check if code worked shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label) edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]])  reg.colors<-ggsci::pal_npg(palette=c(\"nrc\"),alpha=1)(4)  print(reg.colors) #> [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1,show.tip.label=FALSE) reg_tips<-trdata$dat$regimes reg_tips<-as.numeric(as.factor(reg_tips))"},{"path":[]},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"get-info-on-phylogeny","dir":"Articles","previous_headings":"","what":"Get info on phylogeny","title":"Simulation Example","text":"Next build regimes object include internal node tip regimes, use Blouch’s lineage.constructor R function trace lineages tips root determine regime node - R function built Blouch uses internally given empirical dataset, use function part data simulation.","code":"regimes_internal <-trdata$phy$node.label #Get internal regimes at nodes regimes_tip <- trdata$dat$regimes #Get regimes at tips regimes <- concat.factor(regimes_tip, regimes_internal) #Combine these into a list anc_maps<-\"regimes\" #Type of regime placement - currently only at nodes lineages <- lapply(1:N, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes)) #Trace lineage from tips (n) to root and determine regimes of each node or branch"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"set-trueknown-parameter-values","dir":"Articles","previous_headings":"","what":"Set true/known parameter values","title":"Simulation Example","text":"Next set true/known parameter values. half-life (hl), stationary variance (vy), simulation translate \\(\\alpha\\) () \\(\\sigma^2_y\\) (sigma2_y). set ancestral value root (vX0) 0, instantaneous variance BM process (Sxx) 10.","code":"######################### hl<-0.1 #Half life a<-log(2)/hl #hl expressed as alpha parameter vy<-0.01 #Stationary Variance sigma2_y<-vy*(2*(log(2)/hl)); #Vy expressed as random fluctuations of Y  vX0<-0 #Ancestral value at root sigma2_x<-matrix(1,1,1) #Variance of BM Process"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulate-x-data","dir":"Articles","previous_headings":"","what":"Simulate X data","title":"Simulation Example","text":"first simulate X data following Brownian-Motion Process using fastBM function phytools package (Revell 2011) parameter values set . plot values using phenogram function package make sure things look .","code":"X<-phytools::fastBM(phy,a=vX0,sig2=sigma2_x[1,1],internal=FALSE) #Simulate X BM variable on tree, with BM scaling 10 names(X)<-phy$tip.label phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data #> Optimizing the positions of the tip labels..."},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulate-y-data","dir":"Articles","previous_headings":"","what":"Simulate Y data","title":"Simulation Example","text":"Next need simulate Y data - using four different optima (intercepts) four different slopes. use R function weight.matrix, Blouch includes produce optima_matrix object, weighting lineage based amount time spent regime (see Hansen 1997 derivation). followed using R function calc_adaptive_dmX Blouch, calculates design matrix observed predictor X variables species multiplied phylogenetic correction factor, following Hansen et al. (2008), values stored object pred_X. set values optima/intercepts (optima) slopes (beta), use linear model construct deterministic relationship set parameter values mu, vector mean values species analysis.","code":"optima_matrix<-weight.matrix(trdata$phy, a, lineages) #Calculate optima/intercepts matrix pred_X<-calc_adaptive_dmX(phy,a,X) #Calculate design matrix  optima<-c(1,2,3,4) #Simulated optima/intercepts beta<-c(0.75,0.5,0.35,0.25) #Simulated slopes  mu<-matrix(NA,N,1) for(i in 1:N){ #Generative function to produce average Y values for each combination of optima/intercepts and slopes following Blouch approach   mu[i] = optima_matrix[i,]%*%optima+beta[reg_tips[i]]%*%pred_X[i] }"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"calculating-v","dir":"Articles","previous_headings":"","what":"Calculating V","title":"Simulation Example","text":"construct variance/covariance matrix (V) based previously set parameter values Blouch R function calc_adaptive_V, following Hansen et al. (2008). Finally sill simulate Y values based mean vector mu covariance matrix V. Let’s make simple plot data, look simple ordinary least squares regression Y X. intercept slope values give us idea center priors .","code":"n_reg<-length(unique(regimes)) #Count number of regimes Z_adaptive<-1 #Number of adaptive X traits V<-calc_adaptive_V(phy,a, sigma2_y,  beta,  sigma2_x, Z_adaptive) #Calculate V based on set values Y<-MASS::mvrnorm(n=1,mu,V) #Simulate Y variables centered on mu with covariariance matrix V df<-data.frame(Y=Y,X=X)  ggplot2::ggplot(data=df,ggplot2::aes(x=X,y=Y))+   ggplot2::geom_point() summary(lm(Y~X,df)) #>  #> Call: #> lm(formula = Y ~ X, data = df) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.6769 -0.9146 -0.3293  1.1421  1.7937  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   2.8002     0.1254  22.324   <2e-16 *** #> X             0.1551     0.1102   1.408    0.162     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.1 on 98 degrees of freedom #> Multiple R-squared:  0.01982,    Adjusted R-squared:  0.009823  #> F-statistic: 1.982 on 1 and 98 DF,  p-value: 0.1623"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"simulating-measurement-error","dir":"Articles","previous_headings":"","what":"Simulating measurement error","title":"Simulation Example","text":"Next simulate measurement error - use standard deviation measurement error 0.01, provide Blouch vector (X_error Y_error), use rnorm function add error X Y variables. words, telling Blouch estimated error X Y 0.01, providing X Y variables offset random amount error standard deviation.","code":"################################################################################################################## #Simulate errors Z_X_error<-1 #Number of X traits with error X_error<-matrix(0.01,nrow=N,ncol=Z_X_error) X_error<-data.frame(X_error) Y_error<-rep(0.01,N) Y_with_error<-Y+rnorm(N,0,0.01) #Add ME to Y X_with_error<-X+rnorm(N,0,0.01) #Add ME to X"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"data-setup-for-blouch","dir":"Articles","previous_headings":"","what":"Data setup for Blouch","title":"Simulation Example","text":"first line combines existing trdata file make.trdata regime info tips X Y predictor values errors. use helper function blouch.reg.adapt.prep() setup dat object Stan. function helper functions included Blouch require trdata files, names columns contain Y (sometimes depending model) X data error data. “Z_adaptive” number predictors, “regimes” name column tip regime data located. See help info function articles github.com functionality.","code":"############################################################################################################ #Make trdata file trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error))) dat<-blouch.reg.adapt.prep(trdata,\"Y_with_error\",\"Y_error\",\"X_with_error\",\"X_error\",Z_adaptive=1,\"regimes\")"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"exploring-priors","dir":"Articles","previous_headings":"","what":"Exploring Priors","title":"Simulation Example","text":"Lets check simulated data reasonable values priors shown light grey lines. “.sims” values - priors based intercept slope OLS regression , standard deviations set visualizing priors versus data. See Grabowski (revision) setting priors.","code":"############################################################################################################ #Prior Exploration Plot lm.allometric<-summary(lm(dat$Y_obs~dat$X_obs)) #Calculate regression of Y on X lm.allometric$coefficients #>              Estimate Std. Error   t value     Pr(>|t|) #> (Intercept) 2.7980722  0.1253109 22.329035 3.202140e-40 #> dat$X_obs   0.1559651  0.1101167  1.416363 1.598402e-01  optima.sims<-rnorm(100,lm.allometric$coefficients[1],1) #Set priors on alpha/ beta.sims<-rnorm(n=100,lm.allometric$coefficients[2],0.25)  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs[,1]) names(df)<-c(\"Y\",\"X\")  slope.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=regimes_tip))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.1)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive Predictor\")+   ggsci::scale_color_npg()  slope.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"running-models","dir":"Articles","previous_headings":"","what":"Running models","title":"Simulation Example","text":"First run multilevel multi-optima adaptive model varying effects. allow intercepts (optima) slopes vary regimes. multilevel model, information can shared across regimes, can produce accurate parameter estimates. priors used simulation. See Grabowski (revision) setting priors. change values requires open Stan function, case blouchOU_reg_adapt_mlm_ve, manually edit . Unfortunately way around present, trust - worth . example, four important priors models - values explored Grabowski (revision), show priors standard easy read format. Remember, always prior predictive simulations first - words, look distributions values see actually biologically possible - see exploring priors step . lines Stan code setting priors - written slightly different readily understandable change values make appropriate analyses, just need change numbers . Stan programs Blouch/inst/stan folder named according model run. See Table S1 Grabowski (revision) models. Remember, priors based know biological processes underlying research question prior predictive simulations (see McElreath 2020) Now let’s run multi-level adaptive model varying effects (blouchOU_reg_adapt_mlm_ve ). Stan prints lot info, lets just look parameter estimates store posterior distribution later use. can also print compare parameter estimates values set earlier. Now let’s run non-multilevel version model. compare two models terms predictive performance . can also compare parameter estimates values set earlier.","code":"######################################################################################################## #Priors #hl ~ lognormal(log(0.25),0.75); #vy ~ exponential(20); #optima_bar ~ normal(2.88,1); #beta_bar ~ normal(0.16,0.25); #Stan Code target += lognormal_lpdf(hl|log(0.25),0.75); target += exponential_lpdf(vy|20); target += normal_lpdf(optima_bar|2.8,1); target += normal_lpdf(beta_bar|0.16,0.25); ######################################################################################################## #Complete Priors #hl ~ lognormal(log(0.25),0.75); #vy ~ exponential(20); #optima_bar ~ normal(2.8,1); #beta_bar ~ normal(0.16,0.25); #Rho ~ lkj_corr(4);  fit.reg.adapt.mlm.ve<- rstan::sampling(blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve,data = dat,chains = 2,cores=2,iter =4000)#, control = list(adapt_delta = 0.95)) #> Warning: There were 1 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\",\"beta_e\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_ve. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>              mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> hl           0.09    0.00 0.04  0.04  0.06  0.08  0.10  0.19   760    1 #> vy           0.01    0.00 0.01  0.00  0.00  0.01  0.01  0.02  5449    1 #> optima_bar   2.54    0.01 0.52  1.52  2.20  2.54  2.89  3.57  4047    1 #> beta_bar[1]  0.33    0.00 0.16 -0.02  0.24  0.35  0.43  0.61  3337    1 #> Rho[1,1]     1.00     NaN 0.00  1.00  1.00  1.00  1.00  1.00   NaN  NaN #> Rho[1,2]    -0.22    0.00 0.30 -0.74 -0.43 -0.23 -0.01  0.39  4120    1 #> Rho[2,1]    -0.22    0.00 0.30 -0.74 -0.43 -0.23 -0.01  0.39  4120    1 #> Rho[2,2]     1.00    0.00 0.00  1.00  1.00  1.00  1.00  1.00  3909    1 #> sigma[1]     1.24    0.01 0.39  0.69  0.96  1.18  1.46  2.13  4647    1 #> sigma[2]     0.38    0.00 0.22  0.13  0.23  0.33  0.47  0.97  2488    1 #> optima[1]    1.02    0.00 0.11  0.80  0.94  1.02  1.09  1.25  4432    1 #> optima[2]    1.88    0.00 0.12  1.65  1.80  1.87  1.95  2.12  3949    1 #> optima[3]    2.71    0.01 0.26  2.16  2.54  2.73  2.89  3.20  2419    1 #> optima[4]    3.98    0.00 0.14  3.75  3.90  3.97  4.04  4.25   785    1 #> beta[1,1]    0.75    0.00 0.07  0.61  0.71  0.75  0.80  0.90  1977    1 #> beta[2,1]    0.45    0.00 0.08  0.29  0.40  0.45  0.50  0.61  3544    1 #> beta[3,1]    0.18    0.00 0.18 -0.20  0.07  0.20  0.31  0.51  2636    1 #> beta[4,1]    0.26    0.00 0.06  0.15  0.22  0.26  0.30  0.38  3894    1 #> beta_e[1,1]  0.66    0.00 0.07  0.51  0.61  0.66  0.71  0.79  3597    1 #> beta_e[2,1]  0.39    0.00 0.07  0.25  0.34  0.39  0.44  0.54  4496    1 #> beta_e[3,1]  0.16    0.00 0.16 -0.18  0.06  0.17  0.28  0.45  2441    1 #> beta_e[4,1]  0.23    0.00 0.05  0.13  0.19  0.23  0.26  0.32  4730    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Sep 23 08:02:08 2023. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). #plot(rethinking::precis(fit.reg.adapt.mlm.ve,depth=3,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\",\"beta_e\"))) #For use with rethinking package post.mlm.ve<-rstan::extract(fit.reg.adapt.mlm.ve) #Extract posterior distribution print(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #> Inference for Stan model: blouchOU_reg_adapt_mlm_ve. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd  2.5%  25%  50%  75% 97.5% n_eff Rhat #> hl        0.09    0.00 0.04  0.04 0.06 0.08 0.10  0.19   760    1 #> vy        0.01    0.00 0.01  0.00 0.00 0.01 0.01  0.02  5449    1 #> optima[1] 1.02    0.00 0.11  0.80 0.94 1.02 1.09  1.25  4432    1 #> optima[2] 1.88    0.00 0.12  1.65 1.80 1.87 1.95  2.12  3949    1 #> optima[3] 2.71    0.01 0.26  2.16 2.54 2.73 2.89  3.20  2419    1 #> optima[4] 3.98    0.00 0.14  3.75 3.90 3.97 4.04  4.25   785    1 #> beta[1,1] 0.75    0.00 0.07  0.61 0.71 0.75 0.80  0.90  1977    1 #> beta[2,1] 0.45    0.00 0.08  0.29 0.40 0.45 0.50  0.61  3544    1 #> beta[3,1] 0.18    0.00 0.18 -0.20 0.07 0.20 0.31  0.51  2636    1 #> beta[4,1] 0.26    0.00 0.06  0.15 0.22 0.26 0.30  0.38  3894    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Sep 23 08:02:08 2023. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). ######################################################################################################## #Priors #hl ~ lognormal(log(0.25),0.75); #vy ~ exponential(20); #optima ~ normal(2.8,1); #beta ~ normal(0.16,0.25);  fit.reg.adapt.ve<- rstan::sampling(blouch:::stanmodels$blouchOU_reg_adapt_ve,data = dat,chains = 2,cores=2,iter =4000) print(fit.reg.adapt.ve,pars = c(\"hl\",\"vy\",\"optima\",\"beta\")) #plot(rethinking::precis(fit.reg.adapt.ve,depth=3,pars = c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")))#For use with rethinking package post.ve<-rstan::extract(fit.reg.adapt.ve)#Extract posterior distribution"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"plotting-posterior-versus-prior-distributions","dir":"Articles","previous_headings":"","what":"Plotting posterior versus prior distributions","title":"Simulation Example","text":"Great. can see marginal likelihood tables Blouch fairly accurate recovering known parameter values. effective way look full estimated posterior distribution compare prior plot results. Lets use multi-optima adaptive model varying effects - model’s posterior looks quite similar. plots dotted line true values parameter. First half-life (hl):  Now stationary variance parameter (Vy):  Now lets plot covariance function distance tips - gives idea decay covariance OU process. use Blouch’s R helper function, calc_multiadaptive_cov_plot.R make plots:  Finally lets plot regression results - posterior compared prior true values (dotted lines).","code":"######################################################################################################## #Hl Plot prior vs. posterior - assume posterior has been extracted using extract(model) and stored in post  hl.sims<-data.frame(rlnorm(n=1000,meanlog=log(0.25),sdlog=0.75)) names(hl.sims)<-\"prior.hl.sims\"  hl.post<-data.frame(post.ve$hl) #Using this model's posterior names(hl.post)<-\"post.hl.sims\"  hl.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.hl.sims,fill=\"prior.hl.sims\"),alpha=0.2,data=hl.sims)+   ggplot2::geom_density(ggplot2::aes(post.hl.sims,fill=\"post.hl.sims\"),alpha=0.2,data=hl.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"Half-life\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"Half-life\", y = \"Density\")+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggplot2::geom_vline(xintercept=c(hl),linetype=2)+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  hl.plot vy.sims<-rexp(n=1000,rate=20) vy.sims<-data.frame(vy.sims) names(vy.sims)<-\"prior.vy.sims\"   vy.post<-data.frame(post.mlm.ve$vy) names(vy.post)<-\"post.vy.sims\"   vy.plot<-ggplot2::ggplot()+   ggplot2::geom_density(ggplot2::aes(prior.vy.sims,fill=\"prior.vy.sims\"),alpha=0.2,data=vy.sims)+   ggplot2::geom_density(ggplot2::aes(post.vy.sims,fill=\"post.vy.sims\"),alpha=0.2,data=vy.post)+   ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      #labs(title=\"Prior vs. Posterior Distribution \",x=\"vy\", y = \"Density\")+   ggplot2::labs(title=\"\",x=\"vy\", y = \"Density\")+   ggplot2::geom_vline(xintercept=c(vy),linetype=2)+      #scale_fill_manual(labels=c(\"Posterior\",\"Prior\"))+   ggsci::scale_fill_npg(name=\"\",labels=c(\"Posterior\",\"Prior\"))  vy.plot ######################################################################################################## #Adaptation model - multiple regimes a.sims<-log(2)/hl.sims; sigma2_y.sims<-vy.sims*(2*(log(2)/hl.sims)); beta.sims<-replicate(length(beta),rnorm(n=1000,0,0.25))  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.4)(2)  plot( NULL , xlim=c(0,1) , ylim=c(0,0.3) , xlab=\"Time since MRCA\" , ylab=\"Covariance\" ,cex.axis=0.75, mgp=c(1.25,0.25,0),tcl=-0.25) for (i in 1:30){   curve(calc_multiadaptive_cov_plot(a.sims[i,],sigma2_y.sims[i,],beta.sims[i,],x,Z_adaptive,n_reg) , add=TRUE , lwd=4 ,col=mypal[2]) #Prior - blue }  for (i in 1:30){   curve(calc_multiadaptive_cov_plot(post.ve$a[i],post.ve$sigma2_y[i],as.numeric(data.frame(post.ve$beta)[i,]),x,Z_adaptive,n_reg) , add=TRUE , lwd=4 , col=mypal[1]) #Posterior - red } #par(mar=c(3,3,0.25,0.25))  #covariance.plot <- recordPlot() #dev.off() #covariance.plot ######################################################################################################## X<-X_with_error Y<-Y_with_error  optima.sims<-rnorm(100,2.88,1) beta.sims<-rnorm(100, 0.16,0.25)  optima.post<-post.ve$optima beta.post<-data.frame(post.ve$beta) names(beta.post)<-c(\"post.beta.1\",\"post.beta.2\",\"post.beta.3\",\"post.beta.4\")   mu.link.11<-function(x.seq){optima.post[,1]+x.seq*beta.post[,1]} mu.link.12<-function(x.seq){optima.post[,2]+x.seq*beta.post[,2]}  mu.link.21<-function(x.seq){optima.post[,3]+x.seq*beta.post[,3]} mu.link.22<-function(x.seq){optima.post[,4]+x.seq*beta.post[,4]}  x.seq <- seq(from=min(X), to=max(X) , length.out=100) mu.11 <- sapply(x.seq , mu.link.11 ) mu.12 <- sapply(x.seq , mu.link.12 ) mu.21 <- sapply(x.seq , mu.link.21 ) mu.22 <- sapply(x.seq , mu.link.22 )  mu.mean.11<-colMeans(mu.11) mu.mean.12<-colMeans(mu.12) mu.mean.21<-colMeans(mu.21) mu.mean.22<-colMeans(mu.22)  mu.mean.11<-data.frame(as.numeric(mu.mean.11)) mu.mean.12<-data.frame(as.numeric(mu.mean.12)) names(mu.mean.11)<-\"mu.mean.11\" names(mu.mean.12)<-\"mu.mean.12\"  mu.mean.21<-data.frame(as.numeric(mu.mean.21)) mu.mean.22<-data.frame(as.numeric(mu.mean.22)) names(mu.mean.21)<-\"mu.mean.21\" names(mu.mean.22)<-\"mu.mean.22\"    mu.CI.11 <- apply( mu.11 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.12 <- apply( mu.12 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )   mu.CI.11<-data.frame(t(data.frame(mu.CI.11)),x.seq) mu.CI.12<-data.frame(t(data.frame(mu.CI.12)),x.seq)  mu.CI.21 <- apply( mu.21 , MARGIN=2, FUN=rethinking::PI , prob=0.89 ) mu.CI.22 <- apply( mu.22 , MARGIN=2, FUN=rethinking::PI , prob=0.89 )  mu.CI.21<-data.frame(t(data.frame(mu.CI.21)),x.seq) mu.CI.22<-data.frame(t(data.frame(mu.CI.22)),x.seq)   names(mu.CI.11)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.12)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.21)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\") names(mu.CI.22)<-c(\"min.5.5\",\"max.94.5\",\"x.seq\")  df<-data.frame(Y=dat$Y_obs,X=dat$X_obs,Regimes=regimes_tip) df11<-data.frame(x.seq,mu.mean.11) df12<-data.frame(x.seq,mu.mean.12) df21<-data.frame(x.seq,mu.mean.21) df22<-data.frame(x.seq,mu.mean.22)  mypal <- ggsci::pal_npg(\"nrc\", alpha = 0.7)(length(beta))  slope.plot.1<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=Regimes))+   ggplot2::geom_abline(intercept=optima.sims,slope=beta.sims,alpha=0.1)+      ggplot2::geom_abline(intercept=optima[1],slope=beta[1],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[2],slope=beta[2],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[3],slope=beta[3],alpha=0.5,linetype=2)+   ggplot2::geom_abline(intercept=optima[4],slope=beta[4],alpha=0.5,linetype=2)+      ggplot2::geom_line(data=df11,ggplot2::aes(x=x.seq,y=mu.mean.11),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.11,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+   ggplot2::geom_line(data=df12,ggplot2::aes(x=x.seq,y=mu.mean.12),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.12,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+      ggplot2::geom_line(data=df21,ggplot2::aes(x=x.seq,y=mu.mean.21),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.21,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+   ggplot2::geom_line(data=df22,ggplot2::aes(x=x.seq,y=mu.mean.22),linetype=1)+   ggplot2::geom_ribbon(data=mu.CI.22,ggplot2::aes(x=x.seq,ymin=min.5.5,ymax=max.94.5),linetype=2,alpha=0.2)+         ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      # Right -> inside the plot area   ggplot2::theme(     legend.position = c(.8, .3),     legend.justification = c(\"left\", \"top\"),     legend.box.just = \"left\",     legend.margin = ggplot2::margin(6, 6, 6, 6)   )+      #ggtitle(\"Prior vs. Posterior for Intercept and Slope\")+   ggplot2::ylab(\"Y\") + ggplot2::xlab(\"Adaptive trait\")+   ggsci::scale_color_npg()  slope.plot.1"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"model-comparison-using-psis","dir":"Articles","previous_headings":"","what":"Model Comparison using PSIS","title":"Simulation Example","text":"Lets model comparison using Pareto-Smoothed Importance Sampling (PSIS) R Package loo (Vehtari et al. 2023). loo estimates leave-one-cross validation Bayesian analyses. looking Pareto k values ~0.7, suggest results accurate. one species high k values models Tarsius bancanus, tarsier analysis lineage evolved independently long period time (.e. long single branch phylogeny). leads hard predict based species tree. PSIS also provides way look outliers analysis. compare two models using loo_compare function package.     results suggest two models indistinguishable - standard error difference expected log pointwise predictive density (elpd) two models larger difference.","code":"#Mlm varying effects model loo_mlm_ve <- loo::loo(fit.reg.adapt.mlm.ve, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. print(loo_mlm_ve) #>  #> Computed from 4000 by 100 log-likelihood matrix #>  #>          Estimate   SE #> elpd_loo     31.0  6.9 #> p_loo         5.3  1.4 #> looic       -62.0 13.8 #> ------ #> Monte Carlo SE of elpd_loo is NA. #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. n_eff #> (-Inf, 0.5]   (good)     98    98.0%   1362       #>  (0.5, 0.7]   (ok)        1     1.0%   333        #>    (0.7, 1]   (bad)       1     1.0%   308        #>    (1, Inf)   (very bad)  0     0.0%   <NA>       #> See help('pareto-k-diagnostic') for details. plot(loo_mlm_ve) #4X6 plot(loo_mlm_ve,label_points=TRUE) #Label outliers #Varying effects model loo_ve <- loo::loo(fit.reg.adapt.ve, save_psis = TRUE) #> Warning: Some Pareto k diagnostic values are slightly high. See help('pareto-k-diagnostic') for details. print(loo_ve) #>  #> Computed from 4000 by 100 log-likelihood matrix #>  #>          Estimate   SE #> elpd_loo     31.2  7.2 #> p_loo         5.4  1.5 #> looic       -62.4 14.3 #> ------ #> Monte Carlo SE of elpd_loo is 0.1. #>  #> Pareto k diagnostic values: #>                          Count Pct.    Min. n_eff #> (-Inf, 0.5]   (good)     98    98.0%   1894       #>  (0.5, 0.7]   (ok)        2     2.0%   461        #>    (0.7, 1]   (bad)       0     0.0%   <NA>       #>    (1, Inf)   (very bad)  0     0.0%   <NA>       #>  #> All Pareto k estimates are ok (k < 0.7). #> See help('pareto-k-diagnostic') for details. plot(loo_ve) #4X6 plot(loo_ve,label_points=TRUE) #Label outliers loo::loo_compare(loo_mlm_ve, loo_ve) #>        elpd_diff se_diff #> model2  0.0       0.0    #> model1 -0.2       0.4"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"Simulation Example","text":"Now lets compare two models using Bayes Factors. use bridgesampling R package (Gronau et al. 2020). Looking , can read results data X times likely model assumes first mode rather second model. results suggest non-multilevel model preferred multilevel version model.","code":"######################################################################################################## #Bayes Factors lml.fit.reg.adapt.mlm.ve<-bridgesampling::bridge_sampler(fit.reg.adapt.mlm.ve,silent=TRUE,maxiter=5000) lml.fit.reg.adapt.ve<-bridgesampling::bridge_sampler(fit.reg.adapt.ve,silent=TRUE,maxiter=5000)  bridgesampling::bf(lml.fit.reg.adapt.ve,lml.fit.reg.adapt.mlm.ve) #> Estimated Bayes factor in favor of lml.fit.reg.adapt.ve over lml.fit.reg.adapt.mlm.ve: 1.77239"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"trace-for-estimated-parameters","dir":"Articles","previous_headings":"Model Comparison using Bayes Factors","what":"Trace for estimated parameters","title":"Simulation Example","text":"Let’s look traceplots two models, give visualization degree convergence.","code":"######################################################################################################## #Traceplots #4X10 rstan::traceplot(fit.reg.adapt.mlm.ve,pars = c(\"hl\",\"vy\",\"optima_bar\",\"beta_bar\",\"Rho\",\"sigma\",\"optima\",\"beta\")) rstan::traceplot(fit.reg.adapt.ve,pars = c(c(\"hl\",\"vy\",\"optima\",\"beta\",\"beta_e\")))"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"predictive-checks","dir":"Articles","previous_headings":"","what":"Predictive Checks","title":"Simulation Example","text":"Now lets run prior predictive checks posterior predictive checks two models. Prior predictive checks generate predictions model using prior distributions order assess whether priors appropriate – equivalent running model without data (Gabry et al. 2019). Posterior predictive checks generate data according posterior predictive distribution compare observed data assess fit model (Gabry et al. 2019). Blouch includes Stan functions run prior posterior predictive checks included models use demonstrated simulation empirical examples.","code":""},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"prior-predictive-checks","dir":"Articles","previous_headings":"Predictive Checks","what":"Prior predictive checks","title":"Simulation Example","text":"Prior predictive checks show generally reasonable fit data data generated priors, though larger true values suggest using larger scale priors may warranted","code":"fit.reg.adapt.mlm.ve.priorpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve_priorpc,data = dat,chains = 1,cores=1,iter =2000, algorithm=c(\"Fixed_param\")) #>  #> SAMPLING FOR MODEL 'blouchOU_reg_adapt_mlm_ve_priorpc' NOW (CHAIN 1). #> Chain 1: Iteration:    1 / 2000 [  0%]  (Sampling) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Sampling) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Sampling) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Sampling) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Sampling) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                4.821 seconds (Sampling) #> Chain 1:                4.821 seconds (Total) #> Chain 1: post<-rstan::extract(fit.reg.adapt.mlm.ve.priorpc) mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(4)  df<-data.frame(Y=post$Y_sim_obs[3,],X=dat$Y_obs,Regimes=regimes_tip) #Sample from the posterior - in this case the third sample  priorpc.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=0,slope=1,alpha=1)+ #Prior      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ggtitle(\"Prior Predictive Check\")+   ggplot2::ylab(\"Simulated Y\") + ggplot2::xlab(\"True Y\")+   ggplot2::scale_color_manual(name=\"Regimes\",values=mypal,labels=c('OU1', 'OU2', 'OU3', 'OU4'))   priorpc.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"posterior-predictive-checks","dir":"Articles","previous_headings":"Predictive Checks","what":"Posterior predictive checks","title":"Simulation Example","text":"Posterior predictive checks suggest model reasonably reproducing true values - pattern evident residuals.","code":"######################################################################################################## fit.reg.adapt.mlm.ve.postpc<-rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_mlm_ve_postpc,data = dat,chains = 1,cores=1,iter =4000)#, algorithm=c(\"Fixed_param\")) #>  #> SAMPLING FOR MODEL 'blouchOU_reg_adapt_mlm_ve_postpc' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00449 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 44.9 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup) #> Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup) #> Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup) #> Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup) #> Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup) #> Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup) #> Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling) #> Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling) #> Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling) #> Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling) #> Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 166.184 seconds (Warm-up) #> Chain 1:                148.914 seconds (Sampling) #> Chain 1:                315.098 seconds (Total) #> Chain 1: post<-rstan::extract(fit.reg.adapt.mlm.ve.postpc) mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(4)  df<-data.frame(Y=post$Y_sim_obs[3,],X=dat$Y_obs,Regimes=regimes_tip) #Sample from the posterior - in this case the third sample  postpc.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=0,slope=1,alpha=1)+ #Prior      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ggtitle(\"Posterior Predictive Check\")+   ggplot2::ylab(\"Simulated Y\") + ggplot2::xlab(\"True Y\")+   ggplot2::scale_color_manual(name=\"Regimes\",values=mypal,labels=c('OU1', 'OU2', 'OU3', 'OU4'))   postpc.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"prior-predictive-checks-1","dir":"Articles","previous_headings":"Predictive Checks","what":"Prior predictive checks","title":"Simulation Example","text":"Now lets non-multilevel model.  , prior predictive checks show generally reasonable fit data data generated priors, though larger true values suggest using larger scale priors may warranted","code":"fit.reg.adapt.ve.priorpc<- rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_ve_priorpc,data = dat,chains = 1,cores=1,iter =2000, algorithm=c(\"Fixed_param\")) #>  #> SAMPLING FOR MODEL 'blouchOU_reg_adapt_ve_priorpc' NOW (CHAIN 1). #> Chain 1: Iteration:    1 / 2000 [  0%]  (Sampling) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Sampling) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Sampling) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Sampling) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Sampling) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                4.906 seconds (Sampling) #> Chain 1:                4.906 seconds (Total) #> Chain 1: post<-rstan::extract(fit.reg.adapt.ve.priorpc) mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(4)  df<-data.frame(Y=post$Y_sim_obs[3,],X=dat$Y_obs,Regimes=regimes_tip) #Sample from the posterior - in this case the third sample  priorpc.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=0,slope=1,alpha=1)+ #Prior      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ggtitle(\"Prior Predictive Check\")+   ggplot2::ylab(\"Simulated Y\") + ggplot2::xlab(\"True Y\")+   ggplot2::scale_color_manual(name=\"Regimes\",values=mypal,labels=c('OU1', 'OU2', 'OU3', 'OU4'))   priorpc.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"posterior-predictive-checks-1","dir":"Articles","previous_headings":"Predictive Checks","what":"Posterior predictive checks","title":"Simulation Example","text":"Posterior predictive checks show model well fit generates data close approximation true dataset. real data analysis, comparison distribution differences true values predicted values might warranted, rather single simulation.","code":"######################################################################################################## fit.reg.adapt.ve.postpc<-rstan::sampling(object = blouch:::stanmodels$blouchOU_reg_adapt_ve_postpc,data = dat,chains = 1,cores=1,iter =2000)#, algorithm=c(\"Fixed_param\")) #>  #> SAMPLING FOR MODEL 'blouchOU_reg_adapt_ve_postpc' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.004395 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 43.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 85.984 seconds (Warm-up) #> Chain 1:                73.277 seconds (Sampling) #> Chain 1:                159.261 seconds (Total) #> Chain 1: post<-rstan::extract(fit.reg.adapt.ve.postpc) mypal <- ggsci::pal_aaas(\"default\", alpha = 1)(4)  df<-data.frame(Y=post$Y_sim_obs[3,],X=dat$Y_obs,Regimes=regimes_tip) #Sample from the posterior - in this case the third sample  postpc.plot<-ggplot2::ggplot()+     ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=as.factor(Regimes)))+   ggplot2::geom_abline(intercept=0,slope=1,alpha=1)+ #Prior      ggplot2::theme_bw()+   ggplot2::theme(     panel.grid.major = ggplot2::element_blank(),     panel.grid.minor = ggplot2::element_blank())+      ggplot2::ggtitle(\"Posterior Predictive Check\")+   ggplot2::ylab(\"Simulated Y\") + ggplot2::xlab(\"True Y\")+   ggplot2::scale_color_manual(name=\"Regimes\",values=mypal,labels=c('OU1', 'OU2', 'OU3', 'OU4'))   postpc.plot"},{"path":"https://mark-grabowski.github.io/blouch/articles/Simulation-Example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Simulation Example","text":"Arnold, C., L. J. Matthews, C. L. Nunn. 2010. 10kTrees Website: New Online Resource Primate Phylogeny. Evolutionary Anthropology 19:114-118. Gabry J., Simpson D., Vehtari ., Betancourt M., Gelman . 2019. Visualization Bayesian workflow. Journal Royal Statistical Society: Series (Statistics Society). 182:389–402. Gronau Q.F., Singmann H., Wagenmakers E.-J. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software. 92:1–29. Hansen T.F. 1997. Stabilizing Selection Comparative Analysis Adaptation. Evolution. 51:1341–1351. McElreath R. 2020. Statistical rethinking: Bayesian course examples R Stan. CRC press. Paradis E., Claude J., Strimmer K. 2004. APE: Analyses Phylogenetics Evolution R language. Bioinformatics. 20:289–290. Revell L.J. 2011. phytools: R package phylogenetic comparative biology (things). Methods Ecol. Evol. 3:217–223. Uyeda J.C., Harmon L.J. 2014. Novel Bayesian Method Inferring Interpreting Dynamics Adaptive Landscapes Phylogenetic Comparative Data. Systematic Biology. 63:902–918. Vehtari ., Gabry J., Magnusson M., Yao Y., Bürkner P.-C., Paananen T., Gelman . 2023. loo: Efficient leave-one-cross-validation WAIC Bayesian models.","code":""},{"path":"https://mark-grabowski.github.io/blouch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Grabowski. Author, maintainer.","code":""},{"path":"https://mark-grabowski.github.io/blouch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grabowski M (2023). blouch: BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses. https://github.com/mark-grabowski/blouch, https://mark-grabowski.github.io/blouch/.","code":"@Manual{,   title = {blouch: BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses},   author = {Mark Grabowski},   year = {2023},   note = {https://github.com/mark-grabowski/blouch, https://mark-grabowski.github.io/blouch/}, }"},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"blouch","dir":"","previous_headings":"","what":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","title":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"Blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses fits allometric adaptive models continuous trait evolution Bayesian framework based fixed continuous predictors incorporates measurement error. addition assigning biologically meaningful priors compared non-Bayesian approaches, Blouch includes new implementations Ornstein-Ulenbeck models including allowing varying effects (varying intercepts varying slopes), multilevel modeling, non-centered models. front-end component Blouch written R (R Core Team, 2015), nuts bolts written language Stan (Carpenter et al., 2017), allows estimation Bayesian models using Markov chain Monte Carlo (MCMC) methods based Hamilton Monte Carlo sampler.","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"just getting started Blouch recommend starting Simulation Example article available package website. Blouch based article currently review: Grabowski, M (revision). Blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"instalation-instructions","dir":"","previous_headings":"","what":"Instalation Instructions","title":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"install R Stan functions associated Blouch github, first install package devtools: install Blouch","code":"#install.packages(\"devtools\", repos = \"https://cran.ma.imperial.ac.uk/\") #library(devtools) #devtools::install_github(\"mark-grabowski/blouch\") #library(blouch)"},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"Please visit package website .","code":""},{"path":"https://mark-grabowski.github.io/blouch/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"BLOUCH: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. Stan: Probabilistic Programming Language. Journal Statistical Software 76:1–32.","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'blouch' package. — blouch-package","title":"The 'blouch' package. — blouch-package","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH) fits adaptive models continuous trait evolution Bayesian framework based categorical continuous predictors, incorporates measurement error.","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'blouch' package. — blouch-package","text":"Stan Development Team (2023). RStan: R interface Stan. R package version 2.26.22. https://mc-stan.org","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.adapt.prep - setup dat file to run in Blouch's adaptive model — blouch.adapt.prep","title":"blouch.adapt.prep - setup dat file to run in Blouch's adaptive model — blouch.adapt.prep","text":"blouch.adapt.prep - setup dat file run Blouch's adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.adapt.prep - setup dat file to run in Blouch's adaptive model — blouch.adapt.prep","text":"","code":"blouch.adapt.prep(trdata, Y, Y_error, X, X_error, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.adapt.prep - setup dat file to run in Blouch's adaptive model — blouch.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_adaptive Number adaptive traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.adapt.prep - setup dat file to run in Blouch's adaptive model — blouch.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.direct.adapt.prep - setup dat file to run in Blouch's direct effect and adpative model — blouch.direct.adapt.prep","title":"blouch.direct.adapt.prep - setup dat file to run in Blouch's direct effect and adpative model — blouch.direct.adapt.prep","text":"blouch.direct.adapt.prep - setup dat file run Blouch's direct effect adpative model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.direct.adapt.prep - setup dat file to run in Blouch's direct effect and adpative model — blouch.direct.adapt.prep","text":"","code":"blouch.direct.adapt.prep(trdata, Y, Y_error, X, X_error, Z_direct, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.direct.adapt.prep - setup dat file to run in Blouch's direct effect and adpative model — blouch.direct.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits Z_adaptive Vector containing number adaptive predictor traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.direct.adapt.prep - setup dat file to run in Blouch's direct effect and adpative model — blouch.direct.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.direct.prep - prep data to run in Stan's direct effect model — blouch.direct.prep","title":"blouch.direct.prep - prep data to run in Stan's direct effect model — blouch.direct.prep","text":"blouch.direct.prep - prep data run Stan's direct effect model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.direct.prep - prep data to run in Stan's direct effect model — blouch.direct.prep","text":"","code":"blouch.direct.prep(trdata, Y, Y_error, X, X_error, Z_direct)"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.direct.prep - prep data to run in Stan's direct effect model — blouch.direct.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Number direct effect traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.direct.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.direct.prep - prep data to run in Stan's direct effect model — blouch.direct.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.adapt.prep - function to setup dat file for Blouch's multi-optima adaptive model — blouch.reg.adapt.prep","title":"blouch.reg.adapt.prep - function to setup dat file for Blouch's multi-optima adaptive model — blouch.reg.adapt.prep","text":"blouch.reg.adapt.prep - function setup dat file Blouch's multi-optima adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.adapt.prep - function to setup dat file for Blouch's multi-optima adaptive model — blouch.reg.adapt.prep","text":"","code":"blouch.reg.adapt.prep(trdata, Y, Y_error, X, X_error, Z_adaptive, reg.column)"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.adapt.prep - function to setup dat file for Blouch's multi-optima adaptive model — blouch.reg.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.adapt.prep - function to setup dat file for Blouch's multi-optima adaptive model — blouch.reg.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.adapt.prep - function to setup dat file for Blouch's multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","title":"blouch.reg.direct.adapt.prep - function to setup dat file for Blouch's multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"blouch.reg.direct.adapt.prep - function setup dat file Blouch's multi-optima direct effect adaptive model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.adapt.prep - function to setup dat file for Blouch's multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"","code":"blouch.reg.direct.adapt.prep(   trdata,   Y,   Y_error,   X,   X_error,   Z_direct,   Z_adaptive,   reg.column )"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.adapt.prep - function to setup dat file for Blouch's multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits Z_adaptive Vector containing number adaptive predictor traits reg.column Vector containing name regime column treedata$dat","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.adapt.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.adapt.prep - function to setup dat file for Blouch's multi-optima direct effect adaptive model — blouch.reg.direct.adapt.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.direct.prep - function to setup dat file for Blouch's multi-optima direct effect model — blouch.reg.direct.prep","title":"blouch.reg.direct.prep - function to setup dat file for Blouch's multi-optima direct effect model — blouch.reg.direct.prep","text":"blouch.reg.direct.prep - function setup dat file Blouch's multi-optima direct effect model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.direct.prep - function to setup dat file for Blouch's multi-optima direct effect model — blouch.reg.direct.prep","text":"","code":"blouch.reg.direct.prep(trdata, Y, Y_error, X, X_error, Z_direct, reg.column)"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.direct.prep - function to setup dat file for Blouch's multi-optima direct effect model — blouch.reg.direct.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable X Vector containing name(s) column treedata containing predictor variable(s) X_error Vector containing name(s) column treedata containing error predictor variable(s) Z_direct Vector containing number direct effect predictor traits reg.column Vector containing name regime column treedata$dat","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.direct.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.direct.prep - function to setup dat file for Blouch's multi-optima direct effect model — blouch.reg.direct.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"blouch.reg.prep - setup dat file for Blouch's multi-optima model — blouch.reg.prep","title":"blouch.reg.prep - setup dat file for Blouch's multi-optima model — blouch.reg.prep","text":"blouch.reg.prep - setup dat file Blouch's multi-optima model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blouch.reg.prep - setup dat file for Blouch's multi-optima model — blouch.reg.prep","text":"","code":"blouch.reg.prep(trdata, Y, Y_error, reg.column, anc_maps = \"regimes\")"},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blouch.reg.prep - setup dat file for Blouch's multi-optima model — blouch.reg.prep","text":"trdata object class treedata function treeplyr Y Vector containing name column treedata containing response variable Y_error Vector containing name column treedata containing error response variable reg.column Vector containing name regime column treedata$dat anc_maps Vector containing name regime type - nodes \"regimes\" SIMMAP","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/blouch.reg.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blouch.reg.prep - setup dat file for Blouch's multi-optima model — blouch.reg.prep","text":"dat - list file containing objecs setup Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"calc_adaptive_V - Calculate adaptive variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"","code":"calc_adaptive_V(phy, a, sigma2_y, beta, sigma2_x, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"phy phylogney NEXUS format Rate parameter OU model sigma2_y Variance Y beta slope sigma2_x Brownian-motion parameter X Z_adaptive Number adaptive predictors","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_adaptive_V - Calculate adaptive variance/covariance matrix — calc_adaptive_V","text":"Variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_adaptive_dmX - calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","title":"calc_adaptive_dmX - calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"calc_adaptive_dmX - calculate adaptive predictor matrix Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_adaptive_dmX - calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"","code":"calc_adaptive_dmX(phy, a, X)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_adaptive_dmX - calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"phy Phylogeny NEXUS format Rate parameter OU model X Predictor","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_adaptive_dmX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_adaptive_dmX - calculate adaptive predictor matrix for Blouch — calc_adaptive_dmX","text":"Adaptive predictor matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_direct_V Calculate direct effect model V/CV matrix — calc_direct_V","title":"calc_direct_V Calculate direct effect model V/CV matrix — calc_direct_V","text":"calc_direct_V Calculate direct effect model V/CV matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_direct_V Calculate direct effect model V/CV matrix — calc_direct_V","text":"","code":"calc_direct_V(phy, sigma2_y, a)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_direct_V Calculate direct effect model V/CV matrix — calc_direct_V","text":"phy Phylogeny NEXUS format sigma2_y Variance Y Rate parameter OU model","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_direct_V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_direct_V Calculate direct effect model V/CV matrix — calc_direct_V","text":"Variance/Covariance marix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_mixed_dmX - calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","title":"calc_mixed_dmX - calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"calc_mixed_dmX - calculate mixed direct effect adaptive predictor matrix Blouch","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_mixed_dmX - calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"","code":"calc_mixed_dmX(phy, a, X, Z_direct, Z_adaptive)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_mixed_dmX - calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"phy Phylogeny NEXUS format Rate parameter OU model X Predictor Z_direct Number direct effect predictor traits Z_adaptive Number adaptive predictor traits","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_mixed_dmX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_mixed_dmX - calculate mixed direct effect and adaptive predictor matrix for Blouch — calc_mixed_dmX","text":"Predictor matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"calc_multiadaptive_cov_plot - Calcualte covariance matrix mult-adaptive covariance plot","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"","code":"calc_multiadaptive_cov_plot(a, sigma2_y, beta, x, Z_adaptive, n_reg)"},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"Rate parameter OU model sigma2_y Variance Y beta Slope parameter x X axis value Z_adaptive Number adaptive predictors n_reg Number regimes","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/calc_multiadaptive_cov_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_multiadaptive_cov_plot - Calcualte covariance matrix for mult-adaptive covariance plot — calc_multiadaptive_cov_plot","text":"Variance/covariance matrix","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":null,"dir":"Reference","previous_headings":"","what":"concat.factor - for internal Blouch use Thanks to user ","title":"concat.factor - for internal Blouch use Thanks to user ","text":"concat.factor - internal Blouch use Thanks user \"snaut\" stackoverflow, http://stackoverflow.com/users/1999873/snaut","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"concat.factor - for internal Blouch use Thanks to user ","text":"","code":"concat.factor(...)"},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"concat.factor - for internal Blouch use Thanks to user ","text":"... vector factors","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/concat.factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"concat.factor - for internal Blouch use Thanks to user ","text":"factor","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"lineage.constructor function - for internal Blouch use Construct a list with variables based on regime timing and placement — lineage.constructor","title":"lineage.constructor function - for internal Blouch use Construct a list with variables based on regime timing and placement — lineage.constructor","text":"lineage.constructor function - internal Blouch use Construct list variables based regime timing placement","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lineage.constructor function - for internal Blouch use Construct a list with variables based on regime timing and placement — lineage.constructor","text":"","code":"lineage.constructor(phy, e, anc_maps = \"regimes\", regimes)"},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lineage.constructor function - for internal Blouch use Construct a list with variables based on regime timing and placement — lineage.constructor","text":"phy phylogeny NEXUS format e Lineage number anc_maps Vector name regime placement type regimes Regimes factor format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lineage.constructor function - for internal Blouch use Construct a list with variables based on regime timing and placement — lineage.constructor","text":"list information individual regime lineages","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"lineage.nodes function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","title":"lineage.nodes function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"lineage.nodes function internal Blouch use Given certain node, return list parent nodes back root tree","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lineage.nodes function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"","code":"lineage.nodes(phy, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lineage.nodes function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"phy phylogeny NEXUS format x node interest","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/lineage.nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lineage.nodes function for internal Blouch use Given a certain node, return the list of all parent nodes back to the root of the tree — lineage.nodes","text":"list Given certain node, return list parent nodes back root tree","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":null,"dir":"Reference","previous_headings":"","what":"parent function - Returns parent node of offspring node given node number — parent","title":"parent function - Returns parent node of offspring node given node number — parent","text":"parent function - Returns parent node offspring node given node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parent function - Returns parent node of offspring node given node number — parent","text":"","code":"parent(phy, x)"},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parent function - Returns parent node of offspring node given node number — parent","text":"phy phylogeny phytools format x node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/parent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parent function - Returns parent node of offspring node given node number — parent","text":"value Returns parent node offspring node given node number","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":null,"dir":"Reference","previous_headings":"","what":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"set.converge.regimes - function assign regimes phylogeny","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"","code":"set.converge.regimes(trdata, regimes)"},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"trdata treeplyr format file regimes node numbers regimes shift","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/set.converge.regimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set.converge.regimes - function to assign regimes on a phylogeny — set.converge.regimes","text":"treeplyr format file new column dat tip regimes internal regime assignments node.labels","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":null,"dir":"Reference","previous_headings":"","what":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"Primate tree 301 tip species primate phylogeny Version 3 10K trees","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"","code":"tree.10K"},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"NEXUS Format dataset","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/tree.10K.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Primate tree with 301 tip species This is the primate phylogeny for Version 3 of 10K trees — tree.10K","text":"https://10ktrees.nunn-lab.org/","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":null,"dir":"Reference","previous_headings":"","what":"ts_fxn function - internal Blouch function to return tree data — ts_fxn","title":"ts_fxn function - internal Blouch function to return tree data — ts_fxn","text":"ts_fxn function - internal Blouch function return tree data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts_fxn function - internal Blouch function to return tree data — ts_fxn","text":"","code":"ts_fxn(phy)"},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ts_fxn function - internal Blouch function to return tree data — ts_fxn","text":"phy Phylogeny NEXUS format","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/ts_fxn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ts_fxn function - internal Blouch function to return tree data — ts_fxn","text":"list object tree data","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"weight.matrix - for internal Blouch use Wrapper to apply weights_regimes to each lineage — weight.matrix","title":"weight.matrix - for internal Blouch use Wrapper to apply weights_regimes to each lineage — weight.matrix","text":"weight.matrix - internal Blouch use Wrapper apply weights_regimes lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight.matrix - for internal Blouch use Wrapper to apply weights_regimes to each lineage — weight.matrix","text":"","code":"weight.matrix(phy, a, lineages)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight.matrix - for internal Blouch use Wrapper to apply weights_regimes to each lineage — weight.matrix","text":"phy phylogeny NEXUS format OU rate parameter lineages Vector regime values","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weight.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight.matrix - for internal Blouch use Wrapper to apply weights_regimes to each lineage — weight.matrix","text":"weights lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":null,"dir":"Reference","previous_headings":"","what":"weights_regimes - for internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","title":"weights_regimes - for internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"weights_regimes - internal Blouch use individual lineage, sum segments regimes","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weights_regimes - for internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"","code":"weights_regimes(a, lineage)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weights_regimes - for internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"Rate parameter OU model lineage Individual regime values lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_regimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weights_regimes - for internal Blouch use For individual lineage, sum up the segments in each regimes — weights_regimes","text":"Return named vector regimes weights individual lineage","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"weights_segments - for internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","title":"weights_segments - for internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"weights_segments - internal Blouch use individual lineage, determine weighting segment","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weights_segments - for internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"","code":"weights_segments(a, lineage)"},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weights_segments - for internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"Rate parameter OU model lineage Individual lineage regime values","code":""},{"path":"https://mark-grabowski.github.io/blouch/reference/weights_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weights_segments - for internal Blouch use For individual lineage, determine the weighting of each segment — weights_segments","text":"individual lineage, determine weighting segment","code":""}]
