---
title: "Simulation_Example"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Simulation_Example}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(blouch)
```


Load phylogeny and reduce to 100 tips
```{r}
########################################################################################################
#Four regimes with one adaptive trait and multiple slopes per optima but single alpha parameter
set.seed(10)

#tree.10K<-read.tree("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/Original Submission/Blouch Testing/Phylogeny/10KPrimateTree.tre")
#tree.10K<-read.tree("/Users/markgrabowski/Library/CloudStorage/GoogleDrive-mark.walter.grabowski@gmail.com/Other computers/My MacBook Pro/Documents/Academic/Research/Current Projects/Blouch project/Original Submission/Blouch Testing/Phylogeny/10KPrimateTree.tre")
N<-100 #Number of species
#N<-50 #Number of species
#set.seed(1) #Set seed to get same random species each time

phy <- ape::keep.tip(tree.10K,sample(tree.10K$tip.label)[1:N]) 
phy<-ape::multi2di(phy)

l.tree<-max(ape::branching.times(phy)) ## rescale tree to height 1
phy$edge.length<-phy$edge.length/l.tree 

#Set regimes - manually - 2 regimes
#Locate nodes
plot(phy,no.margin=TRUE,edge.width=2,cex=0.7)
ape::nodelabels(frame="none",adj=c(1.1,-0.4))
ape::tiplabels()

```

############################################################################################################
Paint Regimes on Tree
```{r}
#source("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Simulation Code/Functions/set.converge.regimes.R") #Macbook Pro
#source("/Users/markgrabowski/Library/CloudStorage/GoogleDrive-mark.walter.grabowski@gmail.com/Other computers/My MacBook Pro/Documents/Academic/Research/Current Projects/Blouch project/R1 blouch-testing branch/Simulation Code/Functions/set.converge.regimes.R") #Mac Studio

shifts<-c(164,192,104) #Location of nodes with regime shifts #100 species
#shifts<-c(83,72,65) #Location of nodes with regime shifts #50 species
trdata<-data.frame(phy$tip.label)
trdata<-treeplyr::make.treedata(phy,trdata)
trdata<-set.converge.regimes(trdata,shifts)


#Check if manual setting code worked
shifts.total<-c(trdata$dat$regimes,trdata$phy$node.label)
edge.regimes <- factor(shifts.total[trdata$phy$edge[,2]])
print(edge.regimes)
#Get ggplot colors used for plot to make on tree
gg_color_hue <- function(n) {
  hues = seq(15, 375, length=n+1)
  hcl(h=hues, l=65, c=100)[1:n]
}

reg.colors<-gg_color_hue(length(unique(trdata$dat$regimes)))

#reg.colors<-ggsci::pal_aaas("default",alpha=0.7)(4)
reg.colors<-ggsci::pal_npg(palette=c("nrc"),alpha=1)(4)

print(reg.colors)
plot(trdata$phy,edge.color = reg.colors[edge.regimes], edge.width = 1,show.tip.label=FALSE)
#tiplabels(pch=19,cex=1,col=reg.colors[factor(trdata$dat$regimes)])

reg_tips<-trdata$dat$regimes
reg_tips<-as.numeric(as.factor(reg_tips))

```

############################################################################################################
#Get info on phylogeny
```{r}
n<-length(trdata$phy$tip.label)
mrca1 <- ape::mrca(trdata$phy)
times <- ape::node.depth.edgelength(trdata$phy)
ta <- matrix(times[mrca1], nrow=n, dimnames = list(trdata$phy$tip.label, trdata$phy$tip.label))
T.term <- times[1:n]
tia <- times[1:n] - ta
tja <- t(tia)
tij <- tja + tia

regimes_internal <-trdata$phy$node.label
regimes_tip <- trdata$dat$regimes
regimes <- concat.factor(regimes_tip, regimes_internal)
anc_maps<-"regimes"
lineages <- lapply(1:n, function(e) lineage.constructor(trdata$phy, e, anc_maps, regimes, ace)) #Trace lineage from tips (n) to root and determine regimes of each node or branch


```


Set true parameters and simulate data
```{r}
#########################
hl<-0.1 #0.1, 0.25, 0.75 - testing options
a<-log(2)/hl
vy<-0.01 #0.25,0.5 - testing options
sigma2_y<-vy*(2*(log(2)/hl));

vX0<-0
vY0 <- 0
Sxx<-10 #Look at effects

ts<-ts_fxn(phy)
ta<-ts[[1]]
tij<-ts[[2]]
T_term<-ts[[3]]
tja<-ts[[4]]

X<-phytools::fastBM(phy,a=vX0,sig2=Sxx,internal=FALSE) #Simulate X BM variable on tree, with scaling 10
sigma2_x<-matrix(1,1,1)
Z_adaptive<-1
names(X)<-phy$tip.label
phytools::phenogram(phy,X,spread.labels=TRUE,spread.cost=c(1,0)) #Plot X data

optima_matrix<-weight.matrix(trdata$phy, a, lineages) #Slouch approach
pred_X<-calc_adaptive_dmX(a,T_term,X)
#optima<-c(2,1.5,1,0.5)
optima<-c(1,2,3,4)
beta<-c(0.75,0.5,0.35,0.25) #Two Optima/Two Slopes
#beta<-c(0.25,0.15,0.35,0.1) #Two Optima/Two Slopes

#beta<-data.frame(matrix(c(0.25,0.15,0.35,0.1),ncol=2,nrow=2)) #Two traits on columns, two regimes on vertical

mu<-matrix(NA,N,1)
for(i in 1:N){
  mu[i] = optima_matrix[i,]%*%optima+beta[reg_tips[i]]%*%pred_X[i]
  #mu[i] = optima_matrix[i,]%*%optima+pred_X[i,]%*%t(beta[reg_tips[i],])
  
}

n_reg<-length(unique(regimes))
V<-calc_adaptive_V(phy,a, sigma2_y, ta,  tij,  tja,  T_term,  beta,  sigma2_x, Z_adaptive, n_reg)
Y<-MASS::mvrnorm(n=1,mu,V)

```

Simulate measurement error
```{r}
##################################################################################################################
#Simulate errors - original Hansen setup
Z_X_error<-1 #Number of X traits with error
X_error<-matrix(0.01,nrow=N,ncol=Z_X_error)
X_error<-data.frame(X_error)
#names(X_error)<-c("Xd_error","Xa_error")
Y_error<-rep(0.01,N)
Y_with_error<-Y+rnorm(N,0,0.01)
X_with_error<-X+rnorm(N,0,0.01)

```

Use blouch.prep function to create formatted dat file to be used by blouch
```{r}
############################################################################################################
#Code using blouch.prep function
############################################################################################################
#Make trdata file
trdata$dat<-cbind(trdata$dat,data.frame(cbind(Y_with_error,Y_error,X_with_error,X_error)))
############################################################################################################
#source("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/R Setup Code/blouch.prep.R")
dat<-blouch.reg.adapt.prep(trdata,"Y_with_error","Y_error","X_with_error","X_error",Z_adaptive=1,"regimes")


```

Check out data
```{r}
############################################################################################################
#Prior Exploration Plot
lm.allometric<-summary(lm(dat$Y_obs~dat$X_obs))
lm.allometric$coefficients

#Prior vs. Posterior Plot
#library(ggsci)
#library(rethinking)

alpha.sims<-rnorm(100,lm.allometric$coefficients[1],1.25)
beta.sims<-rnorm(n=100,lm.allometric$coefficients[2],0.25)

df<-data.frame(Y=dat$Y_obs,X=dat$X_obs[,1])
names(df)<-c("Y","X")

slope.plot<-ggplot2::ggplot()+  
  ggplot2::geom_point(data=df,ggplot2::aes(y=Y,x=X,color=regimes_tip))+
  ggplot2::geom_abline(intercept=alpha.sims,slope=beta.sims,alpha=0.1)+
  ggplot2::theme_bw()+
  ggplot2::theme(
    panel.grid.major = ggplot2::element_blank(),
    panel.grid.minor = ggplot2::element_blank())+
  
  #ggtitle("Prior vs. Posterior for Intercept and Slope")+
  ggplot2::ylab("Y") + ggplot2::xlab("Adaptive Predictor")+
  ggsci::scale_color_npg()

slope.plot

```

```{r}
########################################################################################################
#Milestone 16 - mlm with varying effects
#Priors
#hl ~ lognormal(log(0.25),0.75);
#vy ~ exponential(20);
#optima_bar ~ normal(2.88,1.5);//Original 4 regimes
#beta_bar ~ normal(0.31,0.25); //Original 4 regimes
#Rho ~ lkj_corr(4);


#stan_model <- stan_model("blouchOU_reg_adapt_mlm_ve.stan")
fit.reg.adapt.mlm.ve<- rstan::sampling(stanmodels$blouchOU_reg_adapt_mlm_ve,data = dat,chains = 2,cores=2,iter =4000)
#print(fit.reg.adapt.mlm.ve,pars = c("hl","vy","optima_bar","beta_bar","Rho","sigma","optima","beta","beta_e"))
#plot(precis(fit.reg.adapt.mlm.ve,depth=3,pars = c("hl","vy","optima_bar","beta_bar","Rho","sigma","optima","beta","beta_e")))
post<-rstan::extract(fit.reg.adapt.mlm.ve)
```

```{r}
########################################################################################################
#Milestone 17 - mlm with varying effects - non-centered version
#Regime model with multiadaptive model with measurement error and varying effects - non-centered version
#Priors
#hl ~ lognormal(log(0.25),0.75);
#vy ~ exponential(20);
#L_Rho ~ lkj_corr_cholesky(2);
#sigma ~ normal(0,1);
#optima_bar ~ normal(2.88,1.5);//Original 4 regimes
#beta_bar ~ normal(0.31,0.25); //Original 4 regimes
#library(rstan)
#setwd("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models #Milestones/Finished Versions/")
#stanc("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models Milestones/Finished Versions/blouchOU_reg_adapt_mlm_ve_nc.stan")
#stan_model <- stan_model("blouchOU_reg_adapt_mlm_ve_nc.stan")
#fit.reg.adapt.mlm.ve.nc<- rstan::sampling(object = stan_model,data = dat,chains = 2,cores=2,iter =4000)
#print(fit.reg.adapt.mlm.ve.nc,pars = c("hl","vy","optima_bar","beta_bar","Rho","sigma","optima","beta","beta_e"))
#plot(precis(fit.reg.adapt.mlm.ve.nc,depth=3,pars = c("hl","vy","optima_bar","beta_bar","Rho","sigma","optima","beta","beta_e")))
#post<-extract(fit.reg.adapt.mlm.ve.nc)
########################################################################################################
#Milestone 15 - varying effects model
#Combination of regime model with adaptive model with measurement error and varying slopes
#Priors
#hl ~ lognormal(log(0.25),0.75);
#vy ~ exponential(20);
#optima ~ normal(2.88,1.5);//Original 4 regimes
#for(i in 1:(Z_adaptive)){
#  beta[,i] ~ normal(0.31,0.25);
#}

#stan_model <- stan_model("blouchOU_reg_adapt_ve.stan")
fit.reg.adapt.ve<- rstan::sampling(stanmodels$blouchOU_reg_adapt_ve,data = dat,chains = 2,cores=2,iter =4000)
print(fit.reg.adapt.ve,pars = c("hl","vy","optima","beta","beta_e"))
#plot(precis(fit.reg.adapt.ve,depth=3,pars = c("hl","vy","optima","beta","beta_e")))
post<-rstan::extract(fit.reg.adapt.ve)
########################################################################################################
#Milestone 10 - mlm with varying intercepts
#Multilevel model - multilevel optima with adaptive predictor and measurement error
#Priors
#hl ~ lognormal(log(0.25),0.75);
#vy ~ exponential(20);
#optima_bar ~ normal(2.88,0.5);
#beta ~ normal(0.31,0.1);
#sigma ~ normal(0,1);

#setwd("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models Milestones/Finished Versions/")
#stanc("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models Milestones/Finished Versions/blouchOU_reg_adapt_mlm_vi.stan")
#stan_model <- stan_model("blouchOU_reg_adapt_mlm_vi.stan")
#fit.reg.adapt.mlm.vi<- rstan::sampling(object = stan_model,data = dat,chains = 2,iter =4000,cores=2)
#print(fit.reg.adapt.mlm.vi,pars = c("hl","vy","optima","optima_bar","beta","sigma"))
#plot(precis(fit.reg.adapt.mlm.vi,depth=2,pars = c("hl","vy","optima","optima_bar","beta","sigma")))

#post<-extract(fit.reg.adapt.mlm.vi)

########################################################################################################
#Milestone 6 - basic model
#Regimes with adaptation model with measurement error
#Priors
#hl ~ lognormal(log(0.25),0.75);
#vy ~ exponential(20);
#optima ~ normal(2.88,0.5);
#beta ~ normal(0.31,0.1);

#setwd("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models Milestones/Finished Versions/")
#stanc("/Users/markgrabowski/Documents/Academic/Research/Current Projects/Blouch project/blouch/Stan Models Milestones/Finished Versions/blouchOU_reg_adapt.stan")
#stan_model <- stan_model("blouchOU_reg_adapt.stan")

#fit.reg.adapt<- rstan::sampling(object = stan_model,data = dat,chains = 2,iter =4000,cores=2)

#print(fit.reg.adapt,pars = c("hl","vy","optima","beta","beta_e"))
#post<-extract(fit.reg.adapt)

```
