// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_blouchOU_direct_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU_direct', line 24, column 2 to column 22)",
                                                      " (in 'blouchOU_direct', line 25, column 2 to column 24)",
                                                      " (in 'blouchOU_direct', line 26, column 2 to column 13)",
                                                      " (in 'blouchOU_direct', line 28, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 29, column 2 to column 14)",
                                                      " (in 'blouchOU_direct', line 30, column 2 to column 23)",
                                                      " (in 'blouchOU_direct', line 66, column 2 to column 16)",
                                                      " (in 'blouchOU_direct', line 67, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 68, column 2 to column 15)",
                                                      " (in 'blouchOU_direct', line 69, column 2 to column 11)",
                                                      " (in 'blouchOU_direct', line 70, column 2 to column 16)",
                                                      " (in 'blouchOU_direct', line 71, column 2 to column 15)",
                                                      " (in 'blouchOU_direct', line 72, column 2 to column 11)",
                                                      " (in 'blouchOU_direct', line 73, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 74, column 2 to column 37)",
                                                      " (in 'blouchOU_direct', line 75, column 2 to column 21)",
                                                      " (in 'blouchOU_direct', line 77, column 2 to column 34)",
                                                      " (in 'blouchOU_direct', line 78, column 2 to column 21)",
                                                      " (in 'blouchOU_direct', line 79, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 81, column 6 to column 34)",
                                                      " (in 'blouchOU_direct', line 82, column 6 to column 28)",
                                                      " (in 'blouchOU_direct', line 83, column 6 to column 34)",
                                                      " (in 'blouchOU_direct', line 84, column 6 to column 27)",
                                                      " (in 'blouchOU_direct', line 85, column 6 to column 79)",
                                                      " (in 'blouchOU_direct', line 80, column 15 to line 86, column 7)",
                                                      " (in 'blouchOU_direct', line 80, column 2 to line 86, column 7)",
                                                      " (in 'blouchOU_direct', line 33, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 33, column 2 to column 15)",
                                                      " (in 'blouchOU_direct', line 34, column 2 to column 9)",
                                                      " (in 'blouchOU_direct', line 35, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 35, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 35, column 2 to column 16)",
                                                      " (in 'blouchOU_direct', line 36, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 36, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 36, column 2 to column 18)",
                                                      " (in 'blouchOU_direct', line 38, column 2 to column 37)",
                                                      " (in 'blouchOU_direct', line 40, column 2 to column 46)",
                                                      " (in 'blouchOU_direct', line 42, column 2 to column 36)",
                                                      " (in 'blouchOU_direct', line 45, column 2 to column 40)",
                                                      " (in 'blouchOU_direct', line 46, column 2 to column 39)",
                                                      " (in 'blouchOU_direct', line 47, column 2 to column 16)",
                                                      " (in 'blouchOU_direct', line 48, column 2 to column 34)",
                                                      " (in 'blouchOU_direct', line 49, column 2 to column 30)",
                                                      " (in 'blouchOU_direct', line 52, column 4 to column 37)",
                                                      " (in 'blouchOU_direct', line 54, column 4 to column 55)",
                                                      " (in 'blouchOU_direct', line 50, column 22 to line 55, column 3)",
                                                      " (in 'blouchOU_direct', line 50, column 2 to line 55, column 3)",
                                                      " (in 'blouchOU_direct', line 56, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 61, column 2 to column 53)",
                                                      " (in 'blouchOU_direct', line 62, column 2 to column 44)",
                                                      " (in 'blouchOU_direct', line 14, column 2 to column 8)",
                                                      " (in 'blouchOU_direct', line 15, column 2 to column 15)",
                                                      " (in 'blouchOU_direct', line 16, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 16, column 2 to column 18)",
                                                      " (in 'blouchOU_direct', line 17, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 17, column 11 to column 19)",
                                                      " (in 'blouchOU_direct', line 17, column 2 to column 27)",
                                                      " (in 'blouchOU_direct', line 18, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 18, column 2 to column 20)",
                                                      " (in 'blouchOU_direct', line 19, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 19, column 11 to column 19)",
                                                      " (in 'blouchOU_direct', line 19, column 2 to column 29)",
                                                      " (in 'blouchOU_direct', line 20, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 20, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 20, column 2 to column 17)",
                                                      " (in 'blouchOU_direct', line 21, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 21, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 21, column 2 to column 18)",
                                                      " (in 'blouchOU_direct', line 25, column 9 to column 17)",
                                                      " (in 'blouchOU_direct', line 29, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 30, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 30, column 11 to column 19)",
                                                      " (in 'blouchOU_direct', line 66, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 66, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 67, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 67, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 68, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 73, column 9 to column 10)",
                                                      " (in 'blouchOU_direct', line 7, column 4 to column 24)",
                                                      " (in 'blouchOU_direct', line 8, column 11 to column 12)",
                                                      " (in 'blouchOU_direct', line 8, column 14 to column 15)",
                                                      " (in 'blouchOU_direct', line 8, column 4 to column 20)",
                                                      " (in 'blouchOU_direct', line 9, column 4 to column 72)",
                                                      " (in 'blouchOU_direct', line 10, column 4 to column 14)",
                                                      " (in 'blouchOU_direct', line 6, column 61 to line 11, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__,
       const T3__& tij_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& ta = to_ref(ta_arg__);
  const auto& tij = to_ref(tij_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 79;
    N = dims(ta)[(1 - 1)];
    current_statement__ = 80;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 81;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    current_statement__ = 83;
    assign(Vt, nil_index_list(),
      multiply((sigma2_y / (2 * a)),
        elt_multiply(subtract(1, stan::math::exp(multiply((-2 * a), ta))),
          stan::math::exp(multiply(-a, tij)))), "assigning variable Vt");
    current_statement__ = 84;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_V_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const T0__& a, const T1__& sigma2_y, const T2__& ta,
           const T3__& tij, std::ostream* pstream__)  const 
{
return calc_V(a, sigma2_y, ta, tij, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU_direct final : public model_base_crtp<model_blouchOU_direct> {
private:
  int N;
  int Z_direct;
  Eigen::Matrix<double, -1, 1> Y_obs;
  Eigen::Matrix<double, -1, -1> X_obs;
  Eigen::Matrix<double, -1, 1> Y_error;
  Eigen::Matrix<double, -1, -1> X_error;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, -1> tij;
 
public:
  ~model_blouchOU_direct() { }
  
  inline std::string model_name() const final { return "model_blouchOU_direct"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_blouchOU_direct(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU_direct_namespace::model_blouchOU_direct";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","Z_direct","int",
          context__.to_vec());
      Z_direct = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      Z_direct = context__.vals_i("Z_direct")[(1 - 1)];
      current_statement__ = 53;
      validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization","Y_obs","double",
          context__.to_vec(N));
      Y_obs = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 54;
        assign(Y_obs_flat__, nil_index_list(), context__.vals_r("Y_obs"),
          "assigning variable Y_obs_flat__");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 54;
          assign(Y_obs, cons_list(index_uni(sym1__), nil_index_list()),
            Y_obs_flat__[(pos__ - 1)], "assigning variable Y_obs");
          current_statement__ = 54;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 55;
      validate_non_negative_index("X_obs", "N", N);
      current_statement__ = 56;
      validate_non_negative_index("X_obs", "Z_direct", Z_direct);
      current_statement__ = 57;
      context__.validate_dims("data initialization","X_obs","double",
          context__.to_vec(N, Z_direct));
      X_obs = Eigen::Matrix<double, -1, -1>(N, Z_direct);
      stan::math::fill(X_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_obs_flat__;
        current_statement__ = 57;
        assign(X_obs_flat__, nil_index_list(), context__.vals_r("X_obs"),
          "assigning variable X_obs_flat__");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 57;
            assign(X_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_obs_flat__[(pos__ - 1)], "assigning variable X_obs");
            current_statement__ = 57;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 58;
      validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 59;
      context__.validate_dims("data initialization","Y_error","double",
          context__.to_vec(N));
      Y_error = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 59;
        assign(Y_error_flat__, nil_index_list(), context__.vals_r("Y_error"),
          "assigning variable Y_error_flat__");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 59;
          assign(Y_error, cons_list(index_uni(sym1__), nil_index_list()),
            Y_error_flat__[(pos__ - 1)], "assigning variable Y_error");
          current_statement__ = 59;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 60;
      validate_non_negative_index("X_error", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("X_error", "Z_direct", Z_direct);
      current_statement__ = 62;
      context__.validate_dims("data initialization","X_error","double",
          context__.to_vec(N, Z_direct));
      X_error = Eigen::Matrix<double, -1, -1>(N, Z_direct);
      stan::math::fill(X_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_error_flat__;
        current_statement__ = 62;
        assign(X_error_flat__, nil_index_list(), context__.vals_r("X_error"),
          "assigning variable X_error_flat__");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 62;
            assign(X_error,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_error_flat__[(pos__ - 1)], "assigning variable X_error");
            current_statement__ = 62;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 63;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 65;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 65;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 65;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 65;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 65;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 66;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 67;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 68;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 68;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 68;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 68;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 68;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 69;
      validate_non_negative_index("beta", "Z_direct", Z_direct);
      current_statement__ = 70;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 72;
      validate_non_negative_index("X", "Z_direct", Z_direct);
      current_statement__ = 73;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 75;
      validate_non_negative_index("inv_V", "N", N);
      current_statement__ = 76;
      validate_non_negative_index("inv_V", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 78;
      validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += Z_direct;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
      num_params_r__ += N * Z_direct;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU_direct_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ hl;
      hl = DUMMY_VAR__;
      
      current_statement__ = 1;
      hl = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        hl = stan::math::lb_constrain(hl, 0, lp__);
      } else {
        current_statement__ = 1;
        hl = stan::math::lb_constrain(hl, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(Z_direct);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta = in__.vector(Z_direct);
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      alpha = in__.scalar();
      local_scalar_t__ vy;
      vy = DUMMY_VAR__;
      
      current_statement__ = 4;
      vy = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        vy = stan::math::lb_constrain(vy, 0, lp__);
      } else {
        current_statement__ = 4;
        vy = stan::math::lb_constrain(vy, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> Y;
      Y = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Y, DUMMY_VAR__);
      
      current_statement__ = 5;
      Y = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, -1> X;
      X = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z_direct);
      stan::math::fill(X, DUMMY_VAR__);
      
      current_statement__ = 6;
      X = in__.matrix(N, Z_direct);
      {
        current_statement__ = 27;
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu, DUMMY_VAR__);
        
        local_scalar_t__ a;
        a = DUMMY_VAR__;
        
        current_statement__ = 30;
        validate_non_negative_index("V", "N", N);
        current_statement__ = 31;
        validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> V;
        V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(V, DUMMY_VAR__);
        
        current_statement__ = 33;
        validate_non_negative_index("L_v", "N", N);
        current_statement__ = 34;
        validate_non_negative_index("L_v", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_v;
        L_v = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L_v, DUMMY_VAR__);
        
        local_scalar_t__ sigma2_y;
        sigma2_y = DUMMY_VAR__;
        
        current_statement__ = 36;
        sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
        current_statement__ = 37;
        lp_accum__.add(lognormal_lpdf<false>(hl, stan::math::log(0.25), 0.25));
        current_statement__ = 38;
        lp_accum__.add(exponential_lpdf<false>(vy, 20));
        current_statement__ = 39;
        lp_accum__.add(normal_lpdf<false>(alpha, 2.0, 0.75));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<false>(beta, 0.25, 1.5));
        current_statement__ = 41;
        a = (stan::math::log(2) / hl);
        current_statement__ = 42;
        assign(V, nil_index_list(), calc_V(a, sigma2_y, ta, tij, pstream__),
          "assigning variable V");
        current_statement__ = 43;
        assign(L_v, nil_index_list(), cholesky_decompose(V),
          "assigning variable L_v");
        current_statement__ = 47;
        for (int i = 1; i <= Z_direct; ++i) {
          current_statement__ = 44;
          lp_accum__.add(
            normal_lpdf<false>(
              rvalue(X,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "X"), 0, 1));
          current_statement__ = 45;
          lp_accum__.add(
            normal_lpdf<false>(
              rvalue(X_obs,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "X_obs"),
              rvalue(X,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "X"),
              rvalue(X_error,
                cons_list(index_omni(),
                  cons_list(index_uni(i), nil_index_list())), "X_error")));}
        current_statement__ = 48;
        assign(mu, nil_index_list(), add(alpha, multiply(X, beta)),
          "assigning variable mu");
        current_statement__ = 49;
        lp_accum__.add(multi_normal_cholesky_lpdf<false>(Y, mu, L_v));
        current_statement__ = 50;
        lp_accum__.add(normal_lpdf<false>(Y_obs, Y, Y_error));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU_direct_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl = in__.scalar();
      current_statement__ = 1;
      hl = stan::math::lb_constrain(hl, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(Z_direct);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta = in__.vector(Z_direct);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = in__.scalar();
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      vy = in__.scalar();
      current_statement__ = 4;
      vy = stan::math::lb_constrain(vy, 0);
      Eigen::Matrix<double, -1, 1> Y;
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      Y = in__.vector(N);
      Eigen::Matrix<double, -1, -1> X;
      X = Eigen::Matrix<double, -1, -1>(N, Z_direct);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      X = in__.matrix(N, Z_direct);
      vars__.emplace_back(hl);
      for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      vars__.emplace_back(alpha);
      vars__.emplace_back(vy);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> V;
      V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> inv_V;
      inv_V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(inv_V, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      double g_i;
      g_i = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_ii;
      sigma_ii = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_i;
      sigma_i = std::numeric_limits<double>::quiet_NaN();
      
      double u_i;
      u_i = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      a = (stan::math::log(2) / hl);
      current_statement__ = 17;
      assign(V, nil_index_list(), calc_V(a, sigma2_y, ta, tij, pstream__),
        "assigning variable V");
      current_statement__ = 18;
      assign(inv_V, nil_index_list(), inverse(V), "assigning variable inv_V");
      current_statement__ = 19;
      assign(mu, nil_index_list(), add(alpha, multiply(X, beta)),
        "assigning variable mu");
      current_statement__ = 26;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        g_i = multiply(inv_V, subtract(Y_obs, mu))[(i - 1)];
        current_statement__ = 21;
        sigma_ii = rvalue(inv_V,
                     cons_list(index_uni(i),
                       cons_list(index_uni(i), nil_index_list())), "inv_V");
        current_statement__ = 22;
        u_i = (Y_obs[(i - 1)] - (g_i / sigma_ii));
        current_statement__ = 23;
        sigma_i = (1 / sigma_ii);
        current_statement__ = 24;
        assign(log_lik, cons_list(index_uni(i), nil_index_list()),
          ((-0.5 * stan::math::log(((2 * stan::math::pi()) * sigma_i))) -
            (0.5 * (square((Y_obs[(i - 1)] - u_i)) / sigma_i))),
          "assigning variable log_lik");}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(inv_V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "inv_V"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      vars__.emplace_back(g_i);
      vars__.emplace_back(sigma_ii);
      vars__.emplace_back(sigma_i);
      vars__.emplace_back(u_i);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      vars__.emplace_back(sigma2_y);
      vars__.emplace_back(a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl = context__.vals_r("hl")[(1 - 1)];
      double hl_free__;
      hl_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl_free__ = stan::math::lb_free(hl, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(Z_direct);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
          current_statement__ = 2;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      vy = context__.vals_r("vy")[(1 - 1)];
      double vy_free__;
      vy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      vy_free__ = stan::math::lb_free(vy, 0);
      Eigen::Matrix<double, -1, 1> Y;
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 5;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, -1> X;
      X = Eigen::Matrix<double, -1, -1>(N, Z_direct);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 6;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      vars__.emplace_back(hl_free__);
      for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      vars__.emplace_back(alpha);
      vars__.emplace_back(vy_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("hl");
    names__.emplace_back("beta");
    names__.emplace_back("alpha");
    names__.emplace_back("vy");
    names__.emplace_back("Y");
    names__.emplace_back("X");
    names__.emplace_back("V");
    names__.emplace_back("inv_V");
    names__.emplace_back("mu");
    names__.emplace_back("g_i");
    names__.emplace_back("sigma_ii");
    names__.emplace_back("sigma_i");
    names__.emplace_back("u_i");
    names__.emplace_back("log_lik");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("a");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Z_direct)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(Z_direct)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "hl");
    for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Y" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "inv_V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "g_i");
      param_names__.emplace_back(std::string() + "sigma_ii");
      param_names__.emplace_back(std::string() + "sigma_i");
      param_names__.emplace_back(std::string() + "u_i");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "hl");
    for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Y" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Z_direct; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "inv_V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "g_i");
      param_names__.emplace_back(std::string() + "sigma_ii");
      param_names__.emplace_back(std::string() + "sigma_i");
      param_names__.emplace_back(std::string() + "u_i");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << Z_direct << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z_direct << "},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"inv_V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"g_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_ii\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"u_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << Z_direct << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z_direct << "},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"inv_V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"g_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_ii\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"u_i\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU_direct_namespace::model_blouchOU_direct;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_direct_namespace::profiles__;
}
#endif
#endif
