// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_blouchMigAdpt_VE_MLM_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 133> locations_array__ =
  {" (found before start of program)",
  " (in 'blouchMigAdpt_VE_MLM', line 19, column 2 to column 24)",
  " (in 'blouchMigAdpt_VE_MLM', line 20, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 21, column 2 to column 17)",
  " (in 'blouchMigAdpt_VE_MLM', line 22, column 2 to column 28)",
  " (in 'blouchMigAdpt_VE_MLM', line 23, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 26, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 27, column 2 to column 34)",
  " (in 'blouchMigAdpt_VE_MLM', line 28, column 2 to column 29)",
  " (in 'blouchMigAdpt_VE_MLM', line 30, column 2 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 31, column 2 to column 30)",
  " (in 'blouchMigAdpt_VE_MLM', line 32, column 2 to column 25)",
  " (in 'blouchMigAdpt_VE_MLM', line 34, column 2 to column 40)",
  " (in 'blouchMigAdpt_VE_MLM', line 35, column 2 to column 36)",
  " (in 'blouchMigAdpt_VE_MLM', line 36, column 2 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 37, column 2 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 40, column 2 to column 16)",
  " (in 'blouchMigAdpt_VE_MLM', line 41, column 2 to column 22)",
  " (in 'blouchMigAdpt_VE_MLM', line 42, column 2 to column 15)",
  " (in 'blouchMigAdpt_VE_MLM', line 43, column 2 to column 20)",
  " (in 'blouchMigAdpt_VE_MLM', line 44, column 2 to column 60)",
  " (in 'blouchMigAdpt_VE_MLM', line 45, column 2 to column 48)",
  " (in 'blouchMigAdpt_VE_MLM', line 48, column 2 to column 59)",
  " (in 'blouchMigAdpt_VE_MLM', line 49, column 2 to column 83)",
  " (in 'blouchMigAdpt_VE_MLM', line 50, column 2 to column 67)",
  " (in 'blouchMigAdpt_VE_MLM', line 52, column 2 to column 24)",
  " (in 'blouchMigAdpt_VE_MLM', line 53, column 2 to column 30)",
  " (in 'blouchMigAdpt_VE_MLM', line 54, column 2 to column 26)",
  " (in 'blouchMigAdpt_VE_MLM', line 60, column 2 to column 53)",
  " (in 'blouchMigAdpt_VE_MLM', line 61, column 2 to column 45)",
  " (in 'blouchMigAdpt_VE_MLM', line 79, column 2 to column 42)",
  " (in 'blouchMigAdpt_VE_MLM', line 119, column 2 to column 20)",
  " (in 'blouchMigAdpt_VE_MLM', line 120, column 2 to column 18)",
  " (in 'blouchMigAdpt_VE_MLM', line 121, column 2 to column 39)",
  " (in 'blouchMigAdpt_VE_MLM', line 122, column 2 to column 31)",
  " (in 'blouchMigAdpt_VE_MLM', line 56, column 4 to column 27)",
  " (in 'blouchMigAdpt_VE_MLM', line 57, column 4 to column 39)",
  " (in 'blouchMigAdpt_VE_MLM', line 58, column 4 to column 31)",
  " (in 'blouchMigAdpt_VE_MLM', line 55, column 17 to line 59, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 55, column 2 to line 59, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 67, column 4 to column 37)",
  " (in 'blouchMigAdpt_VE_MLM', line 70, column 8 to column 20)",
  " (in 'blouchMigAdpt_VE_MLM', line 69, column 18 to line 71, column 7)",
  " (in 'blouchMigAdpt_VE_MLM', line 69, column 6 to line 71, column 7)",
  " (in 'blouchMigAdpt_VE_MLM', line 68, column 19 to line 72, column 5)",
  " (in 'blouchMigAdpt_VE_MLM', line 68, column 4 to line 72, column 5)",
  " (in 'blouchMigAdpt_VE_MLM', line 65, column 17 to line 73, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 65, column 2 to line 73, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 74, column 2 to column 59)",
  " (in 'blouchMigAdpt_VE_MLM', line 76, column 4 to column 67)",
  " (in 'blouchMigAdpt_VE_MLM', line 75, column 15 to line 77, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 75, column 2 to line 77, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 78, column 2 to column 133)",
  " (in 'blouchMigAdpt_VE_MLM', line 124, column 4 to column 27)",
  " (in 'blouchMigAdpt_VE_MLM', line 125, column 4 to column 63)",
  " (in 'blouchMigAdpt_VE_MLM', line 123, column 17 to line 126, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 123, column 2 to line 126, column 3)",
  " (in 'blouchMigAdpt_VE_MLM', line 83, column 2 to column 49)",
  " (in 'blouchMigAdpt_VE_MLM', line 84, column 2 to column 46)",
  " (in 'blouchMigAdpt_VE_MLM', line 98, column 2 to column 36)",
  " (in 'blouchMigAdpt_VE_MLM', line 99, column 2 to column 38)",
  " (in 'blouchMigAdpt_VE_MLM', line 99, column 34 to column 35)",
  " (in 'blouchMigAdpt_VE_MLM', line 100, column 2 to column 28)",
  " (in 'blouchMigAdpt_VE_MLM', line 101, column 2 to column 42)",
  " (in 'blouchMigAdpt_VE_MLM', line 102, column 2 to column 38)",
  " (in 'blouchMigAdpt_VE_MLM', line 103, column 2 to column 34)",
  " (in 'blouchMigAdpt_VE_MLM', line 104, column 2 to column 38)",
  " (in 'blouchMigAdpt_VE_MLM', line 105, column 2 to column 34)",
  " (in 'blouchMigAdpt_VE_MLM', line 106, column 2 to column 30)",
  " (in 'blouchMigAdpt_VE_MLM', line 108, column 2 to column 44)",
  " (in 'blouchMigAdpt_VE_MLM', line 109, column 2 to column 40)",
  " (in 'blouchMigAdpt_VE_MLM', line 111, column 2 to column 34)",
  " (in 'blouchMigAdpt_VE_MLM', line 112, column 2 to column 34)",
  " (in 'blouchMigAdpt_VE_MLM', line 115, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 115, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 115, column 2 to column 51)",
  " (in 'blouchMigAdpt_VE_MLM', line 116, column 2 to column 49)",
  " (in 'blouchMigAdpt_VE_MLM', line 5, column 2 to column 17)",
  " (in 'blouchMigAdpt_VE_MLM', line 6, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 7, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 7, column 2 to column 18)",
  " (in 'blouchMigAdpt_VE_MLM', line 8, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 8, column 2 to column 18)",
  " (in 'blouchMigAdpt_VE_MLM', line 9, column 18 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 9, column 2 to column 29)",
  " (in 'blouchMigAdpt_VE_MLM', line 10, column 18 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 10, column 2 to column 29)",
  " (in 'blouchMigAdpt_VE_MLM', line 11, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 11, column 11 to column 12)",
  " (in 'blouchMigAdpt_VE_MLM', line 11, column 2 to column 16)",
  " (in 'blouchMigAdpt_VE_MLM', line 12, column 2 to column 24)",
  " (in 'blouchMigAdpt_VE_MLM', line 13, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 14, column 2 to column 21)",
  " (in 'blouchMigAdpt_VE_MLM', line 15, column 2 to column 23)",
  " (in 'blouchMigAdpt_VE_MLM', line 16, column 8 to column 9)",
  " (in 'blouchMigAdpt_VE_MLM', line 16, column 2 to column 50)",
  " (in 'blouchMigAdpt_VE_MLM', line 19, column 9 to column 16)",
  " (in 'blouchMigAdpt_VE_MLM', line 20, column 9 to column 16)",
  " (in 'blouchMigAdpt_VE_MLM', line 23, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 28, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 32, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 34, column 23 to column 24)",
  " (in 'blouchMigAdpt_VE_MLM', line 35, column 23 to column 24)",
  " (in 'blouchMigAdpt_VE_MLM', line 36, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 37, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 40, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 40, column 11 to column 12)",
  " (in 'blouchMigAdpt_VE_MLM', line 41, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 41, column 11 to column 12)",
  " (in 'blouchMigAdpt_VE_MLM', line 42, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 43, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 43, column 11 to column 12)",
  " (in 'blouchMigAdpt_VE_MLM', line 44, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 44, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 45, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 45, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 48, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 49, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 50, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 52, column 18 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 53, column 18 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 54, column 18 to column 19)",
  " (in 'blouchMigAdpt_VE_MLM', line 60, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 60, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 61, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 61, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 79, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 119, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 120, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 121, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 121, column 12 to column 13)",
  " (in 'blouchMigAdpt_VE_MLM', line 122, column 9 to column 10)",
  " (in 'blouchMigAdpt_VE_MLM', line 122, column 12 to column 13)"};
#include <stan_meta_header.hpp>
class model_blouchMigAdpt_VE_MLM final : public model_base_crtp<model_blouchMigAdpt_VE_MLM> {
private:
  int N;
  int n_theta;
  Eigen::Matrix<double,-1,1> z_obs_data__;
  Eigen::Matrix<double,-1,1> x_obs_data__;
  Eigen::Matrix<double,-1,1> z_error_data__;
  Eigen::Matrix<double,-1,1> x_error_data__;
  Eigen::Matrix<double,-1,-1> M_data__;
  Eigen::Matrix<double,-1,1> alpha_prior_data__;
  Eigen::Matrix<double,-1,1> beta_prior_data__;
  Eigen::Matrix<double,-1,1> es_prior_data__;
  double nu_cor;
  std::vector<int> reg_assign;
  Eigen::Map<Eigen::Matrix<double,-1,1>> z_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> z_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> M{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> es_prior{nullptr, 0};
public:
  ~model_blouchMigAdpt_VE_MLM() {}
  model_blouchMigAdpt_VE_MLM(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_blouchMigAdpt_VE_MLM_namespace::model_blouchMigAdpt_VE_MLM";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 77;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 77;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "n_theta", "int",
        std::vector<size_t>{});
      n_theta = std::numeric_limits<int>::min();
      current_statement__ = 78;
      n_theta = context__.vals_i("n_theta")[(1 - 1)];
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "n_theta", n_theta, 1);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("z_obs", "N", N);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "z_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      z_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&z_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(z_obs_data__.data(), N);
      {
        std::vector<local_scalar_t__> z_obs_flat__;
        current_statement__ = 80;
        z_obs_flat__ = context__.vals_r("z_obs");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 80;
          stan::model::assign(z_obs, z_obs_flat__[(pos__ - 1)],
            "assigning variable z_obs", stan::model::index_uni(sym1__));
          current_statement__ = 80;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 81;
      stan::math::validate_non_negative_index("x_obs", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "x_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&x_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(x_obs_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_obs_flat__;
        current_statement__ = 82;
        x_obs_flat__ = context__.vals_r("x_obs");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          stan::model::assign(x_obs, x_obs_flat__[(pos__ - 1)],
            "assigning variable x_obs", stan::model::index_uni(sym1__));
          current_statement__ = 82;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 83;
      stan::math::validate_non_negative_index("z_error", "N", N);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "z_error", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      z_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&z_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(z_error_data__.data(), N);
      {
        std::vector<local_scalar_t__> z_error_flat__;
        current_statement__ = 84;
        z_error_flat__ = context__.vals_r("z_error");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 84;
          stan::model::assign(z_error, z_error_flat__[(pos__ - 1)],
            "assigning variable z_error", stan::model::index_uni(sym1__));
          current_statement__ = 84;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "z_error", z_error, 0);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("x_error", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "x_error", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&x_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(x_error_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_error_flat__;
        current_statement__ = 86;
        x_error_flat__ = context__.vals_r("x_error");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 86;
          stan::model::assign(x_error, x_error_flat__[(pos__ - 1)],
            "assigning variable x_error", stan::model::index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "x_error", x_error, 0);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("M", "N", N);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("M", "N", N);
      current_statement__ = 89;
      context__.validate_dims("data initialization", "M", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      M_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&M) Eigen::Map<Eigen::Matrix<double,-1,-1>>(M_data__.data(), N, N);
      {
        std::vector<local_scalar_t__> M_flat__;
        current_statement__ = 89;
        M_flat__ = context__.vals_r("M");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 89;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 89;
            stan::model::assign(M, M_flat__[(pos__ - 1)],
              "assigning variable M", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 89;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 90;
      context__.validate_dims("data initialization", "alpha_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      alpha_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                             std::numeric_limits<double>::quiet_NaN());
      new (&alpha_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> alpha_prior_flat__;
        current_statement__ = 90;
        alpha_prior_flat__ = context__.vals_r("alpha_prior");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 90;
          stan::model::assign(alpha_prior, alpha_prior_flat__[(pos__ - 1)],
            "assigning variable alpha_prior", stan::model::index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization", "beta_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      beta_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> beta_prior_flat__;
        current_statement__ = 91;
        beta_prior_flat__ = context__.vals_r("beta_prior");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 91;
          stan::model::assign(beta_prior, beta_prior_flat__[(pos__ - 1)],
            "assigning variable beta_prior", stan::model::index_uni(sym1__));
          current_statement__ = 91;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization", "es_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      es_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&es_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(es_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> es_prior_flat__;
        current_statement__ = 92;
        es_prior_flat__ = context__.vals_r("es_prior");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 92;
          stan::model::assign(es_prior, es_prior_flat__[(pos__ - 1)],
            "assigning variable es_prior", stan::model::index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization", "nu_cor", "double",
        std::vector<size_t>{});
      nu_cor = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 93;
      nu_cor = context__.vals_r("nu_cor")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "nu_cor", nu_cor, 1);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("reg_assign", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "reg_assign", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      reg_assign = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 95;
      reg_assign = context__.vals_i("reg_assign");
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "reg_assign",
        reg_assign, 1);
      current_statement__ = 95;
      stan::math::check_less_or_equal(function__, "reg_assign", reg_assign,
        n_theta);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("alpha", "n_theta", n_theta);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("beta", "n_theta", n_theta);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("log_es_raw", "N", N);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("log_sd_theta_raw", "N", N);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("log_sd_e_raw", "N", N);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("L_Omega_theta", "N", N);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("L_Omega_theta", "N", N);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("L_Omega_e", "N", N);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("L_Omega_e", "N", N);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("z_true", "N", N);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("x_true", "N", N);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("A", "N", N);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("A", "N", N);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("AM_term", "N", N);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("AM_term", "N", N);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("Sigma", "N", N);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("Sigma", "N", N);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("Omega_theta", "N", N);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("Omega_theta", "N", N);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("Omega_e", "N", N);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("Omega_e", "N", N);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("log_es", "N", N);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("log_sd_theta", "N", N);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("log_sd_e", "N", N);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("es", "N", N);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("sd_theta", "N", N);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("sd_e", "N", N);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("diag_sd_theta", "N", N);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("diag_sd_theta", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("diag_sd_e", "N", N);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("diag_sd_e", "N", N);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("mu_eq", "N", N);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("var_z", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("Cor_theta", "N", N);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("Cor_theta", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("Cor_e", "N", N);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("Cor_e", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_theta + n_theta + 1 + 1 + N + 1 + 1 + N + 1 + 1 + N +
      ((N * (N - 1)) / 2) + ((N * (N - 1)) / 2) + N + N;
  }
  inline std::string model_name() const final {
    return "model_blouchMigAdpt_VE_MLM";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchMigAdpt_VE_MLM_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta);
      local_scalar_t__ mu_log_es = DUMMY_VAR__;
      current_statement__ = 3;
      mu_log_es = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_log_es = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_log_es = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_es_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      log_es_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ mu_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 6;
      mu_log_sd_theta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_log_sd_theta = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 8;
      log_sd_theta_raw = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ mu_log_sd_e = DUMMY_VAR__;
      current_statement__ = 9;
      mu_log_sd_e = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_log_sd_e = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_log_sd_e = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_e_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 11;
      log_sd_e_raw = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 12;
      L_Omega_theta = in__.template read_constrain_cholesky_factor_corr<
                        Eigen::Matrix<local_scalar_t__,-1,-1>,
                        jacobian__>(lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 13;
      L_Omega_e = in__.template read_constrain_cholesky_factor_corr<
                    Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                    N);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 14;
      z_true = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 15;
      x_true = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,-1> A =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> AM_term =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Omega_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(Omega_theta,
        stan::math::multiply(L_Omega_theta,
          stan::math::transpose(L_Omega_theta)),
        "assigning variable Omega_theta");
      Eigen::Matrix<local_scalar_t__,-1,-1> Omega_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 21;
      stan::model::assign(Omega_e,
        stan::math::multiply(L_Omega_e, stan::math::transpose(L_Omega_e)),
        "assigning variable Omega_e");
      Eigen::Matrix<local_scalar_t__,-1,1> log_es =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(log_es,
        stan::math::add(mu_log_es,
          stan::math::multiply(log_es_raw, sigma_log_es)),
        "assigning variable log_es");
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(log_sd_theta,
        stan::math::add(mu_log_sd_theta,
          stan::math::multiply(log_sd_theta_raw, sigma_log_sd_theta)),
        "assigning variable log_sd_theta");
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_e =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 24;
      stan::model::assign(log_sd_e,
        stan::math::add(mu_log_sd_e,
          stan::math::multiply(log_sd_e_raw, sigma_log_sd_e)),
        "assigning variable log_sd_e");
      Eigen::Matrix<local_scalar_t__,-1,1> es =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_e =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 39;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 35;
        stan::model::assign(es,
          stan::math::exp(
            stan::model::rvalue(log_es, "log_es", stan::model::index_uni(i))),
          "assigning variable es", stan::model::index_uni(i));
        current_statement__ = 36;
        stan::model::assign(sd_theta,
          stan::math::exp(
            stan::model::rvalue(log_sd_theta, "log_sd_theta",
              stan::model::index_uni(i))), "assigning variable sd_theta",
          stan::model::index_uni(i));
        current_statement__ = 37;
        stan::model::assign(sd_e,
          stan::math::exp(
            stan::model::rvalue(log_sd_e, "log_sd_e",
              stan::model::index_uni(i))), "assigning variable sd_e",
          stan::model::index_uni(i));
      }
      Eigen::Matrix<local_scalar_t__,-1,-1> diag_sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 28;
      stan::model::assign(diag_sd_theta, stan::math::diag_matrix(sd_theta),
        "assigning variable diag_sd_theta");
      Eigen::Matrix<local_scalar_t__,-1,-1> diag_sd_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(diag_sd_e, stan::math::diag_matrix(sd_e),
        "assigning variable diag_sd_e");
      current_statement__ = 47;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 40;
        stan::model::assign(A,
          (-stan::model::rvalue(es, "es", stan::model::index_uni(i)) * (1 +
          stan::model::rvalue(M, "M", stan::model::index_uni(i),
            stan::model::index_uni(i)))), "assigning variable A",
          stan::model::index_uni(i), stan::model::index_uni(i));
        current_statement__ = 45;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 43;
          if (stan::math::logical_neq(i, j)) {
            current_statement__ = 41;
            stan::model::assign(A, 0, "assigning variable A",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 48;
      stan::model::assign(AM_term,
        stan::math::add(
          stan::math::diag_matrix(stan::math::rep_vector(1, N)),
          stan::math::multiply(stan::math::inverse(A), M)),
        "assigning variable AM_term");
      current_statement__ = 51;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 49;
        stan::model::assign(mu,
          (stan::model::rvalue(alpha, "alpha",
             stan::model::index_uni(
               stan::model::rvalue(reg_assign, "reg_assign",
                 stan::model::index_uni(i)))) +
          (stan::model::rvalue(x_true, "x_true", stan::model::index_uni(i)) *
          stan::model::rvalue(beta, "beta",
            stan::model::index_uni(
              stan::model::rvalue(reg_assign, "reg_assign",
                stan::model::index_uni(i)))))), "assigning variable mu",
          stan::model::index_uni(i));
      }
      current_statement__ = 52;
      stan::model::assign(Sigma,
        stan::math::add(
          stan::math::multiply(
            stan::math::multiply(stan::math::inverse(AM_term),
              stan::math::multiply(
                stan::math::multiply(diag_sd_theta, Omega_theta),
                diag_sd_theta)),
            stan::math::transpose(stan::math::inverse(AM_term))),
          stan::math::multiply(stan::math::multiply(diag_sd_e, Omega_e),
            diag_sd_e)), "assigning variable Sigma");
      Eigen::Matrix<local_scalar_t__,-1,1> mu_eq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 30;
      stan::model::assign(mu_eq,
        stan::math::multiply(stan::math::inverse(AM_term), mu),
        "assigning variable mu_eq");
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "es", es, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "sd_theta", sd_theta, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "sd_e", sd_e, 0);
      {
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha,
                         stan::model::rvalue(alpha_prior, "alpha_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(alpha_prior, "alpha_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta,
                         stan::model::rvalue(beta_prior, "beta_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(beta_prior, "beta_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_log_es,
                         stan::math::log(0.5), 0.3));
        current_statement__ = 60;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_log_es, 0,
                         0.25));
        current_statement__ = 61;
        if (stan::math::logical_lt(sigma_log_es, 0)) {
          current_statement__ = 61;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 61;
          lp_accum__.add(-stan::math::normal_lccdf(0, 0, 0.25));
        }
        current_statement__ = 62;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_es_raw));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_log_sd_theta,
                         stan::math::log(0.1), 0.5));
        current_statement__ = 64;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_log_sd_theta, 2));
        current_statement__ = 65;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_sd_theta_raw));
        current_statement__ = 66;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_log_sd_e,
                         stan::math::log(0.1), 0.5));
        current_statement__ = 67;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigma_log_sd_e,
                         2));
        current_statement__ = 68;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_sd_e_raw));
        current_statement__ = 69;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                         L_Omega_theta, nu_cor));
        current_statement__ = 70;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                         L_Omega_e, nu_cor));
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x_obs, x_true,
                         x_error));
        current_statement__ = 72;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_obs, z_true,
                         z_error));
        current_statement__ = 73;
        stan::math::validate_non_negative_index("L_Sigma", "N", N);
        current_statement__ = 74;
        stan::math::validate_non_negative_index("L_Sigma", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_Sigma =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 75;
        stan::model::assign(L_Sigma, stan::math::cholesky_decompose(Sigma),
          "assigning variable L_Sigma");
        current_statement__ = 76;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(
                         z_true, mu_eq, L_Sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_blouchMigAdpt_VE_MLM_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(n_theta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(n_theta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta);
      double mu_log_es = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_log_es = in__.template read<local_scalar_t__>();
      double sigma_log_es = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_log_es = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> log_es_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      log_es_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double mu_log_sd_theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      mu_log_sd_theta = in__.template read<local_scalar_t__>();
      double sigma_log_sd_theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma_log_sd_theta = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> log_sd_theta_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      log_sd_theta_raw = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double mu_log_sd_e = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      mu_log_sd_e = in__.template read<local_scalar_t__>();
      double sigma_log_sd_e = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sigma_log_sd_e = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> log_sd_e_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      log_sd_e_raw = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,-1> L_Omega_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      L_Omega_theta = in__.template read_constrain_cholesky_factor_corr<
                        Eigen::Matrix<local_scalar_t__,-1,-1>,
                        jacobian__>(lp__, N);
      Eigen::Matrix<double,-1,-1> L_Omega_e =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      L_Omega_e = in__.template read_constrain_cholesky_factor_corr<
                    Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                    N);
      Eigen::Matrix<double,-1,1> z_true =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      z_true = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,1> x_true =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      x_true = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,-1> A =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> AM_term =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega_e =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_es =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_sd_theta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_sd_e =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> es =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sd_theta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sd_e =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> diag_sd_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> diag_sd_e =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_eq =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(beta);
      out__.write(mu_log_es);
      out__.write(sigma_log_es);
      out__.write(log_es_raw);
      out__.write(mu_log_sd_theta);
      out__.write(sigma_log_sd_theta);
      out__.write(log_sd_theta_raw);
      out__.write(mu_log_sd_e);
      out__.write(sigma_log_sd_e);
      out__.write(log_sd_e_raw);
      out__.write(L_Omega_theta);
      out__.write(L_Omega_e);
      out__.write(z_true);
      out__.write(x_true);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 20;
      stan::model::assign(Omega_theta,
        stan::math::multiply(L_Omega_theta,
          stan::math::transpose(L_Omega_theta)),
        "assigning variable Omega_theta");
      current_statement__ = 21;
      stan::model::assign(Omega_e,
        stan::math::multiply(L_Omega_e, stan::math::transpose(L_Omega_e)),
        "assigning variable Omega_e");
      current_statement__ = 22;
      stan::model::assign(log_es,
        stan::math::add(mu_log_es,
          stan::math::multiply(log_es_raw, sigma_log_es)),
        "assigning variable log_es");
      current_statement__ = 23;
      stan::model::assign(log_sd_theta,
        stan::math::add(mu_log_sd_theta,
          stan::math::multiply(log_sd_theta_raw, sigma_log_sd_theta)),
        "assigning variable log_sd_theta");
      current_statement__ = 24;
      stan::model::assign(log_sd_e,
        stan::math::add(mu_log_sd_e,
          stan::math::multiply(log_sd_e_raw, sigma_log_sd_e)),
        "assigning variable log_sd_e");
      current_statement__ = 39;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 35;
        stan::model::assign(es,
          stan::math::exp(
            stan::model::rvalue(log_es, "log_es", stan::model::index_uni(i))),
          "assigning variable es", stan::model::index_uni(i));
        current_statement__ = 36;
        stan::model::assign(sd_theta,
          stan::math::exp(
            stan::model::rvalue(log_sd_theta, "log_sd_theta",
              stan::model::index_uni(i))), "assigning variable sd_theta",
          stan::model::index_uni(i));
        current_statement__ = 37;
        stan::model::assign(sd_e,
          stan::math::exp(
            stan::model::rvalue(log_sd_e, "log_sd_e",
              stan::model::index_uni(i))), "assigning variable sd_e",
          stan::model::index_uni(i));
      }
      current_statement__ = 28;
      stan::model::assign(diag_sd_theta, stan::math::diag_matrix(sd_theta),
        "assigning variable diag_sd_theta");
      current_statement__ = 29;
      stan::model::assign(diag_sd_e, stan::math::diag_matrix(sd_e),
        "assigning variable diag_sd_e");
      current_statement__ = 47;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 40;
        stan::model::assign(A,
          (-stan::model::rvalue(es, "es", stan::model::index_uni(i)) * (1 +
          stan::model::rvalue(M, "M", stan::model::index_uni(i),
            stan::model::index_uni(i)))), "assigning variable A",
          stan::model::index_uni(i), stan::model::index_uni(i));
        current_statement__ = 45;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 43;
          if (stan::math::logical_neq(i, j)) {
            current_statement__ = 41;
            stan::model::assign(A, 0, "assigning variable A",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 48;
      stan::model::assign(AM_term,
        stan::math::add(
          stan::math::diag_matrix(stan::math::rep_vector(1, N)),
          stan::math::multiply(stan::math::inverse(A), M)),
        "assigning variable AM_term");
      current_statement__ = 51;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 49;
        stan::model::assign(mu,
          (stan::model::rvalue(alpha, "alpha",
             stan::model::index_uni(
               stan::model::rvalue(reg_assign, "reg_assign",
                 stan::model::index_uni(i)))) +
          (stan::model::rvalue(x_true, "x_true", stan::model::index_uni(i)) *
          stan::model::rvalue(beta, "beta",
            stan::model::index_uni(
              stan::model::rvalue(reg_assign, "reg_assign",
                stan::model::index_uni(i)))))), "assigning variable mu",
          stan::model::index_uni(i));
      }
      current_statement__ = 52;
      stan::model::assign(Sigma,
        stan::math::add(
          stan::math::multiply(
            stan::math::multiply(stan::math::inverse(AM_term),
              stan::math::multiply(
                stan::math::multiply(diag_sd_theta, Omega_theta),
                diag_sd_theta)),
            stan::math::transpose(stan::math::inverse(AM_term))),
          stan::math::multiply(stan::math::multiply(diag_sd_e, Omega_e),
            diag_sd_e)), "assigning variable Sigma");
      current_statement__ = 30;
      stan::model::assign(mu_eq,
        stan::math::multiply(stan::math::inverse(AM_term), mu),
        "assigning variable mu_eq");
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "es", es, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "sd_theta", sd_theta, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "sd_e", sd_e, 0);
      if (emit_transformed_parameters__) {
        out__.write(A);
        out__.write(AM_term);
        out__.write(mu);
        out__.write(Sigma);
        out__.write(Omega_theta);
        out__.write(Omega_e);
        out__.write(log_es);
        out__.write(log_sd_theta);
        out__.write(log_sd_e);
        out__.write(es);
        out__.write(sd_theta);
        out__.write(sd_e);
        out__.write(diag_sd_theta);
        out__.write(diag_sd_e);
        out__.write(mu_eq);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> var_z =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Cor_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 33;
      stan::model::assign(Cor_theta, Omega_theta,
        "assigning variable Cor_theta");
      Eigen::Matrix<double,-1,-1> Cor_e =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 34;
      stan::model::assign(Cor_e, Omega_e, "assigning variable Cor_e");
      current_statement__ = 56;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 53;
        stan::model::assign(var_z,
          stan::model::rvalue(Sigma, "Sigma", stan::model::index_uni(n),
            stan::model::index_uni(n)), "assigning variable var_z",
          stan::model::index_uni(n));
        current_statement__ = 54;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(z_obs, "z_obs", stan::model::index_uni(n)),
            stan::model::rvalue(z_true, "z_true", stan::model::index_uni(n)),
            stan::model::rvalue(z_error, "z_error", stan::model::index_uni(n))),
          "assigning variable log_lik", stan::model::index_uni(n));
      }
      out__.write(log_lik);
      out__.write(var_z);
      out__.write(Cor_theta);
      out__.write(Cor_e);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_theta),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ mu_log_es = DUMMY_VAR__;
      current_statement__ = 3;
      mu_log_es = in__.read<local_scalar_t__>();
      out__.write(mu_log_es);
      local_scalar_t__ sigma_log_es = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_log_es = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_log_es);
      Eigen::Matrix<local_scalar_t__,-1,1> log_es_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(log_es_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable log_es_raw");
      out__.write(log_es_raw);
      local_scalar_t__ mu_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 6;
      mu_log_sd_theta = in__.read<local_scalar_t__>();
      out__.write(mu_log_sd_theta);
      local_scalar_t__ sigma_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_log_sd_theta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_log_sd_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(log_sd_theta_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable log_sd_theta_raw");
      out__.write(log_sd_theta_raw);
      local_scalar_t__ mu_log_sd_e = DUMMY_VAR__;
      current_statement__ = 9;
      mu_log_sd_e = in__.read<local_scalar_t__>();
      out__.write(mu_log_sd_e);
      local_scalar_t__ sigma_log_sd_e = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_log_sd_e = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_log_sd_e);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_e_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(log_sd_e_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable log_sd_e_raw");
      out__.write(log_sd_e_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(L_Omega_theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable L_Omega_theta");
      out__.write_free_cholesky_factor_corr(L_Omega_theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(L_Omega_e,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable L_Omega_e");
      out__.write_free_cholesky_factor_corr(L_Omega_e);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(z_true,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable z_true");
      out__.write(z_true);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(x_true,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable x_true");
      out__.write(x_true);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(n_theta)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(n_theta)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_log_es",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_log_es",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "log_es_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "mu_log_sd_theta",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "sigma_log_sd_theta", "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "log_sd_theta_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "mu_log_sd_e",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sigma_log_sd_e",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "log_sd_e_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "L_Omega_theta",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "L_Omega_e",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "z_true", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "x_true", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 1;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_theta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ mu_log_es = DUMMY_VAR__;
      current_statement__ = 3;
      mu_log_es = context__.vals_r("mu_log_es")[(1 - 1)];
      out__.write(mu_log_es);
      local_scalar_t__ sigma_log_es = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_log_es = context__.vals_r("sigma_log_es")[(1 - 1)];
      out__.write_free_lb(0, sigma_log_es);
      Eigen::Matrix<local_scalar_t__,-1,1> log_es_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_es_raw_flat__;
        current_statement__ = 5;
        log_es_raw_flat__ = context__.vals_r("log_es_raw");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(log_es_raw, log_es_raw_flat__[(pos__ - 1)],
            "assigning variable log_es_raw", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_es_raw);
      local_scalar_t__ mu_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 6;
      mu_log_sd_theta = context__.vals_r("mu_log_sd_theta")[(1 - 1)];
      out__.write(mu_log_sd_theta);
      local_scalar_t__ sigma_log_sd_theta = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_log_sd_theta = context__.vals_r("sigma_log_sd_theta")[(1 - 1)];
      out__.write_free_lb(0, sigma_log_sd_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_theta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_sd_theta_raw_flat__;
        current_statement__ = 8;
        log_sd_theta_raw_flat__ = context__.vals_r("log_sd_theta_raw");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(log_sd_theta_raw,
            log_sd_theta_raw_flat__[(pos__ - 1)],
            "assigning variable log_sd_theta_raw",
            stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_sd_theta_raw);
      local_scalar_t__ mu_log_sd_e = DUMMY_VAR__;
      current_statement__ = 9;
      mu_log_sd_e = context__.vals_r("mu_log_sd_e")[(1 - 1)];
      out__.write(mu_log_sd_e);
      local_scalar_t__ sigma_log_sd_e = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_log_sd_e = context__.vals_r("sigma_log_sd_e")[(1 - 1)];
      out__.write_free_lb(0, sigma_log_sd_e);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sd_e_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_sd_e_raw_flat__;
        current_statement__ = 11;
        log_sd_e_raw_flat__ = context__.vals_r("log_sd_e_raw");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(log_sd_e_raw, log_sd_e_raw_flat__[(pos__ - 1)],
            "assigning variable log_sd_e_raw", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_sd_e_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_Omega_theta_flat__;
        current_statement__ = 12;
        L_Omega_theta_flat__ = context__.vals_r("L_Omega_theta");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 12;
            stan::model::assign(L_Omega_theta, L_Omega_theta_flat__[(pos__ -
              1)], "assigning variable L_Omega_theta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_Omega_theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_Omega_e_flat__;
        current_statement__ = 13;
        L_Omega_e_flat__ = context__.vals_r("L_Omega_e");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 13;
            stan::model::assign(L_Omega_e, L_Omega_e_flat__[(pos__ - 1)],
              "assigning variable L_Omega_e", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 13;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_Omega_e);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_true_flat__;
        current_statement__ = 14;
        z_true_flat__ = context__.vals_r("z_true");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(z_true, z_true_flat__[(pos__ - 1)],
            "assigning variable z_true", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_true);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x_true_flat__;
        current_statement__ = 15;
        x_true_flat__ = context__.vals_r("x_true");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(x_true, x_true_flat__[(pos__ - 1)],
            "assigning variable x_true", stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(x_true);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "beta", "mu_log_es",
                "sigma_log_es", "log_es_raw", "mu_log_sd_theta",
                "sigma_log_sd_theta", "log_sd_theta_raw", "mu_log_sd_e",
                "sigma_log_sd_e", "log_sd_e_raw", "L_Omega_theta",
                "L_Omega_e", "z_true", "x_true"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"A", "AM_term", "mu", "Sigma", "Omega_theta", "Omega_e",
             "log_es", "log_sd_theta", "log_sd_e", "es", "sd_theta", "sd_e",
             "diag_sd_theta", "diag_sd_e", "mu_eq"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik", "var_z", "Cor_theta", "Cor_e"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_theta)},
                std::vector<size_t>{static_cast<size_t>(n_theta)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_es");
    param_names__.emplace_back(std::string() + "sigma_log_es");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_es_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_sd_theta");
    param_names__.emplace_back(std::string() + "sigma_log_sd_theta");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sd_theta_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_sd_e");
    param_names__.emplace_back(std::string() + "sigma_log_sd_e");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sd_e_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_Omega_theta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_Omega_e" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_true" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_true" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_es" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_sd_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_sd_e" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "es" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_e" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_eq" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_z" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_theta; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_es");
    param_names__.emplace_back(std::string() + "sigma_log_es");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_es_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_sd_theta");
    param_names__.emplace_back(std::string() + "sigma_log_sd_theta");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sd_theta_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_log_sd_e");
    param_names__.emplace_back(std::string() + "sigma_log_sd_e");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sd_e_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_Omega_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_Omega_e" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_true" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_true" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_es" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_sd_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_sd_e" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "es" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_e" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_eq" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_z" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_theta) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_theta) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_es_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_sd_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_sd_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_sd_theta_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_sd_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_sd_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_sd_e_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"L_Omega_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"L_Omega_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"x_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AM_term\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_es\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"es\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_eq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"var_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_theta) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_theta) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_es_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_sd_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_sd_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_sd_theta_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"mu_log_sd_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_sd_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_sd_e_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"L_Omega_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N * (N - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"L_Omega_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N * (N - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"z_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"x_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AM_term\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_es\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"es\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_eq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"var_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((n_theta + n_theta) + 1) + 1) +
      N) + 1) + 1) + N) + 1) + 1) + N) + (N * N)) + (N * N)) + N) + N);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((N * N) + (N * N)) + N) + (N * N)) + (N * N)) + (N * N))
      + N) + N) + N) + N) + N) + N) + (N * N)) + (N * N)) + N));
    const size_t num_gen_quantities = emit_generated_quantities * ((((N + N)
      + (N * N)) + (N * N)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((n_theta + n_theta) + 1) + 1) +
      N) + 1) + 1) + N) + 1) + 1) + N) + (N * N)) + (N * N)) + N) + N);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((N * N) + (N * N)) + N) + (N * N)) + (N * N)) + (N * N))
      + N) + N) + N) + N) + N) + N) + (N * N)) + (N * N)) + N));
    const size_t num_gen_quantities = emit_generated_quantities * ((((N + N)
      + (N * N)) + (N * N)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_blouchMigAdpt_VE_MLM_namespace::model_blouchMigAdpt_VE_MLM;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchMigAdpt_VE_MLM_namespace::profiles__;
}
#endif
#endif
