// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-rc3
#include <stan/model/model_header.hpp>
namespace model_blouchOU_reg_direct_adapt_ve_postpc_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 213> locations_array__ =
  {" (found before start of program)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 100, column 2 to column 19)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 101, column 2 to column 20)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 102, column 2 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 103, column 2 to column 34)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 104, column 2 to column 23)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 105, column 2 to column 41)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 139, column 2 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 140, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 141, column 2 to column 39)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 142, column 2 to column 32)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 143, column 2 to column 15)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 144, column 2 to column 37)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 145, column 2 to column 21)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 146, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 147, column 2 to column 22)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 148, column 2 to column 59)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 149, column 2 to column 82)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 150, column 2 to column 111)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 151, column 2 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 152, column 2 to column 95)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 153, column 2 to column 58)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 155, column 4 to column 68)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 154, column 15 to line 156, column 5)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 154, column 2 to line 156, column 5)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 157, column 2 to column 46)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 159, column 4 to column 51)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 158, column 15 to line 160, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 158, column 2 to line 160, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 110, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 110, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 110, column 2 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 111, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 111, column 2 to column 15)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 112, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 112, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 112, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 113, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 113, column 11 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 113, column 2 to column 39)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 114, column 2 to column 21)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 115, column 2 to column 37)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 116, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 116, column 11 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 116, column 2 to column 32)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 117, column 9 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 117, column 2 to column 39)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 118, column 2 to column 55)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 119, column 2 to column 42)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 120, column 2 to column 64)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 122, column 4 to column 64)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 121, column 35 to line 123, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 121, column 2 to line 123, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 125, column 4 to column 37)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 126, column 4 to column 55)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 124, column 35 to line 127, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 124, column 2 to line 127, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 128, column 2 to column 95)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 129, column 2 to column 58)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 130, column 2 to column 111)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 131, column 2 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 133, column 4 to column 68)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 132, column 15 to line 134, column 5)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 132, column 2 to line 134, column 5)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 135, column 2 to column 53)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 136, column 2 to column 44)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 73, column 2 to column 8)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 74, column 2 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 75, column 2 to column 15)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 76, column 2 to column 17)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 77, column 2 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 78, column 2 to column 19)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 79, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 79, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 80, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 80, column 11 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 80, column 2 to column 38)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 81, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 81, column 2 to column 20)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 82, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 82, column 11 to column 20)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 82, column 2 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 83, column 9 to column 19)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 83, column 20 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 83, column 2 to column 41)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 84, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 84, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 84, column 2 to column 17)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 85, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 85, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 85, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 86, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 86, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 86, column 2 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 87, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 87, column 2 to column 19)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 88, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 88, column 12 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 88, column 2 to column 38)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 89, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 89, column 12 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 89, column 2 to column 32)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 90, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 90, column 12 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 90, column 2 to column 32)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 91, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 91, column 12 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 91, column 2 to column 36)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 92, column 8 to column 9)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 92, column 2 to column 21)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 93, column 8 to column 9)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 93, column 2 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 94, column 2 to column 21)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 95, column 2 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 96, column 2 to column 25)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 97, column 2 to column 23)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 102, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 103, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 103, column 11 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 104, column 9 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 105, column 9 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 105, column 15 to column 34)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 139, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 139, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 140, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 140, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 141, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 141, column 11 to column 30)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 142, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 142, column 11 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 143, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 146, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 147, column 9 to column 10)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 149, column 9 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 149, column 15 to column 25)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 8, column 2 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 11, column 6 to column 13)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 10, column 4 to line 11, column 13)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 9, column 2 to line 11, column 13)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 12, column 2 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 7, column 36 to line 13, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 15, column 10 to column 27)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 15, column 4 to column 49)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 16, column 4 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 20, column 8 to column 33)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 21, column 8 to column 17)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 19, column 21 to line 22, column 9)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 19, column 6 to line 22, column 9)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 18, column 30 to line 23, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 18, column 4 to line 23, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 24, column 4 to column 28)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 14, column 44 to line 25, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 27, column 11 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 27, column 4 to column 95)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 28, column 4 to column 20)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 26, column 88 to line 29, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 32, column 11 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 32, column 4 to column 109)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 33, column 11 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 33, column 4 to column 52)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 35, column 12 to column 37)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 35, column 6 to column 75)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 36, column 6 to column 44)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 34, column 21 to line 37, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 34, column 4 to line 37, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 38, column 4 to column 25)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 30, column 121 to line 39, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 41, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 41, column 13 to column 18)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 41, column 4 to column 58)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 43, column 6 to column 120)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 42, column 17 to line 44, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 42, column 4 to line 44, column 7)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 45, column 4 to column 26)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 40, column 138 to line 46, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 48, column 4 to column 23)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 49, column 4 to column 23)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 50, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 50, column 4 to column 63)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 51, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 51, column 13 to column 23)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 51, column 4 to column 59)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 52, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 52, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 52, column 4 to column 92)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 53, column 4 to column 16)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 47, column 86 to line 54, column 3)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 56, column 4 to column 24)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 57, column 11 to column 21)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 57, column 4 to column 59)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 58, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 58, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 58, column 4 to column 42)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 59, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 59, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 59, column 4 to column 22)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 60, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 60, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 60, column 4 to column 22)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 61, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 61, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 61, column 4 to column 22)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 62, column 11 to column 12)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 62, column 13 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 62, column 4 to column 19)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 63, column 4 to column 17)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 64, column 4 to column 39)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 65, column 4 to column 88)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 66, column 4 to column 43)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 67, column 4 to column 60)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 68, column 4 to column 103)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 69, column 4 to column 14)",
  " (in 'blouchOU_reg_direct_adapt_ve_postpc', line 55, column 144 to line 70, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>* = nullptr>
int num_matches(const T0__& x_arg__, const T1__& y, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>* = nullptr>
std::vector<int>
which_equal(const T0__& x_arg__, const T1__& y, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T3__>>>,
                              std::is_integral<std::decay_t<T4__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__>,-1,1>
weight_segments(const T0__& a, const T1__& t_beginning_arg__, const T2__&
                t_end_arg__, const T3__& time, const T4__& nodes,
                std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<std::decay_t<T6__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>>,1,-1>
weights_regimes(const T0__& n_reg, const T1__& a, const T2__&
                t_beginning_arg__, const T3__& t_end_arg__, const T4__& time,
                const T5__& reg_match_arg__, const T6__& nodes, std::ostream*
                pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              std::is_integral<std::decay_t<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T7__>>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,-1>
calc_optima_matrix(const T0__& N, const T1__& n_reg, const T2__& a,
                   const T3__& t_beginning_arg__, const T4__& t_end_arg__,
                   const T5__& times_arg__, const T6__& reg_match_arg__,
                   const T7__& nodes, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              std::is_integral<std::decay_t<T3__>>,
                              std::is_integral<std::decay_t<T4__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
calc_mixed_dmX(const T0__& a, const T1__& T_term_arg__, const T2__& X_arg__,
               const T3__& Z_direct, const T4__& Z_adaptive, std::ostream*
               pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              std::is_integral<std::decay_t<T8__>>,
                              std::is_integral<std::decay_t<T9__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::return_type_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, const T4__& tja_arg__, const T5__& T_term_arg__,
       const T6__& beta_arg__, const T7__& sigma2_x_arg__, const T8__&
       Z_adaptive, const T9__& n_reg, std::ostream* pstream__);
// int num_matches(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>*>
int num_matches(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<stan::base_type_t<T0__>, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 135;
    n = 0;
    current_statement__ = 138;
    for (int i = 1; i <= stan::math::rows(x); ++i) {
      current_statement__ = 137;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 136;
        n = (n + 1);
      }
    }
    current_statement__ = 139;
    return n;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int which_equal(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>*>
std::vector<int>
which_equal(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<stan::base_type_t<T0__>, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 141;
    stan::math::validate_non_negative_index("match_positions",
      "num_matches(x, y)", num_matches(x, y, pstream__));
    std::vector<int> match_positions =
      std::vector<int>(num_matches(x, y, pstream__),
        std::numeric_limits<int>::min());
    int pos = std::numeric_limits<int>::min();
    current_statement__ = 143;
    pos = 1;
    current_statement__ = 149;
    for (int i = 1; i <=
         stan::model::rvalue(stan::math::dims(x), "dims(x)",
           stan::model::index_uni(1)); ++i) {
      current_statement__ = 147;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 144;
        stan::model::assign(match_positions, i,
          "assigning variable match_positions", stan::model::index_uni(pos));
        current_statement__ = 145;
        pos = (pos + 1);
      }
    }
    current_statement__ = 150;
    return match_positions;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector weight_segments(real, vector, vector, real, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T3__>>>,
                              std::is_integral<std::decay_t<T4__>>>*>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__>,-1,1>
weight_segments(const T0__& a, const T1__& t_beginning_arg__, const T2__&
                t_end_arg__, const T3__& time, const T4__& nodes,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 152;
    stan::math::validate_non_negative_index("weights", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__,-1,1> weights =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodes, DUMMY_VAR__);
    current_statement__ = 153;
    stan::model::assign(weights,
      stan::math::append_row(
        stan::math::subtract(
          stan::math::exp(stan::math::multiply(-(a), t_beginning)),
          stan::math::exp(stan::math::multiply(-(a), t_end))),
        stan::math::exp((-(a) * time))), "assigning variable weights");
    current_statement__ = 154;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// row_vector weights_regimes(int, real, vector, vector, real, vector, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<std::decay_t<T6__>>>*>
Eigen::Matrix<stan::return_type_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>>,1,-1>
weights_regimes(const T0__& n_reg, const T1__& a, const T2__&
                t_beginning_arg__, const T3__& t_end_arg__, const T4__& time,
                const T5__& reg_match_arg__, const T6__& nodes, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::return_type_t<T1__, stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__,
                             stan::base_type_t<T5__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  const auto& reg_match = stan::math::to_ref(reg_match_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 156;
    stan::math::validate_non_negative_index("weight_seg", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__,-1,1> weight_seg =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodes, DUMMY_VAR__);
    current_statement__ = 157;
    stan::model::assign(weight_seg,
      weight_segments(a,
        stan::model::rvalue(t_beginning, "t_beginning",
          stan::model::index_min_max(1, (nodes - 1))),
        stan::model::rvalue(t_end, "t_end",
          stan::model::index_min_max(1, (nodes - 1))), time, nodes, pstream__),
      "assigning variable weight_seg");
    current_statement__ = 158;
    stan::math::validate_non_negative_index("reg_weights", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__,-1,1> reg_weights =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_reg, DUMMY_VAR__);
    current_statement__ = 159;
    stan::model::assign(reg_weights, stan::math::rep_vector(0, n_reg),
      "assigning variable reg_weights");
    current_statement__ = 164;
    for (int i = 1; i <= n_reg; ++i) {
      current_statement__ = 160;
      stan::math::validate_non_negative_index("ids",
        "num_matches(reg_match, i)",
        num_matches(reg_match, static_cast<double>(i), pstream__));
      std::vector<int> ids =
        std::vector<int>(num_matches(reg_match, static_cast<double>(i),
                           pstream__), std::numeric_limits<int>::min());
      current_statement__ = 161;
      stan::model::assign(ids,
        which_equal(reg_match, static_cast<double>(i), pstream__),
        "assigning variable ids");
      current_statement__ = 162;
      stan::model::assign(reg_weights,
        stan::math::sum(
          stan::model::rvalue(weight_seg, "weight_seg",
            stan::model::index_multi(ids))),
        "assigning variable reg_weights", stan::model::index_uni(i));
    }
    current_statement__ = 165;
    return stan::math::transpose(reg_weights);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* matrix
   calc_optima_matrix(int, int, real, matrix, matrix, matrix, matrix,
                      array[] int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              std::is_integral<std::decay_t<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T7__>>>>*>
Eigen::Matrix<stan::return_type_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,-1>
calc_optima_matrix(const T0__& N, const T1__& n_reg, const T2__& a,
                   const T3__& t_beginning_arg__, const T4__& t_end_arg__,
                   const T5__& times_arg__, const T6__& reg_match_arg__,
                   const T7__& nodes, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T2__, stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  const auto& times = stan::math::to_ref(times_arg__);
  const auto& reg_match = stan::math::to_ref(reg_match_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 167;
    stan::math::validate_non_negative_index("optima_matrix", "N", N);
    current_statement__ = 168;
    stan::math::validate_non_negative_index("optima_matrix", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__,-1,-1> optima_matrix =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_reg, DUMMY_VAR__);
    current_statement__ = 169;
    stan::model::assign(optima_matrix, stan::math::rep_matrix(0, N, n_reg),
      "assigning variable optima_matrix");
    current_statement__ = 172;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 170;
      stan::model::assign(optima_matrix,
        weights_regimes(n_reg, a,
          stan::math::transpose(
            stan::model::rvalue(t_beginning, "t_beginning",
              stan::model::index_uni(i), stan::model::index_omni())),
          stan::math::transpose(
            stan::model::rvalue(t_end, "t_end", stan::model::index_uni(i),
              stan::model::index_omni())),
          stan::model::rvalue(times, "times", stan::model::index_uni(i),
            stan::model::index_uni(1)),
          stan::math::transpose(
            stan::model::rvalue(reg_match, "reg_match",
              stan::model::index_uni(i), stan::model::index_omni())),
          stan::model::rvalue(nodes, "nodes", stan::model::index_uni(i)),
          pstream__), "assigning variable optima_matrix",
        stan::model::index_uni(i), stan::model::index_omni());
    }
    current_statement__ = 173;
    return optima_matrix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix calc_mixed_dmX(real, vector, matrix, int, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              std::is_integral<std::decay_t<T3__>>,
                              std::is_integral<std::decay_t<T4__>>>*>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
calc_mixed_dmX(const T0__& a, const T1__& T_term_arg__, const T2__& X_arg__,
               const T3__& Z_direct, const T4__& Z_adaptive, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& T_term = stan::math::to_ref(T_term_arg__);
  const auto& X = stan::math::to_ref(X_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 175;
    N = stan::model::rvalue(stan::math::dims(X), "dims(X)",
          stan::model::index_uni(1));
    int Z = std::numeric_limits<int>::min();
    current_statement__ = 176;
    Z = stan::model::rvalue(stan::math::dims(X), "dims(X)",
          stan::model::index_uni(2));
    current_statement__ = 177;
    stan::math::validate_non_negative_index("rho", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> rho =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 178;
    stan::model::assign(rho,
      stan::math::subtract(1,
        stan::math::elt_divide(
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply(-(a), T_term))),
          stan::math::multiply(a, T_term))), "assigning variable rho");
    current_statement__ = 179;
    stan::math::validate_non_negative_index("rhos", "N", N);
    current_statement__ = 180;
    stan::math::validate_non_negative_index("rhos", "Z_adaptive", Z_adaptive);
    Eigen::Matrix<local_scalar_t__,-1,-1> rhos =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, Z_adaptive,
        DUMMY_VAR__);
    current_statement__ = 181;
    stan::model::assign(rhos, stan::math::rep_matrix(rho, Z_adaptive),
      "assigning variable rhos");
    current_statement__ = 182;
    stan::math::validate_non_negative_index("dmX", "N", N);
    current_statement__ = 183;
    stan::math::validate_non_negative_index("dmX", "Z", Z);
    Eigen::Matrix<local_scalar_t__,-1,-1> dmX =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, Z, DUMMY_VAR__);
    current_statement__ = 184;
    stan::model::assign(dmX,
      stan::math::append_col(
        stan::model::rvalue(X, "X", stan::model::index_omni(),
          stan::model::index_min_max(1, Z_direct)),
        stan::math::elt_multiply(
          stan::model::rvalue(X, "X", stan::model::index_omni(),
            stan::model::index_min_max((Z_direct + 1), (Z_adaptive +
              Z_direct))), rhos)), "assigning variable dmX");
    current_statement__ = 185;
    return dmX;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* matrix
   calc_V(real, real, matrix, matrix, matrix, vector, matrix, matrix, int,
  int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              std::is_integral<std::decay_t<T8__>>,
                              std::is_integral<std::decay_t<T9__>>>*>
Eigen::Matrix<stan::return_type_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::return_type_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, const T4__& tja_arg__, const T5__& T_term_arg__,
       const T6__& beta_arg__, const T7__& sigma2_x_arg__, const T8__&
       Z_adaptive, const T9__& n_reg, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::return_type_t<stan::base_type_t<T5__>,
                               stan::base_type_t<T6__>,
                               stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& ta = stan::math::to_ref(ta_arg__);
  const auto& tij = stan::math::to_ref(tij_arg__);
  const auto& tja = stan::math::to_ref(tja_arg__);
  const auto& T_term = stan::math::to_ref(T_term_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& sigma2_x = stan::math::to_ref(sigma2_x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 187;
    N = stan::model::rvalue(stan::math::dims(ta), "dims(ta)",
          stan::model::index_uni(1));
    current_statement__ = 188;
    stan::math::validate_non_negative_index("ones", "Z_adaptive", Z_adaptive);
    Eigen::Matrix<local_scalar_t__,-1,-1> ones =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Z_adaptive, 1,
        DUMMY_VAR__);
    current_statement__ = 189;
    stan::model::assign(ones, stan::math::rep_matrix(1, Z_adaptive, 1),
      "assigning variable ones");
    current_statement__ = 190;
    stan::math::validate_non_negative_index("ti", "N", N);
    current_statement__ = 191;
    stan::math::validate_non_negative_index("ti", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> ti =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 192;
    stan::model::assign(ti, stan::math::rep_matrix(T_term, N),
      "assigning variable ti");
    current_statement__ = 193;
    stan::math::validate_non_negative_index("term0", "N", N);
    current_statement__ = 194;
    stan::math::validate_non_negative_index("term0", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term0 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 196;
    stan::math::validate_non_negative_index("term1", "N", N);
    current_statement__ = 197;
    stan::math::validate_non_negative_index("term1", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term1 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 199;
    stan::math::validate_non_negative_index("term2", "N", N);
    current_statement__ = 200;
    stan::math::validate_non_negative_index("term2", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term2 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 202;
    stan::math::validate_non_negative_index("Vt", "N", N);
    current_statement__ = 203;
    stan::math::validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> Vt =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    local_scalar_t__ var_opt = DUMMY_VAR__;
    current_statement__ = 206;
    var_opt = stan::math::sum(
                stan::math::multiply(stan::math::square(beta), sigma2_x));
    current_statement__ = 207;
    stan::model::assign(term0,
      stan::math::elt_multiply(
        stan::math::multiply(((var_opt + sigma2_y) / (2 * a)),
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply((-(2) * a), ta)))),
        stan::math::exp(stan::math::multiply(-(a), tij))),
      "assigning variable term0");
    current_statement__ = 208;
    stan::model::assign(term1,
      stan::math::elt_divide(
        stan::math::subtract(1,
          stan::math::exp(stan::math::multiply(-(a), ti))),
        stan::math::multiply(a, ti)), "assigning variable term1");
    current_statement__ = 209;
    stan::model::assign(term2,
      stan::math::elt_divide(
        stan::math::elt_multiply(
          stan::math::exp(stan::math::multiply(-(a), tja)),
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply(-(a), ti)))),
        stan::math::multiply(a, ti)), "assigning variable term2");
    current_statement__ = 210;
    stan::model::assign(Vt,
      stan::math::add(term0,
        stan::math::multiply(var_opt,
          stan::math::subtract(
            stan::math::elt_multiply(stan::math::elt_multiply(ta, term1),
              stan::math::transpose(term1)),
            stan::math::elt_multiply(
              stan::math::elt_divide(
                stan::math::subtract(1,
                  stan::math::exp(stan::math::multiply(-(a), ta))), a),
              stan::math::add(term2, stan::math::transpose(term2)))))),
      "assigning variable Vt");
    current_statement__ = 211;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_blouchOU_reg_direct_adapt_ve_postpc final : public model_base_crtp<model_blouchOU_reg_direct_adapt_ve_postpc> {
private:
  int N;
  int n_reg;
  int Z_direct;
  int Z_adaptive;
  int Z_X_error;
  int max_node_num;
  Eigen::Matrix<double,-1,1> Y_obs_data__;
  Eigen::Matrix<double,-1,-1> X_obs_data__;
  Eigen::Matrix<double,-1,1> Y_error_data__;
  Eigen::Matrix<double,-1,-1> X_error_data__;
  Eigen::Matrix<double,-1,-1> sigma2_x_data__;
  Eigen::Matrix<double,-1,-1> ta_data__;
  Eigen::Matrix<double,-1,-1> tij_data__;
  Eigen::Matrix<double,-1,-1> tja_data__;
  Eigen::Matrix<double,-1,1> T_term_data__;
  Eigen::Matrix<double,-1,-1> t_beginning_data__;
  Eigen::Matrix<double,-1,-1> t_end_data__;
  Eigen::Matrix<double,-1,-1> times_data__;
  Eigen::Matrix<double,-1,-1> reg_match_data__;
  std::vector<int> nodes;
  std::vector<int> reg_tips;
  Eigen::Matrix<double,-1,1> hl_prior_data__;
  double vy_prior;
  Eigen::Matrix<double,-1,1> optima_prior_data__;
  Eigen::Matrix<double,-1,1> beta_prior_data__;
  int X_2dim__;
  int beta_2dim__;
  int pred_X_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_error{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sigma2_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> tij{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> tja{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> T_term{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> t_beginning{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> t_end{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> times{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> reg_match{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> hl_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> optima_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_prior{nullptr, 0};
public:
  ~model_blouchOU_reg_direct_adapt_ve_postpc() {}
  model_blouchOU_reg_direct_adapt_ve_postpc(stan::io::var_context& context__,
                                            unsigned int random_seed__ = 0,
                                            std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_direct_adapt_ve_postpc_namespace::model_blouchOU_reg_direct_adapt_ve_postpc";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 66;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 66;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 67;
      context__.validate_dims("data initialization", "n_reg", "int",
        std::vector<size_t>{});
      n_reg = std::numeric_limits<int>::min();
      current_statement__ = 67;
      n_reg = context__.vals_i("n_reg")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization", "Z_direct", "int",
        std::vector<size_t>{});
      Z_direct = std::numeric_limits<int>::min();
      current_statement__ = 68;
      Z_direct = context__.vals_i("Z_direct")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization", "Z_adaptive", "int",
        std::vector<size_t>{});
      Z_adaptive = std::numeric_limits<int>::min();
      current_statement__ = 69;
      Z_adaptive = context__.vals_i("Z_adaptive")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization", "Z_X_error", "int",
        std::vector<size_t>{});
      Z_X_error = std::numeric_limits<int>::min();
      current_statement__ = 70;
      Z_X_error = context__.vals_i("Z_X_error")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization", "max_node_num", "int",
        std::vector<size_t>{});
      max_node_num = std::numeric_limits<int>::min();
      current_statement__ = 71;
      max_node_num = context__.vals_i("max_node_num")[(1 - 1)];
      current_statement__ = 72;
      stan::math::validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "Y_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Y_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_obs_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 73;
        Y_obs_flat__ = context__.vals_r("Y_obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y_obs, Y_obs_flat__[(pos__ - 1)],
            "assigning variable Y_obs", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 74;
      stan::math::validate_non_negative_index("X_obs", "N", N);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("X_obs",
        "Z_direct + Z_adaptive", (Z_direct + Z_adaptive));
      current_statement__ = 76;
      context__.validate_dims("data initialization", "X_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>((Z_direct + Z_adaptive))});
      X_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, (Z_direct +
                       Z_adaptive), std::numeric_limits<double>::quiet_NaN());
      new (&X_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_obs_data__.data(), N,
        (Z_direct + Z_adaptive));
      {
        std::vector<local_scalar_t__> X_obs_flat__;
        current_statement__ = 76;
        X_obs_flat__ = context__.vals_r("X_obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (Z_direct + Z_adaptive); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X_obs, X_obs_flat__[(pos__ - 1)],
              "assigning variable X_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 77;
      stan::math::validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "Y_error", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&Y_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_error_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 78;
        Y_error_flat__ = context__.vals_r("Y_error");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y_error, Y_error_flat__[(pos__ - 1)],
            "assigning variable Y_error", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 79;
      stan::math::validate_non_negative_index("X_error", "N", N);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("X_error", "Z_X_error",
        Z_X_error);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "X_error", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(Z_X_error)});
      X_error_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Z_X_error,
                         std::numeric_limits<double>::quiet_NaN());
      new (&X_error)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_error_data__.data(), N,
        Z_X_error);
      {
        std::vector<local_scalar_t__> X_error_flat__;
        current_statement__ = 81;
        X_error_flat__ = context__.vals_r("X_error");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= Z_X_error; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X_error, X_error_flat__[(pos__ - 1)],
              "assigning variable X_error", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 82;
      stan::math::validate_non_negative_index("sigma2_x", "Z_adaptive",
        Z_adaptive);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("sigma2_x", "Z_adaptive",
        Z_adaptive);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "sigma2_x", "double",
        std::vector<size_t>{static_cast<size_t>(Z_adaptive),
          static_cast<size_t>(Z_adaptive)});
      sigma2_x_data__ = Eigen::Matrix<double,-1,-1>::Constant(Z_adaptive,
                          Z_adaptive,
                          std::numeric_limits<double>::quiet_NaN());
      new (&sigma2_x)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sigma2_x_data__.data(),
        Z_adaptive, Z_adaptive);
      {
        std::vector<local_scalar_t__> sigma2_x_flat__;
        current_statement__ = 84;
        sigma2_x_flat__ = context__.vals_r("sigma2_x");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= Z_adaptive; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Z_adaptive; ++sym2__) {
            stan::model::assign(sigma2_x, sigma2_x_flat__[(pos__ - 1)],
              "assigning variable sigma2_x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 85;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "ta", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      ta_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&ta) Eigen::Map<Eigen::Matrix<double,-1,-1>>(ta_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 87;
        ta_flat__ = context__.vals_r("ta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(ta, ta_flat__[(pos__ - 1)],
              "assigning variable ta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 88;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 90;
      context__.validate_dims("data initialization", "tij", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      tij_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&tij) Eigen::Map<Eigen::Matrix<double,-1,-1>>(tij_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 90;
        tij_flat__ = context__.vals_r("tij");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(tij, tij_flat__[(pos__ - 1)],
              "assigning variable tij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 91;
      stan::math::validate_non_negative_index("tja", "N", N);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("tja", "N", N);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "tja", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      tja_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&tja) Eigen::Map<Eigen::Matrix<double,-1,-1>>(tja_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 93;
        tja_flat__ = context__.vals_r("tja");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(tja, tja_flat__[(pos__ - 1)],
              "assigning variable tja", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 94;
      stan::math::validate_non_negative_index("T_term", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "T_term", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      T_term_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&T_term)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(T_term_data__.data(), N);
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 95;
        T_term_flat__ = context__.vals_r("T_term");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(T_term, T_term_flat__[(pos__ - 1)],
            "assigning variable T_term", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 96;
      stan::math::validate_non_negative_index("t_beginning", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("t_beginning", "max_node_num",
        max_node_num);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "t_beginning", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      t_beginning_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                             max_node_num,
                             std::numeric_limits<double>::quiet_NaN());
      new (&t_beginning)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(t_beginning_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> t_beginning_flat__;
        current_statement__ = 98;
        t_beginning_flat__ = context__.vals_r("t_beginning");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(t_beginning, t_beginning_flat__[(pos__ - 1)],
              "assigning variable t_beginning",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 99;
      stan::math::validate_non_negative_index("t_end", "N", N);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("t_end", "max_node_num",
        max_node_num);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "t_end", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      t_end_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, max_node_num,
                       std::numeric_limits<double>::quiet_NaN());
      new (&t_end)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(t_end_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> t_end_flat__;
        current_statement__ = 101;
        t_end_flat__ = context__.vals_r("t_end");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(t_end, t_end_flat__[(pos__ - 1)],
              "assigning variable t_end", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 102;
      stan::math::validate_non_negative_index("times", "N", N);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("times", "max_node_num",
        max_node_num);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "times", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      times_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, max_node_num,
                       std::numeric_limits<double>::quiet_NaN());
      new (&times)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(times_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> times_flat__;
        current_statement__ = 104;
        times_flat__ = context__.vals_r("times");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(times, times_flat__[(pos__ - 1)],
              "assigning variable times", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 105;
      stan::math::validate_non_negative_index("reg_match", "N", N);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("reg_match", "max_node_num",
        max_node_num);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "reg_match", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      reg_match_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                           max_node_num,
                           std::numeric_limits<double>::quiet_NaN());
      new (&reg_match)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(reg_match_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> reg_match_flat__;
        current_statement__ = 107;
        reg_match_flat__ = context__.vals_r("reg_match");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(reg_match, reg_match_flat__[(pos__ - 1)],
              "assigning variable reg_match", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("nodes", "N", N);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "nodes", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      nodes = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 109;
      nodes = context__.vals_i("nodes");
      current_statement__ = 110;
      stan::math::validate_non_negative_index("reg_tips", "N", N);
      current_statement__ = 111;
      context__.validate_dims("data initialization", "reg_tips", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      reg_tips = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 111;
      reg_tips = context__.vals_i("reg_tips");
      current_statement__ = 112;
      context__.validate_dims("data initialization", "hl_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      hl_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&hl_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(hl_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> hl_prior_flat__;
        current_statement__ = 112;
        hl_prior_flat__ = context__.vals_r("hl_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(hl_prior, hl_prior_flat__[(pos__ - 1)],
            "assigning variable hl_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 113;
      context__.validate_dims("data initialization", "vy_prior", "double",
        std::vector<size_t>{});
      vy_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 113;
      vy_prior = context__.vals_r("vy_prior")[(1 - 1)];
      current_statement__ = 114;
      context__.validate_dims("data initialization", "optima_prior",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      optima_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                              std::numeric_limits<double>::quiet_NaN());
      new (&optima_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(optima_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> optima_prior_flat__;
        current_statement__ = 114;
        optima_prior_flat__ = context__.vals_r("optima_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(optima_prior, optima_prior_flat__[(pos__ - 1)],
            "assigning variable optima_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 115;
      context__.validate_dims("data initialization", "beta_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      beta_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> beta_prior_flat__;
        current_statement__ = 115;
        beta_prior_flat__ = context__.vals_r("beta_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(beta_prior, beta_prior_flat__[(pos__ - 1)],
            "assigning variable beta_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 118;
      X_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 118;
      X_2dim__ = (Z_direct + Z_adaptive);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("X", "Z_direct + Z_adaptive",
        X_2dim__);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("optima", "n_reg", n_reg);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("beta", "n_reg", n_reg);
      current_statement__ = 121;
      beta_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 121;
      beta_2dim__ = (Z_direct + Z_adaptive);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("beta",
        "Z_direct + Z_adaptive", beta_2dim__);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("pred_X", "N", N);
      current_statement__ = 127;
      pred_X_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 127;
      pred_X_2dim__ = (Z_direct + Z_adaptive);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("pred_X",
        "Z_direct + Z_adaptive", pred_X_2dim__);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("optima_matrix", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("optima_matrix", "n_reg", n_reg);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("Y_sim", "N", N);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("Y_sim_obs", "N", N);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("beta_e", "n_reg", n_reg);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("beta_e", "Z_adaptive",
        Z_adaptive);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + N + (N * X_2dim__) + n_reg + (n_reg *
      beta_2dim__);
  }
  inline std::string model_name() const final {
    return "model_blouchOU_reg_direct_adapt_ve_postpc";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-rc3",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_direct_adapt_ve_postpc_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto hl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto vy =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto Y = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      current_statement__ = 4;
      auto X =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
          X_2dim__);
      current_statement__ = 5;
      auto optima =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_reg);
      current_statement__ = 6;
      auto beta =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_reg,
          beta_2dim__);
      {
        current_statement__ = 29;
        stan::math::validate_non_negative_index("V", "N", N);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> V =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 32;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("L_v", "N", N);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("L_v", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_v =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 37;
        stan::math::validate_non_negative_index("pred_X", "N", N);
        current_statement__ = 38;
        stan::math::validate_non_negative_index("pred_X",
          "Z_direct + Z_adaptive", (Z_direct + Z_adaptive));
        Eigen::Matrix<local_scalar_t__,-1,-1> pred_X =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (Z_direct +
            Z_adaptive), DUMMY_VAR__);
        local_scalar_t__ a = DUMMY_VAR__;
        current_statement__ = 40;
        a = (stan::math::log(2) / hl);
        local_scalar_t__ sigma2_y = DUMMY_VAR__;
        current_statement__ = 41;
        sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
        current_statement__ = 42;
        stan::math::validate_non_negative_index("optima_matrix", "N", N);
        current_statement__ = 43;
        stan::math::validate_non_negative_index("optima_matrix", "n_reg",
          n_reg);
        Eigen::Matrix<local_scalar_t__,-1,-1> optima_matrix =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_reg,
            DUMMY_VAR__);
        current_statement__ = 45;
        stan::math::validate_non_negative_index("ab_bar",
          "1 + Z_direct + Z_adaptive", ((1 + Z_direct) + Z_adaptive));
        Eigen::Matrix<local_scalar_t__,-1,1> ab_bar =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((1 + Z_direct) +
            Z_adaptive), DUMMY_VAR__);
        current_statement__ = 47;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(hl,
                         stan::model::rvalue(hl_prior, "hl_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(hl_prior, "hl_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 48;
        lp_accum__.add(stan::math::exponential_lpdf<false>(vy, vy_prior));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<false>(optima,
                         stan::model::rvalue(optima_prior, "optima_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(optima_prior, "optima_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 52;
        for (int i = 1; i <= (Z_direct + Z_adaptive); ++i) {
          current_statement__ = 50;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(beta_prior, "beta_prior",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(beta_prior, "beta_prior",
                             stan::model::index_uni(2))));
        }
        current_statement__ = 56;
        for (int i = 1; i <= (Z_direct + Z_adaptive); ++i) {
          current_statement__ = 53;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(X, "X",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)), 0, 1));
          current_statement__ = 54;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(X_obs, "X_obs",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(X, "X",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(X_error, "X_error",
                             stan::model::index_omni(),
                             stan::model::index_uni(i))));
        }
        current_statement__ = 57;
        stan::model::assign(optima_matrix,
          calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times,
            reg_match, nodes, pstream__), "assigning variable optima_matrix");
        current_statement__ = 58;
        stan::model::assign(pred_X,
          calc_mixed_dmX(a, T_term, X, Z_direct, Z_adaptive, pstream__),
          "assigning variable pred_X");
        current_statement__ = 59;
        stan::model::assign(V,
          calc_V(a, sigma2_y, ta, tij, tja, T_term,
            stan::model::rvalue(beta, "beta", stan::model::index_omni(),
              stan::model::index_min_max((Z_direct + 1), (Z_direct +
                Z_adaptive))), sigma2_x, Z_adaptive, n_reg, pstream__),
          "assigning variable V");
        current_statement__ = 60;
        stan::model::assign(L_v, stan::math::cholesky_decompose(V),
          "assigning variable L_v");
        current_statement__ = 63;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 61;
          stan::model::assign(mu,
            (stan::math::multiply(
               stan::model::rvalue(optima_matrix, "optima_matrix",
                 stan::model::index_uni(i), stan::model::index_omni()),
               optima) +
            stan::math::multiply(
              stan::model::rvalue(pred_X, "pred_X",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::math::transpose(
                stan::model::rvalue(beta, "beta",
                  stan::model::index_uni(
                    stan::model::rvalue(reg_tips, "reg_tips",
                      stan::model::index_uni(i))), stan::model::index_omni())))),
            "assigning variable mu", stan::model::index_uni(i));
        }
        current_statement__ = 64;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<false>(Y, mu,
                         L_v));
        current_statement__ = 65;
        lp_accum__.add(stan::math::normal_lpdf<false>(Y_obs, Y, Y_error));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_direct_adapt_ve_postpc_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto hl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto vy =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto Y = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      current_statement__ = 4;
      auto X =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
          X_2dim__);
      current_statement__ = 5;
      auto optima =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_reg);
      current_statement__ = 6;
      auto beta =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_reg,
          beta_2dim__);
      {
        current_statement__ = 29;
        stan::math::validate_non_negative_index("V", "N", N);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> V =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 32;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("L_v", "N", N);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("L_v", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_v =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 37;
        stan::math::validate_non_negative_index("pred_X", "N", N);
        current_statement__ = 38;
        stan::math::validate_non_negative_index("pred_X",
          "Z_direct + Z_adaptive", (Z_direct + Z_adaptive));
        Eigen::Matrix<local_scalar_t__,-1,-1> pred_X =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (Z_direct +
            Z_adaptive), DUMMY_VAR__);
        local_scalar_t__ a = DUMMY_VAR__;
        current_statement__ = 40;
        a = (stan::math::log(2) / hl);
        local_scalar_t__ sigma2_y = DUMMY_VAR__;
        current_statement__ = 41;
        sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
        current_statement__ = 42;
        stan::math::validate_non_negative_index("optima_matrix", "N", N);
        current_statement__ = 43;
        stan::math::validate_non_negative_index("optima_matrix", "n_reg",
          n_reg);
        Eigen::Matrix<local_scalar_t__,-1,-1> optima_matrix =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_reg,
            DUMMY_VAR__);
        current_statement__ = 45;
        stan::math::validate_non_negative_index("ab_bar",
          "1 + Z_direct + Z_adaptive", ((1 + Z_direct) + Z_adaptive));
        Eigen::Matrix<local_scalar_t__,-1,1> ab_bar =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((1 + Z_direct) +
            Z_adaptive), DUMMY_VAR__);
        current_statement__ = 47;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(hl,
                         stan::model::rvalue(hl_prior, "hl_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(hl_prior, "hl_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 48;
        lp_accum__.add(stan::math::exponential_lpdf<false>(vy, vy_prior));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<false>(optima,
                         stan::model::rvalue(optima_prior, "optima_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(optima_prior, "optima_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 52;
        for (int i = 1; i <= (Z_direct + Z_adaptive); ++i) {
          current_statement__ = 50;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(beta_prior, "beta_prior",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(beta_prior, "beta_prior",
                             stan::model::index_uni(2))));
        }
        current_statement__ = 56;
        for (int i = 1; i <= (Z_direct + Z_adaptive); ++i) {
          current_statement__ = 53;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(X, "X",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)), 0, 1));
          current_statement__ = 54;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(X_obs, "X_obs",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(X, "X",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(X_error, "X_error",
                             stan::model::index_omni(),
                             stan::model::index_uni(i))));
        }
        current_statement__ = 57;
        stan::model::assign(optima_matrix,
          calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times,
            reg_match, nodes, pstream__), "assigning variable optima_matrix");
        current_statement__ = 58;
        stan::model::assign(pred_X,
          calc_mixed_dmX(a, T_term, X, Z_direct, Z_adaptive, pstream__),
          "assigning variable pred_X");
        current_statement__ = 59;
        stan::model::assign(V,
          calc_V(a, sigma2_y, ta, tij, tja, T_term,
            stan::model::rvalue(beta, "beta", stan::model::index_omni(),
              stan::model::index_min_max((Z_direct + 1), (Z_direct +
                Z_adaptive))), sigma2_x, Z_adaptive, n_reg, pstream__),
          "assigning variable V");
        current_statement__ = 60;
        stan::model::assign(L_v, stan::math::cholesky_decompose(V),
          "assigning variable L_v");
        current_statement__ = 63;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 61;
          stan::model::assign(mu,
            (stan::math::multiply(
               stan::model::rvalue(optima_matrix, "optima_matrix",
                 stan::model::index_uni(i), stan::model::index_omni()),
               optima) +
            stan::math::multiply(
              stan::model::rvalue(pred_X, "pred_X",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::math::transpose(
                stan::model::rvalue(beta, "beta",
                  stan::model::index_uni(
                    stan::model::rvalue(reg_tips, "reg_tips",
                      stan::model::index_uni(i))), stan::model::index_omni())))),
            "assigning variable mu", stan::model::index_uni(i));
        }
        current_statement__ = 64;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<false>(Y, mu,
                         L_v));
        current_statement__ = 65;
        lp_accum__.add(stan::math::normal_lpdf<false>(Y_obs, Y, Y_error));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_direct_adapt_ve_postpc_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto hl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto vy =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto Y = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      current_statement__ = 4;
      auto X =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
          X_2dim__);
      current_statement__ = 5;
      auto optima =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_reg);
      current_statement__ = 6;
      auto beta =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_reg,
          beta_2dim__);
      out__.write(hl);
      out__.write(vy);
      out__.write(Y);
      out__.write(X);
      out__.write(optima);
      out__.write(beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> V =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> L_v =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> pred_X =
        Eigen::Matrix<double,-1,-1>::Constant(N, pred_X_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> optima_matrix =
        Eigen::Matrix<double,-1,-1>::Constant(N, n_reg,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double sigma2_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      a = (stan::math::log(2) / hl);
      Eigen::Matrix<double,-1,1> Y_sim =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Y_sim_obs =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      rho = stan::model::rvalue(
              stan::math::subtract(1,
                stan::math::elt_divide(
                  stan::math::subtract(1,
                    stan::math::exp(stan::math::multiply(-(a), T_term))),
                  stan::math::multiply(a, T_term))),
              "(promote(1, real, data) - ((promote(1, real, data) - exp((PMinus__(a) * T_term))) ./ (a * T_term)))",
              stan::model::index_uni(1));
      Eigen::Matrix<double,-1,-1> beta_e =
        Eigen::Matrix<double,-1,-1>::Constant(n_reg, Z_adaptive,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      stan::model::assign(beta_e,
        stan::math::multiply(
          stan::model::rvalue(beta, "beta", stan::model::index_omni(),
            stan::model::index_min_max((Z_direct + 1), (Z_direct +
              Z_adaptive))), rho), "assigning variable beta_e");
      current_statement__ = 18;
      stan::model::assign(V,
        calc_V(a, sigma2_y, ta, tij, tja, T_term,
          stan::model::rvalue(beta, "beta", stan::model::index_omni(),
            stan::model::index_min_max((Z_direct + 1), (Z_direct +
              Z_adaptive))), sigma2_x, Z_adaptive, n_reg, pstream__),
        "assigning variable V");
      current_statement__ = 19;
      stan::model::assign(L_v, stan::math::cholesky_decompose(V),
        "assigning variable L_v");
      current_statement__ = 20;
      stan::model::assign(optima_matrix,
        calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times, reg_match,
          nodes, pstream__), "assigning variable optima_matrix");
      current_statement__ = 21;
      stan::model::assign(pred_X,
        calc_mixed_dmX(a, T_term, X, Z_direct, Z_adaptive, pstream__),
        "assigning variable pred_X");
      current_statement__ = 24;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 22;
        stan::model::assign(mu,
          (stan::math::multiply(
             stan::model::rvalue(optima_matrix, "optima_matrix",
               stan::model::index_uni(i), stan::model::index_omni()), optima)
          +
          stan::math::multiply(
            stan::model::rvalue(pred_X, "pred_X", stan::model::index_uni(i),
              stan::model::index_omni()),
            stan::math::transpose(
              stan::model::rvalue(beta, "beta",
                stan::model::index_uni(
                  stan::model::rvalue(reg_tips, "reg_tips",
                    stan::model::index_uni(i))), stan::model::index_omni())))),
          "assigning variable mu", stan::model::index_uni(i));
      }
      current_statement__ = 25;
      stan::model::assign(Y_sim,
        stan::math::multi_normal_cholesky_rng(mu, L_v, base_rng__),
        "assigning variable Y_sim");
      current_statement__ = 28;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        stan::model::assign(Y_sim_obs,
          stan::math::normal_rng(
            stan::model::rvalue(Y_sim, "Y_sim", stan::model::index_uni(i)),
            stan::model::rvalue(Y_error, "Y_error", stan::model::index_uni(i)),
            base_rng__), "assigning variable Y_sim_obs",
          stan::model::index_uni(i));
      }
      out__.write(V);
      out__.write(L_v);
      out__.write(pred_X);
      out__.write(optima_matrix);
      out__.write(mu);
      out__.write(sigma2_y);
      out__.write(a);
      out__.write(Y_sim);
      out__.write(Y_sim_obs);
      out__.write(rho);
      out__.write(beta_e);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ hl = DUMMY_VAR__;
      current_statement__ = 1;
      hl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, hl);
      local_scalar_t__ vy = DUMMY_VAR__;
      current_statement__ = 2;
      vy = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, vy);
      Eigen::Matrix<local_scalar_t__,-1,1> Y =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(Y,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable Y");
      out__.write(Y);
      Eigen::Matrix<local_scalar_t__,-1,-1> X =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, X_2dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(X,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, X_2dim__),
        "assigning variable X");
      out__.write(X);
      Eigen::Matrix<local_scalar_t__,-1,1> optima =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_reg, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(optima,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_reg),
        "assigning variable optima");
      out__.write(optima);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_reg, beta_2dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_reg, beta_2dim__),
        "assigning variable beta");
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "hl", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "vy", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(X_2dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "optima", "double",
        std::vector<size_t>{static_cast<size_t>(n_reg)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(n_reg),
          static_cast<size_t>(beta_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ hl = DUMMY_VAR__;
      current_statement__ = 1;
      hl = context__.vals_r("hl")[(1 - 1)];
      out__.write_free_lb(0, hl);
      local_scalar_t__ vy = DUMMY_VAR__;
      current_statement__ = 2;
      vy = context__.vals_r("vy")[(1 - 1)];
      out__.write_free_lb(0, vy);
      Eigen::Matrix<local_scalar_t__,-1,1> Y =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 3;
        Y_flat__ = context__.vals_r("Y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(Y);
      Eigen::Matrix<local_scalar_t__,-1,-1> X =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, X_2dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 4;
        X_flat__ = context__.vals_r("X");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= X_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(X);
      Eigen::Matrix<local_scalar_t__,-1,1> optima =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_reg, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> optima_flat__;
        current_statement__ = 5;
        optima_flat__ = context__.vals_r("optima");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
          stan::model::assign(optima, optima_flat__[(pos__ - 1)],
            "assigning variable optima", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(optima);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_reg, beta_2dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 6;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_reg; ++sym2__) {
            stan::model::assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"hl", "vy", "Y", "X", "optima",
                "beta"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"V", "L_v", "pred_X", "optima_matrix", "mu", "sigma2_y", "a",
             "Y_sim", "Y_sim_obs", "rho", "beta_e"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(X_2dim__)},
                std::vector<size_t>{static_cast<size_t>(n_reg)},
                std::vector<size_t>{static_cast<size_t>(n_reg),
                  static_cast<size_t>(beta_2dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(pred_X_2dim__)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(n_reg)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n_reg),
               static_cast<size_t>(Z_adaptive)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "hl");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "Y" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= X_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "X" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
      param_names__.emplace_back(std::string() + "optima" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_reg; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= pred_X_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred_X" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "optima_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rho");
      for (int sym1__ = 1; sym1__ <= Z_adaptive; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_reg; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "hl");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "Y" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= X_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "X" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
      param_names__.emplace_back(std::string() + "optima" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_reg; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= pred_X_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred_X" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "optima_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rho");
      for (int sym1__ = 1; sym1__ <= Z_adaptive; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_reg; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(X_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_reg) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_reg) + ",\"cols\":" + std::to_string(beta_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(pred_X_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_reg) + ",\"cols\":" + std::to_string(Z_adaptive) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(X_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_reg) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_reg) + ",\"cols\":" + std::to_string(beta_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(pred_X_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_reg) + ",\"cols\":" + std::to_string(Z_adaptive) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + N) + (N * X_2dim__)) + n_reg) +
      (n_reg * beta_2dim__));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((N * N) + (N * N)) + (N * pred_X_2dim__)) + (N * n_reg)) +
      N) + 1) + 1) + N) + N) + 1) + (n_reg * Z_adaptive)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + N) + (N * X_2dim__)) + n_reg) +
      (n_reg * beta_2dim__));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((N * N) + (N * N)) + (N * pred_X_2dim__)) + (N * n_reg)) +
      N) + 1) + 1) + N) + N) + 1) + (n_reg * Z_adaptive)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_blouchOU_reg_direct_adapt_ve_postpc_namespace::model_blouchOU_reg_direct_adapt_ve_postpc;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_reg_direct_adapt_ve_postpc_namespace::profiles__;
}
#endif
#endif
