// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_blouchOU_adapt_priorpc_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 115> locations_array__ =
  {" (found before start of program)",
  " (in 'blouchOU_adapt_priorpc', line 58, column 2 to column 16)",
  " (in 'blouchOU_adapt_priorpc', line 59, column 2 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 60, column 2 to column 24)",
  " (in 'blouchOU_adapt_priorpc', line 61, column 2 to column 15)",
  " (in 'blouchOU_adapt_priorpc', line 62, column 2 to column 60)",
  " (in 'blouchOU_adapt_priorpc', line 63, column 2 to column 47)",
  " (in 'blouchOU_adapt_priorpc', line 64, column 2 to column 37)",
  " (in 'blouchOU_adapt_priorpc', line 65, column 2 to column 21)",
  " (in 'blouchOU_adapt_priorpc', line 66, column 2 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 67, column 2 to column 22)",
  " (in 'blouchOU_adapt_priorpc', line 68, column 2 to column 26)",
  " (in 'blouchOU_adapt_priorpc', line 69, column 2 to column 27)",
  " (in 'blouchOU_adapt_priorpc', line 70, column 2 to column 64)",
  " (in 'blouchOU_adapt_priorpc', line 72, column 5 to column 58)",
  " (in 'blouchOU_adapt_priorpc', line 71, column 21 to line 73, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 71, column 2 to line 73, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 76, column 6 to column 56)",
  " (in 'blouchOU_adapt_priorpc', line 75, column 17 to line 77, column 5)",
  " (in 'blouchOU_adapt_priorpc', line 75, column 4 to line 77, column 5)",
  " (in 'blouchOU_adapt_priorpc', line 74, column 23 to line 78, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 74, column 2 to line 78, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 79, column 2 to column 61)",
  " (in 'blouchOU_adapt_priorpc', line 80, column 2 to column 30)",
  " (in 'blouchOU_adapt_priorpc', line 81, column 2 to column 33)",
  " (in 'blouchOU_adapt_priorpc', line 82, column 2 to column 31)",
  " (in 'blouchOU_adapt_priorpc', line 83, column 2 to column 46)",
  " (in 'blouchOU_adapt_priorpc', line 85, column 4 to column 51)",
  " (in 'blouchOU_adapt_priorpc', line 84, column 15 to line 86, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 84, column 2 to line 86, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 35, column 2 to column 8)",
  " (in 'blouchOU_adapt_priorpc', line 36, column 2 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 37, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 37, column 2 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 38, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 38, column 11 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 38, column 2 to column 26)",
  " (in 'blouchOU_adapt_priorpc', line 39, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 39, column 2 to column 20)",
  " (in 'blouchOU_adapt_priorpc', line 40, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 40, column 11 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 40, column 2 to column 28)",
  " (in 'blouchOU_adapt_priorpc', line 41, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 41, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 41, column 2 to column 17)",
  " (in 'blouchOU_adapt_priorpc', line 42, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 42, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 42, column 2 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 43, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 43, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 43, column 2 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 44, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 44, column 2 to column 19)",
  " (in 'blouchOU_adapt_priorpc', line 45, column 9 to column 16)",
  " (in 'blouchOU_adapt_priorpc', line 45, column 17 to column 24)",
  " (in 'blouchOU_adapt_priorpc', line 45, column 2 to column 35)",
  " (in 'blouchOU_adapt_priorpc', line 46, column 2 to column 21)",
  " (in 'blouchOU_adapt_priorpc', line 47, column 2 to column 16)",
  " (in 'blouchOU_adapt_priorpc', line 48, column 2 to column 25)",
  " (in 'blouchOU_adapt_priorpc', line 49, column 2 to column 23)",
  " (in 'blouchOU_adapt_priorpc', line 58, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 58, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 59, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 59, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 60, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 60, column 11 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 61, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 66, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 67, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 68, column 9 to column 10)",
  " (in 'blouchOU_adapt_priorpc', line 68, column 11 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 69, column 9 to column 16)",
  " (in 'blouchOU_adapt_priorpc', line 7, column 4 to column 23)",
  " (in 'blouchOU_adapt_priorpc', line 8, column 4 to column 29)",
  " (in 'blouchOU_adapt_priorpc', line 9, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 9, column 4 to column 63)",
  " (in 'blouchOU_adapt_priorpc', line 10, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 10, column 13 to column 20)",
  " (in 'blouchOU_adapt_priorpc', line 10, column 4 to column 53)",
  " (in 'blouchOU_adapt_priorpc', line 11, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 11, column 13 to column 20)",
  " (in 'blouchOU_adapt_priorpc', line 11, column 4 to column 38)",
  " (in 'blouchOU_adapt_priorpc', line 12, column 4 to column 16)",
  " (in 'blouchOU_adapt_priorpc', line 6, column 50 to line 13, column 3)",
  " (in 'blouchOU_adapt_priorpc', line 15, column 4 to column 24)",
  " (in 'blouchOU_adapt_priorpc', line 16, column 4 to column 32)",
  " (in 'blouchOU_adapt_priorpc', line 17, column 11 to column 18)",
  " (in 'blouchOU_adapt_priorpc', line 17, column 4 to column 49)",
  " (in 'blouchOU_adapt_priorpc', line 18, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 18, column 13 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 18, column 4 to column 42)",
  " (in 'blouchOU_adapt_priorpc', line 19, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 19, column 13 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 19, column 4 to column 22)",
  " (in 'blouchOU_adapt_priorpc', line 20, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 20, column 13 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 20, column 4 to column 22)",
  " (in 'blouchOU_adapt_priorpc', line 21, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 21, column 13 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 21, column 4 to column 22)",
  " (in 'blouchOU_adapt_priorpc', line 22, column 11 to column 12)",
  " (in 'blouchOU_adapt_priorpc', line 22, column 13 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 22, column 4 to column 19)",
  " (in 'blouchOU_adapt_priorpc', line 23, column 4 to column 17)",
  " (in 'blouchOU_adapt_priorpc', line 26, column 10 to column 57)",
  " (in 'blouchOU_adapt_priorpc', line 26, column 9 to column 58)",
  " (in 'blouchOU_adapt_priorpc', line 24, column 19 to column 63)",
  " (in 'blouchOU_adapt_priorpc', line 24, column 18 to line 26, column 5)",
  " (in 'blouchOU_adapt_priorpc', line 24, column 4 to line 26, column 58)",
  " (in 'blouchOU_adapt_priorpc', line 27, column 4 to column 88)",
  " (in 'blouchOU_adapt_priorpc', line 28, column 4 to column 43)",
  " (in 'blouchOU_adapt_priorpc', line 29, column 4 to column 60)",
  " (in 'blouchOU_adapt_priorpc', line 30, column 4 to column 103)",
  " (in 'blouchOU_adapt_priorpc', line 31, column 4 to column 14)",
  " (in 'blouchOU_adapt_priorpc', line 14, column 117 to line 32, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
calc_dmX(const T0__& a, const T1__& T_term_arg__, const T2__& X_arg__,
         std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, const T4__& tja_arg__, const T5__& T_term_arg__,
       const T6__& beta_arg__, const T7__& sigma2_x_arg__, std::ostream*
       pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
calc_dmX(const T0__& a, const T1__& T_term_arg__, const T2__& X_arg__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& T_term = stan::math::to_ref(T_term_arg__);
  const auto& X = stan::math::to_ref(X_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 72;
    N = stan::model::rvalue(stan::math::dims(X), "dims(X)",
          stan::model::index_uni(1));
    int Z_adapt = std::numeric_limits<int>::min();
    current_statement__ = 73;
    Z_adapt = stan::model::rvalue(stan::math::dims(X), "dims(X)",
                stan::model::index_uni(2));
    current_statement__ = 74;
    stan::math::validate_non_negative_index("rho", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> rho =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 75;
    stan::model::assign(rho,
      stan::math::subtract(1,
        stan::math::elt_divide(
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply(-a, T_term))),
          stan::math::multiply(a, T_term))), "assigning variable rho");
    current_statement__ = 76;
    stan::math::validate_non_negative_index("rhos", "N", N);
    current_statement__ = 77;
    stan::math::validate_non_negative_index("rhos", "Z_adapt", Z_adapt);
    Eigen::Matrix<local_scalar_t__,-1,-1> rhos =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, Z_adapt,
        DUMMY_VAR__);
    current_statement__ = 78;
    stan::model::assign(rhos, stan::math::rep_matrix(rho, Z_adapt),
      "assigning variable rhos");
    current_statement__ = 79;
    stan::math::validate_non_negative_index("dmX", "N", N);
    current_statement__ = 80;
    stan::math::validate_non_negative_index("dmX", "Z_adapt", Z_adapt);
    Eigen::Matrix<local_scalar_t__,-1,-1> dmX =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, Z_adapt,
        DUMMY_VAR__);
    current_statement__ = 81;
    stan::model::assign(dmX, stan::math::elt_multiply(X, rhos),
      "assigning variable dmX");
    current_statement__ = 82;
    return dmX;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, const T4__& tja_arg__, const T5__& T_term_arg__,
       const T6__& beta_arg__, const T7__& sigma2_x_arg__, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>,
                               stan::base_type_t<T6__>,
                               stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& ta = stan::math::to_ref(ta_arg__);
  const auto& tij = stan::math::to_ref(tij_arg__);
  const auto& tja = stan::math::to_ref(tja_arg__);
  const auto& T_term = stan::math::to_ref(T_term_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& sigma2_x = stan::math::to_ref(sigma2_x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 84;
    N = stan::model::rvalue(stan::math::dims(ta), "dims(ta)",
          stan::model::index_uni(1));
    int Z_adapt = std::numeric_limits<int>::min();
    current_statement__ = 85;
    Z_adapt = stan::model::rvalue(stan::math::dims(beta), "dims(beta)",
                stan::model::index_uni(1));
    current_statement__ = 86;
    stan::math::validate_non_negative_index("ones", "Z_adapt", Z_adapt);
    Eigen::Matrix<local_scalar_t__,-1,1> ones =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Z_adapt, DUMMY_VAR__);
    current_statement__ = 87;
    stan::model::assign(ones, stan::math::rep_vector(1, Z_adapt),
      "assigning variable ones");
    current_statement__ = 88;
    stan::math::validate_non_negative_index("ti", "N", N);
    current_statement__ = 89;
    stan::math::validate_non_negative_index("ti", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> ti =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 90;
    stan::model::assign(ti, stan::math::rep_matrix(T_term, N),
      "assigning variable ti");
    current_statement__ = 91;
    stan::math::validate_non_negative_index("term0", "N", N);
    current_statement__ = 92;
    stan::math::validate_non_negative_index("term0", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term0 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 94;
    stan::math::validate_non_negative_index("term1", "N", N);
    current_statement__ = 95;
    stan::math::validate_non_negative_index("term1", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term1 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 97;
    stan::math::validate_non_negative_index("term2", "N", N);
    current_statement__ = 98;
    stan::math::validate_non_negative_index("term2", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> term2 =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 100;
    stan::math::validate_non_negative_index("Vt", "N", N);
    current_statement__ = 101;
    stan::math::validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> Vt =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    local_scalar_t__ var_opt = DUMMY_VAR__;
    current_statement__ = 108;
    if (stan::math::logical_eq(Z_adapt, 1)) {
      current_statement__ = 106;
      var_opt = ((stan::model::rvalue(beta, "beta", stan::model::index_uni(1))
        * stan::model::rvalue(beta, "beta", stan::model::index_uni(1))) *
        stan::model::rvalue(sigma2_x, "sigma2_x", stan::model::index_uni(1),
          stan::model::index_uni(1)));
    } else {
      current_statement__ = 104;
      var_opt = stan::math::multiply(
                  stan::math::multiply(
                    stan::math::transpose(
                      stan::model::rvalue(beta, "beta",
                        stan::model::index_min_max(1, Z_adapt))), sigma2_x),
                  ones);
    }
    current_statement__ = 109;
    stan::model::assign(term0,
      stan::math::elt_multiply(
        stan::math::multiply(((var_opt + sigma2_y) / (2 * a)),
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply((-2 * a), ta)))),
        stan::math::exp(stan::math::multiply(-a, tij))),
      "assigning variable term0");
    current_statement__ = 110;
    stan::model::assign(term1,
      stan::math::elt_divide(
        stan::math::subtract(1, stan::math::exp(stan::math::multiply(-a, ti))),
        stan::math::multiply(a, ti)), "assigning variable term1");
    current_statement__ = 111;
    stan::model::assign(term2,
      stan::math::elt_divide(
        stan::math::elt_multiply(
          stan::math::exp(stan::math::multiply(-a, tja)),
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply(-a, ti)))),
        stan::math::multiply(a, ti)), "assigning variable term2");
    current_statement__ = 112;
    stan::model::assign(Vt,
      stan::math::add(term0,
        stan::math::multiply(var_opt,
          stan::math::subtract(
            stan::math::elt_multiply(stan::math::elt_multiply(ta, term1),
              stan::math::transpose(term1)),
            stan::math::elt_multiply(
              stan::math::elt_divide(
                stan::math::subtract(1,
                  stan::math::exp(stan::math::multiply(-a, ta))), a),
              stan::math::add(term2, stan::math::transpose(term2)))))),
      "assigning variable Vt");
    current_statement__ = 113;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_blouchOU_adapt_priorpc final : public model_base_crtp<model_blouchOU_adapt_priorpc> {
private:
  int N;
  int Z_adapt;
  Eigen::Matrix<double,-1,1> Y_obs_data__;
  Eigen::Matrix<double,-1,-1> X_obs_data__;
  Eigen::Matrix<double,-1,1> Y_error_data__;
  Eigen::Matrix<double,-1,-1> X_error_data__;
  Eigen::Matrix<double,-1,-1> ta_data__;
  Eigen::Matrix<double,-1,-1> tij_data__;
  Eigen::Matrix<double,-1,-1> tja_data__;
  Eigen::Matrix<double,-1,1> T_term_data__;
  Eigen::Matrix<double,-1,-1> sigma2_x_data__;
  Eigen::Matrix<double,-1,1> hl_prior_data__;
  double vy_prior;
  Eigen::Matrix<double,-1,1> optima_prior_data__;
  Eigen::Matrix<double,-1,1> beta_prior_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_error{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> tij{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> tja{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> T_term{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sigma2_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> hl_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> optima_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_prior{nullptr, 0};
public:
  ~model_blouchOU_adapt_priorpc() {}
  model_blouchOU_adapt_priorpc(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_blouchOU_adapt_priorpc_namespace::model_blouchOU_adapt_priorpc";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 30;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization", "Z_adapt", "int",
        std::vector<size_t>{});
      Z_adapt = std::numeric_limits<int>::min();
      current_statement__ = 31;
      Z_adapt = context__.vals_i("Z_adapt")[(1 - 1)];
      current_statement__ = 32;
      stan::math::validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "Y_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Y_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_obs_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 33;
        Y_obs_flat__ = context__.vals_r("Y_obs");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(Y_obs, Y_obs_flat__[(pos__ - 1)],
            "assigning variable Y_obs", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X_obs", "N", N);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("X_obs", "Z_adapt", Z_adapt);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "X_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(Z_adapt)});
      X_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Z_adapt,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_obs_data__.data(), N,
        Z_adapt);
      {
        std::vector<local_scalar_t__> X_obs_flat__;
        current_statement__ = 36;
        X_obs_flat__ = context__.vals_r("X_obs");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 36;
            stan::model::assign(X_obs, X_obs_flat__[(pos__ - 1)],
              "assigning variable X_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 36;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "Y_error", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&Y_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_error_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 38;
        Y_error_flat__ = context__.vals_r("Y_error");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(Y_error, Y_error_flat__[(pos__ - 1)],
            "assigning variable Y_error", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("X_error", "N", N);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("X_error", "Z_adapt", Z_adapt);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "X_error", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(Z_adapt)});
      X_error_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Z_adapt,
                         std::numeric_limits<double>::quiet_NaN());
      new (&X_error)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_error_data__.data(), N,
        Z_adapt);
      {
        std::vector<local_scalar_t__> X_error_flat__;
        current_statement__ = 41;
        X_error_flat__ = context__.vals_r("X_error");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
          current_statement__ = 41;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 41;
            stan::model::assign(X_error, X_error_flat__[(pos__ - 1)],
              "assigning variable X_error", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 41;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "ta", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      ta_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&ta) Eigen::Map<Eigen::Matrix<double,-1,-1>>(ta_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 44;
        ta_flat__ = context__.vals_r("ta");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 44;
            stan::model::assign(ta, ta_flat__[(pos__ - 1)],
              "assigning variable ta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "tij", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      tij_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&tij) Eigen::Map<Eigen::Matrix<double,-1,-1>>(tij_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 47;
        tij_flat__ = context__.vals_r("tij");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(tij, tij_flat__[(pos__ - 1)],
              "assigning variable tij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("tja", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("tja", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "tja", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      tja_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&tja) Eigen::Map<Eigen::Matrix<double,-1,-1>>(tja_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 50;
        tja_flat__ = context__.vals_r("tja");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(tja, tja_flat__[(pos__ - 1)],
              "assigning variable tja", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("T_term", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "T_term", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      T_term_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&T_term)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(T_term_data__.data(), N);
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 52;
        T_term_flat__ = context__.vals_r("T_term");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(T_term, T_term_flat__[(pos__ - 1)],
            "assigning variable T_term", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("sigma2_x", "Z_adapt", Z_adapt);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("sigma2_x", "Z_adapt", Z_adapt);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "sigma2_x", "double",
        std::vector<size_t>{static_cast<size_t>(Z_adapt),
          static_cast<size_t>(Z_adapt)});
      sigma2_x_data__ = Eigen::Matrix<double,-1,-1>::Constant(Z_adapt,
                          Z_adapt, std::numeric_limits<double>::quiet_NaN());
      new (&sigma2_x)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sigma2_x_data__.data(),
        Z_adapt, Z_adapt);
      {
        std::vector<local_scalar_t__> sigma2_x_flat__;
        current_statement__ = 55;
        sigma2_x_flat__ = context__.vals_r("sigma2_x");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= Z_adapt; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(sigma2_x, sigma2_x_flat__[(pos__ - 1)],
              "assigning variable sigma2_x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization", "hl_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      hl_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&hl_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(hl_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> hl_prior_flat__;
        current_statement__ = 56;
        hl_prior_flat__ = context__.vals_r("hl_prior");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(hl_prior, hl_prior_flat__[(pos__ - 1)],
            "assigning variable hl_prior", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      context__.validate_dims("data initialization", "vy_prior", "double",
        std::vector<size_t>{});
      vy_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      vy_prior = context__.vals_r("vy_prior")[(1 - 1)];
      current_statement__ = 58;
      context__.validate_dims("data initialization", "optima_prior",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      optima_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                              std::numeric_limits<double>::quiet_NaN());
      new (&optima_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(optima_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> optima_prior_flat__;
        current_statement__ = 58;
        optima_prior_flat__ = context__.vals_r("optima_prior");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 58;
          stan::model::assign(optima_prior, optima_prior_flat__[(pos__ - 1)],
            "assigning variable optima_prior", stan::model::index_uni(sym1__));
          current_statement__ = 58;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      context__.validate_dims("data initialization", "beta_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      beta_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> beta_prior_flat__;
        current_statement__ = 59;
        beta_prior_flat__ = context__.vals_r("beta_prior");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 59;
          stan::model::assign(beta_prior, beta_prior_flat__[(pos__ - 1)],
            "assigning variable beta_prior", stan::model::index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("dmX", "N", N);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("dmX", "Z_adapt", Z_adapt);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("Y_sim", "N", N);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("Y_sim_obs", "N", N);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("X_sim", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("X_sim", "Z_adapt", Z_adapt);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("beta_sim", "Z_adapt", Z_adapt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_blouchOU_adapt_priorpc";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchOU_adapt_priorpc_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_blouchOU_adapt_priorpc_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> V =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> L_v =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> dmX =
        Eigen::Matrix<double,-1,-1>::Constant(N, Z_adapt,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double hl = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      hl = stan::math::lognormal_rng(
             stan::model::rvalue(hl_prior, "hl_prior",
               stan::model::index_uni(1)),
             stan::model::rvalue(hl_prior, "hl_prior",
               stan::model::index_uni(2)), base_rng__);
      double vy = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      vy = stan::math::exponential_rng(vy_prior, base_rng__);
      double sigma2_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      a = (stan::math::log(2) / hl);
      Eigen::Matrix<double,-1,1> Y_sim =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Y_sim_obs =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> X_sim =
        Eigen::Matrix<double,-1,-1>::Constant(N, Z_adapt,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_sim =
        Eigen::Matrix<double,-1,1>::Constant(Z_adapt,
          std::numeric_limits<double>::quiet_NaN());
      double optima_sim = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      optima_sim = stan::math::normal_rng(
                     stan::model::rvalue(optima_prior, "optima_prior",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(optima_prior, "optima_prior",
                       stan::model::index_uni(2)), base_rng__);
      current_statement__ = 16;
      for (int i = 1; i <= Z_adapt; ++i) {
        current_statement__ = 14;
        stan::model::assign(beta_sim,
          stan::math::normal_rng(
            stan::model::rvalue(beta_prior, "beta_prior",
              stan::model::index_uni(1)),
            stan::model::rvalue(beta_prior, "beta_prior",
              stan::model::index_uni(2)), base_rng__),
          "assigning variable beta_sim", stan::model::index_uni(i));
      }
      current_statement__ = 21;
      for (int i = 1; i <= Z_adapt; ++i) {
        current_statement__ = 19;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 17;
          stan::model::assign(X_sim,
            stan::math::normal_rng(
              stan::model::rvalue(X_obs, "X_obs", stan::model::index_uni(j),
                stan::model::index_uni(i)),
              stan::model::rvalue(X_error, "X_error",
                stan::model::index_uni(j), stan::model::index_uni(i)),
              base_rng__), "assigning variable X_sim",
            stan::model::index_uni(j), stan::model::index_uni(i));
        }
      }
      current_statement__ = 22;
      stan::model::assign(V,
        calc_V(a, sigma2_y, ta, tij, tja, T_term, beta_sim, sigma2_x,
          pstream__), "assigning variable V");
      current_statement__ = 23;
      stan::model::assign(L_v, stan::math::cholesky_decompose(V),
        "assigning variable L_v");
      current_statement__ = 24;
      stan::model::assign(dmX, calc_dmX(a, T_term, X_sim, pstream__),
        "assigning variable dmX");
      current_statement__ = 25;
      stan::model::assign(mu,
        stan::math::add(optima_sim, stan::math::multiply(dmX, beta_sim)),
        "assigning variable mu");
      current_statement__ = 26;
      stan::model::assign(Y_sim,
        stan::math::multi_normal_cholesky_rng(mu, L_v, base_rng__),
        "assigning variable Y_sim");
      current_statement__ = 29;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 27;
        stan::model::assign(Y_sim_obs,
          stan::math::normal_rng(
            stan::model::rvalue(Y_sim, "Y_sim", stan::model::index_uni(i)),
            stan::model::rvalue(Y_error, "Y_error", stan::model::index_uni(i)),
            base_rng__), "assigning variable Y_sim_obs",
          stan::model::index_uni(i));
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "hl", hl, 0);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "vy", vy, 0);
      out__.write(V);
      out__.write(L_v);
      out__.write(dmX);
      out__.write(mu);
      out__.write(hl);
      out__.write(vy);
      out__.write(sigma2_y);
      out__.write(a);
      out__.write(Y_sim);
      out__.write(Y_sim_obs);
      out__.write(X_sim);
      out__.write(beta_sim);
      out__.write(optima_sim);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"V", "L_v", "dmX", "mu", "hl", "vy", "sigma2_y", "a", "Y_sim",
             "Y_sim_obs", "X_sim", "beta_sim", "optima_sim"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(Z_adapt)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(Z_adapt)},
             std::vector<size_t>{static_cast<size_t>(Z_adapt)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "dmX" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_sim" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_sim" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "optima_sim");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "dmX" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_sim" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Z_adapt; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_sim" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "optima_sim");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"X_sim\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"X_sim\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Z_adapt) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((N * N) + (N * N)) + (N * Z_adapt)) + N) + 1) + 1) + 1) +
      1) + N) + N) + (N * Z_adapt)) + Z_adapt) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((N * N) + (N * N)) + (N * Z_adapt)) + N) + 1) + 1) + 1) +
      1) + N) + N) + (N * Z_adapt)) + Z_adapt) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_blouchOU_adapt_priorpc_namespace::model_blouchOU_adapt_priorpc;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_adapt_priorpc_namespace::profiles__;
}
#endif
#endif
