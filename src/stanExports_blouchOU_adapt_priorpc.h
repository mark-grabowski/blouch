// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_blouchOU_adapt_priorpc_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU_adapt_priorpc', line 55, column 2 to column 16)",
                                                      " (in 'blouchOU_adapt_priorpc', line 56, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 57, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 58, column 2 to column 15)",
                                                      " (in 'blouchOU_adapt_priorpc', line 59, column 2 to column 42)",
                                                      " (in 'blouchOU_adapt_priorpc', line 60, column 2 to column 31)",
                                                      " (in 'blouchOU_adapt_priorpc', line 61, column 2 to column 37)",
                                                      " (in 'blouchOU_adapt_priorpc', line 62, column 2 to column 21)",
                                                      " (in 'blouchOU_adapt_priorpc', line 63, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 64, column 2 to column 20)",
                                                      " (in 'blouchOU_adapt_priorpc', line 65, column 2 to column 22)",
                                                      " (in 'blouchOU_adapt_priorpc', line 66, column 2 to column 21)",
                                                      " (in 'blouchOU_adapt_priorpc', line 67, column 2 to column 17)",
                                                      " (in 'blouchOU_adapt_priorpc', line 68, column 2 to column 32)",
                                                      " (in 'blouchOU_adapt_priorpc', line 70, column 5 to column 37)",
                                                      " (in 'blouchOU_adapt_priorpc', line 69, column 15 to line 71, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 69, column 2 to line 71, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 74, column 6 to column 56)",
                                                      " (in 'blouchOU_adapt_priorpc', line 73, column 17 to line 75, column 5)",
                                                      " (in 'blouchOU_adapt_priorpc', line 73, column 4 to line 75, column 5)",
                                                      " (in 'blouchOU_adapt_priorpc', line 72, column 17 to line 76, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 72, column 2 to line 76, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 77, column 2 to column 61)",
                                                      " (in 'blouchOU_adapt_priorpc', line 78, column 2 to column 30)",
                                                      " (in 'blouchOU_adapt_priorpc', line 79, column 2 to column 33)",
                                                      " (in 'blouchOU_adapt_priorpc', line 81, column 2 to column 30)",
                                                      " (in 'blouchOU_adapt_priorpc', line 82, column 2 to column 46)",
                                                      " (in 'blouchOU_adapt_priorpc', line 84, column 4 to column 51)",
                                                      " (in 'blouchOU_adapt_priorpc', line 83, column 15 to line 85, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 83, column 2 to line 85, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 35, column 2 to column 8)",
                                                      " (in 'blouchOU_adapt_priorpc', line 36, column 2 to column 8)",
                                                      " (in 'blouchOU_adapt_priorpc', line 37, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 37, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 38, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 38, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 38, column 2 to column 20)",
                                                      " (in 'blouchOU_adapt_priorpc', line 39, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 39, column 2 to column 20)",
                                                      " (in 'blouchOU_adapt_priorpc', line 40, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 40, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 40, column 2 to column 22)",
                                                      " (in 'blouchOU_adapt_priorpc', line 41, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 41, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 41, column 2 to column 17)",
                                                      " (in 'blouchOU_adapt_priorpc', line 42, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 42, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 42, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 43, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 43, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 43, column 2 to column 18)",
                                                      " (in 'blouchOU_adapt_priorpc', line 44, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 44, column 2 to column 19)",
                                                      " (in 'blouchOU_adapt_priorpc', line 45, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 45, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 45, column 2 to column 23)",
                                                      " (in 'blouchOU_adapt_priorpc', line 55, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 55, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 56, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 56, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 57, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 57, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 58, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 63, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 64, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 64, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 65, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 66, column 9 to column 10)",
                                                      " (in 'blouchOU_adapt_priorpc', line 7, column 4 to column 23)",
                                                      " (in 'blouchOU_adapt_priorpc', line 8, column 4 to column 23)",
                                                      " (in 'blouchOU_adapt_priorpc', line 9, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 9, column 4 to column 63)",
                                                      " (in 'blouchOU_adapt_priorpc', line 10, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 10, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 10, column 4 to column 41)",
                                                      " (in 'blouchOU_adapt_priorpc', line 11, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 11, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 11, column 4 to column 32)",
                                                      " (in 'blouchOU_adapt_priorpc', line 12, column 4 to column 16)",
                                                      " (in 'blouchOU_adapt_priorpc', line 6, column 50 to line 13, column 3)",
                                                      " (in 'blouchOU_adapt_priorpc', line 15, column 4 to column 24)",
                                                      " (in 'blouchOU_adapt_priorpc', line 16, column 4 to column 26)",
                                                      " (in 'blouchOU_adapt_priorpc', line 17, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 17, column 4 to column 37)",
                                                      " (in 'blouchOU_adapt_priorpc', line 18, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 18, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 18, column 4 to column 42)",
                                                      " (in 'blouchOU_adapt_priorpc', line 19, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 19, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 19, column 4 to column 22)",
                                                      " (in 'blouchOU_adapt_priorpc', line 20, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 20, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 20, column 4 to column 22)",
                                                      " (in 'blouchOU_adapt_priorpc', line 21, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 21, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 21, column 4 to column 22)",
                                                      " (in 'blouchOU_adapt_priorpc', line 22, column 11 to column 12)",
                                                      " (in 'blouchOU_adapt_priorpc', line 22, column 13 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 22, column 4 to column 19)",
                                                      " (in 'blouchOU_adapt_priorpc', line 23, column 4 to column 17)",
                                                      " (in 'blouchOU_adapt_priorpc', line 26, column 10 to column 51)",
                                                      " (in 'blouchOU_adapt_priorpc', line 26, column 9 to column 52)",
                                                      " (in 'blouchOU_adapt_priorpc', line 24, column 13 to column 57)",
                                                      " (in 'blouchOU_adapt_priorpc', line 24, column 12 to line 26, column 5)",
                                                      " (in 'blouchOU_adapt_priorpc', line 24, column 4 to line 26, column 52)",
                                                      " (in 'blouchOU_adapt_priorpc', line 27, column 4 to column 88)",
                                                      " (in 'blouchOU_adapt_priorpc', line 28, column 4 to column 43)",
                                                      " (in 'blouchOU_adapt_priorpc', line 29, column 4 to column 60)",
                                                      " (in 'blouchOU_adapt_priorpc', line 30, column 4 to column 103)",
                                                      " (in 'blouchOU_adapt_priorpc', line 31, column 4 to column 14)",
                                                      " (in 'blouchOU_adapt_priorpc', line 14, column 117 to line 32, column 3)"};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
calc_dmX(const T0__& a, const T1__& T_term_arg__, const T2__& X_arg__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& T_term = to_ref(T_term_arg__);
  const auto& X = to_ref(X_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 69;
    N = dims(X)[(1 - 1)];
    int Z;
    Z = std::numeric_limits<int>::min();
    
    current_statement__ = 70;
    Z = dims(X)[(2 - 1)];
    current_statement__ = 71;
    validate_non_negative_index("rho", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> rho;
    rho = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(rho, DUMMY_VAR__);
    
    current_statement__ = 72;
    assign(rho, nil_index_list(),
      subtract(1,
        elt_divide(subtract(1, stan::math::exp(multiply(-a, T_term))),
          multiply(a, T_term))), "assigning variable rho");
    current_statement__ = 73;
    validate_non_negative_index("rhos", "N", N);
    current_statement__ = 74;
    validate_non_negative_index("rhos", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> rhos;
    rhos = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(rhos, DUMMY_VAR__);
    
    current_statement__ = 75;
    assign(rhos, nil_index_list(), rep_matrix(rho, Z),
      "assigning variable rhos");
    current_statement__ = 76;
    validate_non_negative_index("dmX", "N", N);
    current_statement__ = 77;
    validate_non_negative_index("dmX", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> dmX;
    dmX = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(dmX, DUMMY_VAR__);
    
    current_statement__ = 78;
    assign(dmX, nil_index_list(), elt_multiply(X, rhos),
      "assigning variable dmX");
    current_statement__ = 79;
    return dmX;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_dmX_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& a, const T1__& T_term, const T2__& X,
           std::ostream* pstream__)  const 
{
return calc_dmX(a, T_term, X, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>>>, -1, -1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__,
       const T3__& tij_arg__, const T4__& tja_arg__,
       const T5__& T_term_arg__, const T6__& beta_arg__,
       const T7__& sigma2_x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>>>;
  const auto& ta = to_ref(ta_arg__);
  const auto& tij = to_ref(tij_arg__);
  const auto& tja = to_ref(tja_arg__);
  const auto& T_term = to_ref(T_term_arg__);
  const auto& beta = to_ref(beta_arg__);
  const auto& sigma2_x = to_ref(sigma2_x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    N = dims(ta)[(1 - 1)];
    int Z;
    Z = std::numeric_limits<int>::min();
    
    current_statement__ = 82;
    Z = dims(beta)[(1 - 1)];
    current_statement__ = 83;
    validate_non_negative_index("ones", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, 1> ones;
    ones = Eigen::Matrix<local_scalar_t__, -1, 1>(Z);
    stan::math::fill(ones, DUMMY_VAR__);
    
    current_statement__ = 84;
    assign(ones, nil_index_list(), rep_vector(1, Z),
      "assigning variable ones");
    current_statement__ = 85;
    validate_non_negative_index("ti", "N", N);
    current_statement__ = 86;
    validate_non_negative_index("ti", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> ti;
    ti = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(ti, DUMMY_VAR__);
    
    current_statement__ = 87;
    assign(ti, nil_index_list(), rep_matrix(T_term, N),
      "assigning variable ti");
    current_statement__ = 88;
    validate_non_negative_index("term0", "N", N);
    current_statement__ = 89;
    validate_non_negative_index("term0", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term0;
    term0 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term0, DUMMY_VAR__);
    
    current_statement__ = 91;
    validate_non_negative_index("term1", "N", N);
    current_statement__ = 92;
    validate_non_negative_index("term1", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term1;
    term1 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term1, DUMMY_VAR__);
    
    current_statement__ = 94;
    validate_non_negative_index("term2", "N", N);
    current_statement__ = 95;
    validate_non_negative_index("term2", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term2;
    term2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term2, DUMMY_VAR__);
    
    current_statement__ = 97;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 98;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    local_scalar_t__ var_opt;
    var_opt = DUMMY_VAR__;
    
    current_statement__ = 105;
    if (logical_eq(Z, 1)) {
      current_statement__ = 103;
      var_opt = ((beta[(1 - 1)] * beta[(1 - 1)]) *
                  rvalue(sigma2_x,
                    cons_list(index_uni(1),
                      cons_list(index_uni(1), nil_index_list())), "sigma2_x"));
    } else {
      current_statement__ = 101;
      var_opt = multiply(
                  multiply(
                    transpose(
                      rvalue(beta,
                        cons_list(index_min_max(1, Z), nil_index_list()),
                        "beta")), sigma2_x), ones);
    }
    current_statement__ = 106;
    assign(term0, nil_index_list(),
      elt_multiply(
        multiply(((var_opt + sigma2_y) / (2 * a)),
          subtract(1, stan::math::exp(multiply((-2 * a), ta)))),
        stan::math::exp(multiply(-a, tij))), "assigning variable term0");
    current_statement__ = 107;
    assign(term1, nil_index_list(),
      elt_divide(subtract(1, stan::math::exp(multiply(-a, ti))),
        multiply(a, ti)), "assigning variable term1");
    current_statement__ = 108;
    assign(term2, nil_index_list(),
      elt_divide(
        elt_multiply(stan::math::exp(multiply(-a, tja)),
          subtract(1, stan::math::exp(multiply(-a, ti)))), multiply(a, ti)),
      "assigning variable term2");
    current_statement__ = 109;
    assign(Vt, nil_index_list(),
      add(term0,
        multiply(var_opt,
          subtract(elt_multiply(elt_multiply(ta, term1), transpose(term1)),
            elt_multiply(
              elt_divide(subtract(1, stan::math::exp(multiply(-a, ta))), a),
              add(term2, transpose(term2)))))), "assigning variable Vt");
    current_statement__ = 110;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_V_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>>>, -1, -1>
operator()(const T0__& a, const T1__& sigma2_y, const T2__& ta,
           const T3__& tij, const T4__& tja, const T5__& T_term,
           const T6__& beta, const T7__& sigma2_x, std::ostream* pstream__)  const 
{
return calc_V(a, sigma2_y, ta, tij, tja, T_term, beta, sigma2_x, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU_adapt_priorpc final : public model_base_crtp<model_blouchOU_adapt_priorpc> {
private:
  int N;
  int Z;
  Eigen::Matrix<double, -1, 1> Y_obs;
  Eigen::Matrix<double, -1, -1> X_obs;
  Eigen::Matrix<double, -1, 1> Y_error;
  Eigen::Matrix<double, -1, -1> X_error;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, -1> tij;
  Eigen::Matrix<double, -1, -1> tja;
  Eigen::Matrix<double, -1, 1> T_term;
  Eigen::Matrix<double, -1, -1> sigma2_x;
 
public:
  ~model_blouchOU_adapt_priorpc() { }
  
  inline std::string model_name() const final { return "model_blouchOU_adapt_priorpc"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_blouchOU_adapt_priorpc(stan::io::var_context& context__,
                               unsigned int random_seed__ = 0,
                               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU_adapt_priorpc_namespace::model_blouchOU_adapt_priorpc";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization","Z","int",
          context__.to_vec());
      Z = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      Z = context__.vals_i("Z")[(1 - 1)];
      current_statement__ = 33;
      validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","Y_obs","double",
          context__.to_vec(N));
      Y_obs = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 34;
        assign(Y_obs_flat__, nil_index_list(), context__.vals_r("Y_obs"),
          "assigning variable Y_obs_flat__");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          assign(Y_obs, cons_list(index_uni(sym1__), nil_index_list()),
            Y_obs_flat__[(pos__ - 1)], "assigning variable Y_obs");
          current_statement__ = 34;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 35;
      validate_non_negative_index("X_obs", "N", N);
      current_statement__ = 36;
      validate_non_negative_index("X_obs", "Z", Z);
      current_statement__ = 37;
      context__.validate_dims("data initialization","X_obs","double",
          context__.to_vec(N, Z));
      X_obs = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(X_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_obs_flat__;
        current_statement__ = 37;
        assign(X_obs_flat__, nil_index_list(), context__.vals_r("X_obs"),
          "assigning variable X_obs_flat__");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 37;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 37;
            assign(X_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_obs_flat__[(pos__ - 1)], "assigning variable X_obs");
            current_statement__ = 37;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 38;
      validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 39;
      context__.validate_dims("data initialization","Y_error","double",
          context__.to_vec(N));
      Y_error = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 39;
        assign(Y_error_flat__, nil_index_list(), context__.vals_r("Y_error"),
          "assigning variable Y_error_flat__");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 39;
          assign(Y_error, cons_list(index_uni(sym1__), nil_index_list()),
            Y_error_flat__[(pos__ - 1)], "assigning variable Y_error");
          current_statement__ = 39;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 40;
      validate_non_negative_index("X_error", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("X_error", "Z", Z);
      current_statement__ = 42;
      context__.validate_dims("data initialization","X_error","double",
          context__.to_vec(N, Z));
      X_error = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(X_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_error_flat__;
        current_statement__ = 42;
        assign(X_error_flat__, nil_index_list(), context__.vals_r("X_error"),
          "assigning variable X_error_flat__");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 42;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 42;
            assign(X_error,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_error_flat__[(pos__ - 1)], "assigning variable X_error");
            current_statement__ = 42;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 43;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 45;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 45;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 46;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 47;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 48;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 48;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 48;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 49;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 50;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization","tja","double",
          context__.to_vec(N, N));
      tja = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tja, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 51;
        assign(tja_flat__, nil_index_list(), context__.vals_r("tja"),
          "assigning variable tja_flat__");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 51;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 51;
            assign(tja,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tja_flat__[(pos__ - 1)], "assigning variable tja");
            current_statement__ = 51;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 52;
      validate_non_negative_index("T_term", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","T_term","double",
          context__.to_vec(N));
      T_term = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(T_term, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 53;
        assign(T_term_flat__, nil_index_list(), context__.vals_r("T_term"),
          "assigning variable T_term_flat__");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          assign(T_term, cons_list(index_uni(sym1__), nil_index_list()),
            T_term_flat__[(pos__ - 1)], "assigning variable T_term");
          current_statement__ = 53;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 54;
      validate_non_negative_index("sigma2_x", "Z", Z);
      current_statement__ = 55;
      validate_non_negative_index("sigma2_x", "Z", Z);
      current_statement__ = 56;
      context__.validate_dims("data initialization","sigma2_x","double",
          context__.to_vec(Z, Z));
      sigma2_x = Eigen::Matrix<double, -1, -1>(Z, Z);
      stan::math::fill(sigma2_x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma2_x_flat__;
        current_statement__ = 56;
        assign(sigma2_x_flat__, nil_index_list(),
          context__.vals_r("sigma2_x"), "assigning variable sigma2_x_flat__");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= Z; ++sym2__) {
            current_statement__ = 56;
            assign(sigma2_x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sigma2_x_flat__[(pos__ - 1)], "assigning variable sigma2_x");
            current_statement__ = 56;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 57;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("L_v", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("L_v", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("dmX", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("dmX", "Z", Z);
      current_statement__ = 63;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("Y_sim", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("X_sim", "N", N);
      current_statement__ = 66;
      validate_non_negative_index("X_sim", "Z", Z);
      current_statement__ = 67;
      validate_non_negative_index("Y_sim_obs", "N", N);
      current_statement__ = 68;
      validate_non_negative_index("beta_sim", "Z", Z);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU_adapt_priorpc_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU_adapt_priorpc_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> V;
      V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> L_v;
      L_v = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(L_v, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> dmX;
      dmX = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(dmX, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      hl = lognormal_rng(stan::math::log(0.25), 0.75, base_rng__);
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      vy = exponential_rng(5, base_rng__);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      a = (stan::math::log(2) / hl);
      Eigen::Matrix<double, -1, 1> Y_sim;
      Y_sim = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> X_sim;
      X_sim = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(X_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Y_sim_obs;
      Y_sim_obs = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_sim_obs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta_sim;
      beta_sim = Eigen::Matrix<double, -1, 1>(Z);
      stan::math::fill(beta_sim, std::numeric_limits<double>::quiet_NaN());
      
      double alpha_sim;
      alpha_sim = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      alpha_sim = normal_rng(2, 0.2, base_rng__);
      current_statement__ = 17;
      for (int i = 1; i <= Z; ++i) {
        current_statement__ = 15;
        assign(beta_sim, cons_list(index_uni(i), nil_index_list()),
          normal_rng(0, 0.25, base_rng__), "assigning variable beta_sim");}
      current_statement__ = 22;
      for (int i = 1; i <= Z; ++i) {
        current_statement__ = 20;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 18;
          assign(X_sim,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            normal_rng(
              rvalue(X_obs,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "X_obs"),
              rvalue(X_error,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "X_error"),
              base_rng__), "assigning variable X_sim");}}
      current_statement__ = 23;
      assign(V, nil_index_list(),
        calc_V(a, sigma2_y, ta, tij, tja, T_term, beta_sim,
          sigma2_x, pstream__), "assigning variable V");
      current_statement__ = 24;
      assign(L_v, nil_index_list(), cholesky_decompose(V),
        "assigning variable L_v");
      current_statement__ = 25;
      assign(dmX, nil_index_list(), calc_dmX(a, T_term, X_sim, pstream__),
        "assigning variable dmX");
      current_statement__ = 26;
      assign(mu, nil_index_list(), add(alpha_sim, multiply(dmX, beta_sim)),
        "assigning variable mu");
      current_statement__ = 27;
      assign(Y_sim, nil_index_list(),
        multi_normal_cholesky_rng(mu, L_v, base_rng__),
        "assigning variable Y_sim");
      current_statement__ = 30;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 28;
        assign(Y_sim_obs, cons_list(index_uni(i), nil_index_list()),
          normal_rng(Y_sim[(i - 1)], Y_error[(i - 1)], base_rng__),
          "assigning variable Y_sim_obs");}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_v,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_v"));}}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(dmX,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "dmX"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      vars__.emplace_back(hl);
      vars__.emplace_back(vy);
      vars__.emplace_back(sigma2_y);
      vars__.emplace_back(a);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y_sim[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(X_sim,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X_sim"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y_sim_obs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        vars__.emplace_back(beta_sim[(sym1__ - 1)]);}
      vars__.emplace_back(alpha_sim);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("V");
    names__.emplace_back("L_v");
    names__.emplace_back("dmX");
    names__.emplace_back("mu");
    names__.emplace_back("hl");
    names__.emplace_back("vy");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("a");
    names__.emplace_back("Y_sim");
    names__.emplace_back("X_sim");
    names__.emplace_back("Y_sim_obs");
    names__.emplace_back("beta_sim");
    names__.emplace_back("alpha_sim");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(Z)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(Z)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Z)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dmX" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_sim" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "alpha_sim");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dmX" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_sim" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "alpha_sim");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"X_sim\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"alpha_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"X_sim\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"alpha_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU_adapt_priorpc_namespace::model_blouchOU_adapt_priorpc;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_adapt_priorpc_namespace::profiles__;
}
#endif
#endif
