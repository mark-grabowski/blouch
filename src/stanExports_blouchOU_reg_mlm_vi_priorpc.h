// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-rc3
#include <stan/model/model_header.hpp>
namespace model_blouchOU_reg_mlm_vi_priorpc_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 114> locations_array__ =
  {" (found before start of program)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 75, column 2 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 76, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 77, column 2 to column 22)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 78, column 2 to column 22)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 79, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 80, column 2 to column 15)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 81, column 2 to column 60)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 82, column 2 to column 47)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 83, column 2 to column 71)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 84, column 2 to column 37)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 85, column 2 to column 21)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 86, column 2 to column 23)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 87, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 88, column 2 to column 34)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 89, column 2 to column 30)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 90, column 2 to column 85)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 91, column 2 to column 59)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 93, column 4 to column 45)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 92, column 20 to line 94, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 92, column 2 to line 94, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 95, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 96, column 2 to column 46)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 98, column 4 to column 51)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 97, column 15 to line 99, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 97, column 2 to line 99, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 53, column 2 to column 8)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 54, column 2 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 55, column 2 to column 19)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 56, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 56, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 57, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 57, column 2 to column 20)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 58, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 58, column 11 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 58, column 2 to column 17)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 59, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 59, column 11 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 59, column 2 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 60, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 60, column 12 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 60, column 2 to column 38)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 61, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 61, column 12 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 61, column 2 to column 32)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 62, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 62, column 12 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 62, column 2 to column 32)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 63, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 63, column 12 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 63, column 2 to column 36)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 64, column 8 to column 9)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 64, column 2 to column 21)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 65, column 2 to column 21)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 66, column 2 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 67, column 2 to column 25)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 68, column 2 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 75, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 75, column 11 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 76, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 76, column 11 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 77, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 77, column 11 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 78, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 79, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 80, column 9 to column 10)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 86, column 9 to column 14)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 7, column 2 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 10, column 6 to column 13)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 9, column 4 to line 10, column 13)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 8, column 2 to line 10, column 13)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 11, column 2 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 6, column 36 to line 12, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 14, column 10 to column 27)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 14, column 4 to column 49)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 15, column 4 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 18, column 8 to column 33)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 19, column 8 to column 17)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 17, column 21 to line 20, column 9)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 17, column 6 to line 20, column 9)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 16, column 30 to line 21, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 16, column 4 to line 21, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 22, column 4 to column 28)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 13, column 44 to line 23, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 25, column 8 to column 28)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 26, column 15 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 26, column 18 to column 19)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 26, column 8 to column 24)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 27, column 8 to column 76)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 28, column 8 to column 19)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 24, column 60 to line 29, column 9)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 31, column 11 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 31, column 4 to column 95)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 32, column 4 to column 20)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 30, column 88 to line 33, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 36, column 11 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 36, column 4 to column 109)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 37, column 11 to column 16)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 37, column 4 to column 52)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 39, column 12 to column 37)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 39, column 6 to column 75)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 40, column 6 to column 44)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 38, column 21 to line 41, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 38, column 4 to line 41, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 42, column 4 to column 25)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 34, column 121 to line 43, column 3)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 45, column 11 to column 12)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 45, column 13 to column 18)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 45, column 4 to column 58)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 47, column 6 to column 120)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 46, column 17 to line 48, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 46, column 4 to line 48, column 7)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 49, column 4 to column 26)",
  " (in 'blouchOU_reg_mlm_vi_priorpc', line 44, column 138 to line 50, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>* = nullptr>
int num_matches(const T0__& x_arg__, const T1__& y, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>* = nullptr>
std::vector<int>
which_equal(const T0__& x_arg__, const T1__& y, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T3__>>>,
                              std::is_integral<std::decay_t<T4__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__>,-1,1>
weight_segments(const T0__& a, const T1__& t_beginning_arg__, const T2__&
                t_end_arg__, const T3__& time, const T4__& nodes,
                std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<std::decay_t<T6__>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>>,1,-1>
weights_regimes(const T0__& n_reg, const T1__& a, const T2__&
                t_beginning_arg__, const T3__& t_end_arg__, const T4__& time,
                const T5__& reg_match_arg__, const T6__& nodes, std::ostream*
                pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              std::is_integral<std::decay_t<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T7__>>>>* = nullptr>
Eigen::Matrix<stan::return_type_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,-1>
calc_optima_matrix(const T0__& N, const T1__& n_reg, const T2__& a,
                   const T3__& t_beginning_arg__, const T4__& t_end_arg__,
                   const T5__& times_arg__, const T6__& reg_match_arg__,
                   const T7__& nodes, std::ostream* pstream__);
// int num_matches(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>*>
int num_matches(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<stan::base_type_t<T0__>, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 67;
    n = 0;
    current_statement__ = 70;
    for (int i = 1; i <= stan::math::rows(x); ++i) {
      current_statement__ = 69;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 68;
        n = (n + 1);
      }
    }
    current_statement__ = 71;
    return n;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int which_equal(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>>*>
std::vector<int>
which_equal(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<stan::base_type_t<T0__>, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 73;
    stan::math::validate_non_negative_index("match_positions",
      "num_matches(x, y)", num_matches(x, y, pstream__));
    std::vector<int> match_positions =
      std::vector<int>(num_matches(x, y, pstream__),
        std::numeric_limits<int>::min());
    int pos = std::numeric_limits<int>::min();
    current_statement__ = 75;
    pos = 1;
    current_statement__ = 81;
    for (int i = 1; i <=
         stan::model::rvalue(stan::math::dims(x), "dims(x)",
           stan::model::index_uni(1)); ++i) {
      current_statement__ = 79;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 76;
        stan::model::assign(match_positions, i,
          "assigning variable match_positions", stan::model::index_uni(pos));
        current_statement__ = 77;
        pos = (pos + 1);
      }
    }
    current_statement__ = 82;
    return match_positions;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix calc_V(real, real, matrix, matrix)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::return_type_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__, const T3__&
       tij_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& ta = stan::math::to_ref(ta_arg__);
  const auto& tij = stan::math::to_ref(tij_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 84;
    N = stan::model::rvalue(stan::math::dims(ta), "dims(ta)",
          stan::model::index_uni(1));
    current_statement__ = 85;
    stan::math::validate_non_negative_index("Vt", "N", N);
    current_statement__ = 86;
    stan::math::validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> Vt =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 88;
    stan::model::assign(Vt,
      stan::math::multiply((sigma2_y / (2 * a)),
        stan::math::elt_multiply(
          stan::math::subtract(1,
            stan::math::exp(stan::math::multiply((-(2) * a), ta))),
          stan::math::exp(stan::math::multiply(-(a), tij)))),
      "assigning variable Vt");
    current_statement__ = 89;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector weight_segments(real, vector, vector, real, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T3__>>>,
                              std::is_integral<std::decay_t<T4__>>>*>
Eigen::Matrix<stan::return_type_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__>,-1,1>
weight_segments(const T0__& a, const T1__& t_beginning_arg__, const T2__&
                t_end_arg__, const T3__& time, const T4__& nodes,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 91;
    stan::math::validate_non_negative_index("weights", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__,-1,1> weights =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodes, DUMMY_VAR__);
    current_statement__ = 92;
    stan::model::assign(weights,
      stan::math::append_row(
        stan::math::subtract(
          stan::math::exp(stan::math::multiply(-(a), t_beginning)),
          stan::math::exp(stan::math::multiply(-(a), t_end))),
        stan::math::exp((-(a) * time))), "assigning variable weights");
    current_statement__ = 93;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// row_vector weights_regimes(int, real, vector, vector, real, vector, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<std::decay_t<T6__>>>*>
Eigen::Matrix<stan::return_type_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>>,1,-1>
weights_regimes(const T0__& n_reg, const T1__& a, const T2__&
                t_beginning_arg__, const T3__& t_end_arg__, const T4__& time,
                const T5__& reg_match_arg__, const T6__& nodes, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::return_type_t<T1__, stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__,
                             stan::base_type_t<T5__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  const auto& reg_match = stan::math::to_ref(reg_match_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 95;
    stan::math::validate_non_negative_index("weight_seg", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__,-1,1> weight_seg =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodes, DUMMY_VAR__);
    current_statement__ = 96;
    stan::model::assign(weight_seg,
      weight_segments(a,
        stan::model::rvalue(t_beginning, "t_beginning",
          stan::model::index_min_max(1, (nodes - 1))),
        stan::model::rvalue(t_end, "t_end",
          stan::model::index_min_max(1, (nodes - 1))), time, nodes, pstream__),
      "assigning variable weight_seg");
    current_statement__ = 97;
    stan::math::validate_non_negative_index("reg_weights", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__,-1,1> reg_weights =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_reg, DUMMY_VAR__);
    current_statement__ = 98;
    stan::model::assign(reg_weights, stan::math::rep_vector(0, n_reg),
      "assigning variable reg_weights");
    current_statement__ = 103;
    for (int i = 1; i <= n_reg; ++i) {
      current_statement__ = 99;
      stan::math::validate_non_negative_index("ids",
        "num_matches(reg_match, i)",
        num_matches(reg_match, static_cast<double>(i), pstream__));
      std::vector<int> ids =
        std::vector<int>(num_matches(reg_match, static_cast<double>(i),
                           pstream__), std::numeric_limits<int>::min());
      current_statement__ = 100;
      stan::model::assign(ids,
        which_equal(reg_match, static_cast<double>(i), pstream__),
        "assigning variable ids");
      current_statement__ = 101;
      stan::model::assign(reg_weights,
        stan::math::sum(
          stan::model::rvalue(weight_seg, "weight_seg",
            stan::model::index_multi(ids))),
        "assigning variable reg_weights", stan::model::index_uni(i));
    }
    current_statement__ = 104;
    return stan::math::transpose(reg_weights);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* matrix
   calc_optima_matrix(int, int, real, matrix, matrix, matrix, matrix,
                      array[] int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<std::is_integral<std::decay_t<T0__>>,
                              std::is_integral<std::decay_t<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<std::decay_t<stan::value_type_t<T7__>>>>*>
Eigen::Matrix<stan::return_type_t<T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,-1>
calc_optima_matrix(const T0__& N, const T1__& n_reg, const T2__& a,
                   const T3__& t_beginning_arg__, const T4__& t_end_arg__,
                   const T5__& times_arg__, const T6__& reg_match_arg__,
                   const T7__& nodes, std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T2__, stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& t_beginning = stan::math::to_ref(t_beginning_arg__);
  const auto& t_end = stan::math::to_ref(t_end_arg__);
  const auto& times = stan::math::to_ref(times_arg__);
  const auto& reg_match = stan::math::to_ref(reg_match_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 106;
    stan::math::validate_non_negative_index("optima_matrix", "N", N);
    current_statement__ = 107;
    stan::math::validate_non_negative_index("optima_matrix", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__,-1,-1> optima_matrix =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_reg, DUMMY_VAR__);
    current_statement__ = 108;
    stan::model::assign(optima_matrix, stan::math::rep_matrix(0, N, n_reg),
      "assigning variable optima_matrix");
    current_statement__ = 111;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 109;
      stan::model::assign(optima_matrix,
        weights_regimes(n_reg, a,
          stan::math::transpose(
            stan::model::rvalue(t_beginning, "t_beginning",
              stan::model::index_uni(i), stan::model::index_omni())),
          stan::math::transpose(
            stan::model::rvalue(t_end, "t_end", stan::model::index_uni(i),
              stan::model::index_omni())),
          stan::model::rvalue(times, "times", stan::model::index_uni(i),
            stan::model::index_uni(1)),
          stan::math::transpose(
            stan::model::rvalue(reg_match, "reg_match",
              stan::model::index_uni(i), stan::model::index_omni())),
          stan::model::rvalue(nodes, "nodes", stan::model::index_uni(i)),
          pstream__), "assigning variable optima_matrix",
        stan::model::index_uni(i), stan::model::index_omni());
    }
    current_statement__ = 112;
    return optima_matrix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_blouchOU_reg_mlm_vi_priorpc final : public model_base_crtp<model_blouchOU_reg_mlm_vi_priorpc> {
private:
  int N;
  int n_reg;
  int max_node_num;
  Eigen::Matrix<double,-1,1> Y_obs_data__;
  Eigen::Matrix<double,-1,1> Y_error_data__;
  Eigen::Matrix<double,-1,-1> ta_data__;
  Eigen::Matrix<double,-1,-1> tij_data__;
  Eigen::Matrix<double,-1,-1> t_beginning_data__;
  Eigen::Matrix<double,-1,-1> t_end_data__;
  Eigen::Matrix<double,-1,-1> times_data__;
  Eigen::Matrix<double,-1,-1> reg_match_data__;
  std::vector<int> nodes;
  Eigen::Matrix<double,-1,1> hl_prior_data__;
  double vy_prior;
  Eigen::Matrix<double,-1,1> optima_prior_data__;
  Eigen::Matrix<double,-1,1> sigma_prior_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> tij{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> t_beginning{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> t_end{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> times{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> reg_match{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> hl_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> optima_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_prior{nullptr, 0};
public:
  ~model_blouchOU_reg_mlm_vi_priorpc() {}
  model_blouchOU_reg_mlm_vi_priorpc(stan::io::var_context& context__,
                                    unsigned int random_seed__ = 0,
                                    std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_mlm_vi_priorpc_namespace::model_blouchOU_reg_mlm_vi_priorpc";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 26;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 27;
      context__.validate_dims("data initialization", "n_reg", "int",
        std::vector<size_t>{});
      n_reg = std::numeric_limits<int>::min();
      current_statement__ = 27;
      n_reg = context__.vals_i("n_reg")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization", "max_node_num", "int",
        std::vector<size_t>{});
      max_node_num = std::numeric_limits<int>::min();
      current_statement__ = 28;
      max_node_num = context__.vals_i("max_node_num")[(1 - 1)];
      current_statement__ = 29;
      stan::math::validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "Y_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Y_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_obs_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 30;
        Y_obs_flat__ = context__.vals_r("Y_obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y_obs, Y_obs_flat__[(pos__ - 1)],
            "assigning variable Y_obs", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 31;
      stan::math::validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "Y_error", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&Y_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_error_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 32;
        Y_error_flat__ = context__.vals_r("Y_error");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y_error, Y_error_flat__[(pos__ - 1)],
            "assigning variable Y_error", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("ta", "N", N);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "ta", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      ta_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&ta) Eigen::Map<Eigen::Matrix<double,-1,-1>>(ta_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 35;
        ta_flat__ = context__.vals_r("ta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(ta, ta_flat__[(pos__ - 1)],
              "assigning variable ta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("tij", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "tij", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      tij_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&tij) Eigen::Map<Eigen::Matrix<double,-1,-1>>(tij_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 38;
        tij_flat__ = context__.vals_r("tij");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(tij, tij_flat__[(pos__ - 1)],
              "assigning variable tij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("t_beginning", "N", N);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("t_beginning", "max_node_num",
        max_node_num);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "t_beginning", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      t_beginning_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                             max_node_num,
                             std::numeric_limits<double>::quiet_NaN());
      new (&t_beginning)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(t_beginning_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> t_beginning_flat__;
        current_statement__ = 41;
        t_beginning_flat__ = context__.vals_r("t_beginning");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(t_beginning, t_beginning_flat__[(pos__ - 1)],
              "assigning variable t_beginning",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("t_end", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("t_end", "max_node_num",
        max_node_num);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "t_end", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      t_end_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, max_node_num,
                       std::numeric_limits<double>::quiet_NaN());
      new (&t_end)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(t_end_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> t_end_flat__;
        current_statement__ = 44;
        t_end_flat__ = context__.vals_r("t_end");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(t_end, t_end_flat__[(pos__ - 1)],
              "assigning variable t_end", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("times", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("times", "max_node_num",
        max_node_num);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "times", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      times_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, max_node_num,
                       std::numeric_limits<double>::quiet_NaN());
      new (&times)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(times_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> times_flat__;
        current_statement__ = 47;
        times_flat__ = context__.vals_r("times");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(times, times_flat__[(pos__ - 1)],
              "assigning variable times", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("reg_match", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("reg_match", "max_node_num",
        max_node_num);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "reg_match", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(max_node_num)});
      reg_match_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                           max_node_num,
                           std::numeric_limits<double>::quiet_NaN());
      new (&reg_match)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(reg_match_data__.data(), N,
        max_node_num);
      {
        std::vector<local_scalar_t__> reg_match_flat__;
        current_statement__ = 50;
        reg_match_flat__ = context__.vals_r("reg_match");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(reg_match, reg_match_flat__[(pos__ - 1)],
              "assigning variable reg_match", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("nodes", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "nodes", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      nodes = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 52;
      nodes = context__.vals_i("nodes");
      current_statement__ = 53;
      context__.validate_dims("data initialization", "hl_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      hl_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&hl_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(hl_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> hl_prior_flat__;
        current_statement__ = 53;
        hl_prior_flat__ = context__.vals_r("hl_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(hl_prior, hl_prior_flat__[(pos__ - 1)],
            "assigning variable hl_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      context__.validate_dims("data initialization", "vy_prior", "double",
        std::vector<size_t>{});
      vy_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      vy_prior = context__.vals_r("vy_prior")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization", "optima_prior",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      optima_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                              std::numeric_limits<double>::quiet_NaN());
      new (&optima_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(optima_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> optima_prior_flat__;
        current_statement__ = 55;
        optima_prior_flat__ = context__.vals_r("optima_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(optima_prior, optima_prior_flat__[(pos__ - 1)],
            "assigning variable optima_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization", "sigma_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      sigma_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                             std::numeric_limits<double>::quiet_NaN());
      new (&sigma_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> sigma_prior_flat__;
        current_statement__ = 56;
        sigma_prior_flat__ = context__.vals_r("sigma_prior");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(sigma_prior, sigma_prior_flat__[(pos__ - 1)],
            "assigning variable sigma_prior", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("V", "N", N);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("L_v", "N", N);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("dmX", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("dmX", "n_reg", n_reg);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("Y_sim_obs", "N", N);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("Y_sim", "N", N);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("optima", "n_reg", n_reg);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_blouchOU_reg_mlm_vi_priorpc";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-rc3",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_mlm_vi_priorpc_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_mlm_vi_priorpc_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_blouchOU_reg_mlm_vi_priorpc_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> V =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> L_v =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> dmX =
        Eigen::Matrix<double,-1,-1>::Constant(N, n_reg,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Y_sim_obs =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Y_sim =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double hl = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      hl = stan::math::lognormal_rng(
             stan::model::rvalue(hl_prior, "hl_prior",
               stan::model::index_uni(1)),
             stan::model::rvalue(hl_prior, "hl_prior",
               stan::model::index_uni(2)), base_rng__);
      double vy = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      vy = stan::math::exponential_rng(vy_prior, base_rng__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sigma = stan::math::abs(
                stan::math::normal_rng(
                  stan::model::rvalue(sigma_prior, "sigma_prior",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(sigma_prior, "sigma_prior",
                    stan::model::index_uni(2)), base_rng__));
      double sigma2_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      a = (stan::math::log(2) / hl);
      Eigen::Matrix<double,-1,1> optima =
        Eigen::Matrix<double,-1,1>::Constant(n_reg,
          std::numeric_limits<double>::quiet_NaN());
      double optima_bar = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      stan::model::assign(V, calc_V(a, sigma2_y, ta, tij, pstream__),
        "assigning variable V");
      current_statement__ = 15;
      stan::model::assign(L_v, stan::math::cholesky_decompose(V),
        "assigning variable L_v");
      current_statement__ = 16;
      stan::model::assign(dmX,
        calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times, reg_match,
          nodes, pstream__), "assigning variable dmX");
      current_statement__ = 17;
      optima_bar = stan::math::normal_rng(
                     stan::model::rvalue(optima_prior, "optima_prior",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(optima_prior, "optima_prior",
                       stan::model::index_uni(2)), base_rng__);
      current_statement__ = 20;
      for (int i = 1; i <= n_reg; ++i) {
        current_statement__ = 18;
        stan::model::assign(optima,
          stan::math::normal_rng(optima_bar, sigma, base_rng__),
          "assigning variable optima", stan::model::index_uni(i));
      }
      current_statement__ = 21;
      stan::model::assign(mu, stan::math::multiply(dmX, optima),
        "assigning variable mu");
      current_statement__ = 22;
      stan::model::assign(Y_sim,
        stan::math::multi_normal_cholesky_rng(mu, L_v, base_rng__),
        "assigning variable Y_sim");
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        stan::model::assign(Y_sim_obs,
          stan::math::normal_rng(
            stan::model::rvalue(Y_sim, "Y_sim", stan::model::index_uni(i)),
            stan::model::rvalue(Y_error, "Y_error", stan::model::index_uni(i)),
            base_rng__), "assigning variable Y_sim_obs",
          stan::model::index_uni(i));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "hl", hl, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "vy", vy, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      out__.write(V);
      out__.write(L_v);
      out__.write(dmX);
      out__.write(Y_sim_obs);
      out__.write(Y_sim);
      out__.write(mu);
      out__.write(hl);
      out__.write(vy);
      out__.write(sigma);
      out__.write(sigma2_y);
      out__.write(a);
      out__.write(optima);
      out__.write(optima_bar);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"V", "L_v", "dmX", "Y_sim_obs", "Y_sim", "mu", "hl", "vy",
             "sigma", "sigma2_y", "a", "optima", "optima_bar"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(n_reg)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n_reg)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "dmX" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        param_names__.emplace_back(std::string() + "optima" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "optima_bar");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "V" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_v" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "dmX" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Y_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        param_names__.emplace_back(std::string() + "optima" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "optima_bar");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_bar\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_reg) + "},\"block\":\"generated_quantities\"},{\"name\":\"optima_bar\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((N * N) + (N * N)) + (N * n_reg)) + N) + N) + N) + 1) + 1)
      + 1) + 1) + 1) + n_reg) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((N * N) + (N * N)) + (N * n_reg)) + N) + N) + N) + 1) + 1)
      + 1) + 1) + 1) + n_reg) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_blouchOU_reg_mlm_vi_priorpc_namespace::model_blouchOU_reg_mlm_vi_priorpc;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_reg_mlm_vi_priorpc_namespace::profiles__;
}
#endif
#endif
