// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_Dalec_analysis_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 190> locations_array__ =
  {" (found before start of program)",
  " (in 'Dalec_analysis', line 38, column 2 to column 37)",
  " (in 'Dalec_analysis', line 39, column 2 to column 43)",
  " (in 'Dalec_analysis', line 40, column 2 to column 28)",
  " (in 'Dalec_analysis', line 41, column 2 to column 13)",
  " (in 'Dalec_analysis', line 42, column 2 to column 12)",
  " (in 'Dalec_analysis', line 45, column 2 to column 19)",
  " (in 'Dalec_analysis', line 47, column 2 to column 41)",
  " (in 'Dalec_analysis', line 48, column 2 to column 37)",
  " (in 'Dalec_analysis', line 51, column 2 to column 38)",
  " (in 'Dalec_analysis', line 52, column 2 to column 29)",
  " (in 'Dalec_analysis', line 54, column 2 to column 35)",
  " (in 'Dalec_analysis', line 57, column 2 to column 30)",
  " (in 'Dalec_analysis', line 58, column 2 to column 32)",
  " (in 'Dalec_analysis', line 59, column 2 to column 29)",
  " (in 'Dalec_analysis', line 60, column 2 to column 26)",
  " (in 'Dalec_analysis', line 61, column 2 to column 32)",
  " (in 'Dalec_analysis', line 62, column 2 to column 25)",
  " (in 'Dalec_analysis', line 63, column 2 to column 30)",
  " (in 'Dalec_analysis', line 66, column 2 to column 76)",
  " (in 'Dalec_analysis', line 67, column 2 to column 74)",
  " (in 'Dalec_analysis', line 87, column 2 to column 63)",
  " (in 'Dalec_analysis', line 88, column 2 to column 55)",
  " (in 'Dalec_analysis', line 92, column 2 to column 57)",
  " (in 'Dalec_analysis', line 130, column 2 to column 26)",
  " (in 'Dalec_analysis', line 131, column 2 to column 28)",
  " (in 'Dalec_analysis', line 132, column 2 to column 74)",
  " (in 'Dalec_analysis', line 133, column 2 to column 70)",
  " (in 'Dalec_analysis', line 135, column 2 to column 13)",
  " (in 'Dalec_analysis', line 136, column 2 to column 19)",
  " (in 'Dalec_analysis', line 137, column 2 to column 18)",
  " (in 'Dalec_analysis', line 138, column 2 to column 18)",
  " (in 'Dalec_analysis', line 139, column 2 to column 23)",
  " (in 'Dalec_analysis', line 140, column 2 to column 17)",
  " (in 'Dalec_analysis', line 142, column 2 to column 29)",
  " (in 'Dalec_analysis', line 143, column 2 to column 35)",
  " (in 'Dalec_analysis', line 145, column 2 to column 79)",
  " (in 'Dalec_analysis', line 146, column 2 to column 75)",
  " (in 'Dalec_analysis', line 147, column 2 to column 66)",
  " (in 'Dalec_analysis', line 148, column 2 to column 58)",
  " (in 'Dalec_analysis', line 158, column 2 to column 90)",
  " (in 'Dalec_analysis', line 159, column 2 to column 78)",
  " (in 'Dalec_analysis', line 163, column 2 to column 97)",
  " (in 'Dalec_analysis', line 164, column 2 to column 63)",
  " (in 'Dalec_analysis', line 68, column 2 to column 69)",
  " (in 'Dalec_analysis', line 69, column 2 to column 83)",
  " (in 'Dalec_analysis', line 70, column 2 to column 69)",
  " (in 'Dalec_analysis', line 73, column 4 to column 34)",
  " (in 'Dalec_analysis', line 79, column 8 to column 20)",
  " (in 'Dalec_analysis', line 78, column 18 to line 80, column 7)",
  " (in 'Dalec_analysis', line 78, column 6 to line 80, column 7)",
  " (in 'Dalec_analysis', line 77, column 24 to line 81, column 5)",
  " (in 'Dalec_analysis', line 77, column 4 to line 81, column 5)",
  " (in 'Dalec_analysis', line 72, column 22 to line 82, column 3)",
  " (in 'Dalec_analysis', line 72, column 2 to line 82, column 3)",
  " (in 'Dalec_analysis', line 83, column 2 to column 64)",
  " (in 'Dalec_analysis', line 85, column 4 to column 47)",
  " (in 'Dalec_analysis', line 84, column 20 to line 86, column 5)",
  " (in 'Dalec_analysis', line 84, column 2 to line 86, column 5)",
  " (in 'Dalec_analysis', line 91, column 2 to column 133)",
  " (in 'Dalec_analysis', line 150, column 4 to column 37)",
  " (in 'Dalec_analysis', line 153, column 8 to column 23)",
  " (in 'Dalec_analysis', line 152, column 18 to line 154, column 7)",
  " (in 'Dalec_analysis', line 152, column 6 to line 154, column 7)",
  " (in 'Dalec_analysis', line 151, column 24 to line 155, column 5)",
  " (in 'Dalec_analysis', line 151, column 4 to line 155, column 5)",
  " (in 'Dalec_analysis', line 149, column 22 to line 156, column 3)",
  " (in 'Dalec_analysis', line 149, column 2 to line 156, column 3)",
  " (in 'Dalec_analysis', line 157, column 2 to column 70)",
  " (in 'Dalec_analysis', line 166, column 2 to column 28)",
  " (in 'Dalec_analysis', line 167, column 2 to column 40)",
  " (in 'Dalec_analysis', line 168, column 2 to column 38)",
  " (in 'Dalec_analysis', line 169, column 2 to column 38)",
  " (in 'Dalec_analysis', line 170, column 2 to column 48)",
  " (in 'Dalec_analysis', line 171, column 2 to column 36)",
  " (in 'Dalec_analysis', line 174, column 4 to column 35)",
  " (in 'Dalec_analysis', line 173, column 20 to line 175, column 3)",
  " (in 'Dalec_analysis', line 173, column 2 to line 175, column 3)",
  " (in 'Dalec_analysis', line 178, column 4 to column 98)",
  " (in 'Dalec_analysis', line 176, column 23 to line 179, column 3)",
  " (in 'Dalec_analysis', line 176, column 2 to line 179, column 3)",
  " (in 'Dalec_analysis', line 96, column 2 to column 49)",
  " (in 'Dalec_analysis', line 97, column 2 to column 46)",
  " (in 'Dalec_analysis', line 100, column 2 to column 31)",
  " (in 'Dalec_analysis', line 101, column 2 to column 38)",
  " (in 'Dalec_analysis', line 102, column 2 to column 34)",
  " (in 'Dalec_analysis', line 104, column 2 to column 36)",
  " (in 'Dalec_analysis', line 112, column 2 to column 28)",
  " (in 'Dalec_analysis', line 113, column 2 to column 42)",
  " (in 'Dalec_analysis', line 114, column 2 to column 25)",
  " (in 'Dalec_analysis', line 117, column 4 to column 71)",
  " (in 'Dalec_analysis', line 116, column 21 to line 119, column 3)",
  " (in 'Dalec_analysis', line 116, column 2 to line 119, column 3)",
  " (in 'Dalec_analysis', line 121, column 4 to column 57)",
  " (in 'Dalec_analysis', line 120, column 20 to line 122, column 3)",
  " (in 'Dalec_analysis', line 120, column 2 to line 122, column 3)",
  " (in 'Dalec_analysis', line 125, column 9 to column 15)",
  " (in 'Dalec_analysis', line 125, column 17 to column 23)",
  " (in 'Dalec_analysis', line 125, column 2 to column 61)",
  " (in 'Dalec_analysis', line 126, column 2 to column 59)",
  " (in 'Dalec_analysis', line 17, column 2 to column 23)",
  " (in 'Dalec_analysis', line 18, column 2 to column 22)",
  " (in 'Dalec_analysis', line 19, column 2 to column 25)",
  " (in 'Dalec_analysis', line 20, column 9 to column 16)",
  " (in 'Dalec_analysis', line 20, column 2 to column 24)",
  " (in 'Dalec_analysis', line 21, column 2 to column 15)",
  " (in 'Dalec_analysis', line 22, column 16 to column 24)",
  " (in 'Dalec_analysis', line 22, column 2 to column 26)",
  " (in 'Dalec_analysis', line 23, column 9 to column 15)",
  " (in 'Dalec_analysis', line 23, column 2 to column 23)",
  " (in 'Dalec_analysis', line 24, column 2 to column 15)",
  " (in 'Dalec_analysis', line 25, column 16 to column 24)",
  " (in 'Dalec_analysis', line 25, column 2 to column 26)",
  " (in 'Dalec_analysis', line 26, column 9 to column 16)",
  " (in 'Dalec_analysis', line 26, column 2 to column 30)",
  " (in 'Dalec_analysis', line 27, column 18 to column 24)",
  " (in 'Dalec_analysis', line 27, column 2 to column 34)",
  " (in 'Dalec_analysis', line 29, column 9 to column 15)",
  " (in 'Dalec_analysis', line 29, column 17 to column 23)",
  " (in 'Dalec_analysis', line 29, column 2 to column 27)",
  " (in 'Dalec_analysis', line 30, column 2 to column 24)",
  " (in 'Dalec_analysis', line 31, column 2 to column 23)",
  " (in 'Dalec_analysis', line 32, column 2 to column 21)",
  " (in 'Dalec_analysis', line 33, column 2 to column 23)",
  " (in 'Dalec_analysis', line 34, column 8 to column 15)",
  " (in 'Dalec_analysis', line 34, column 2 to column 55)",
  " (in 'Dalec_analysis', line 35, column 8 to column 15)",
  " (in 'Dalec_analysis', line 35, column 2 to column 52)",
  " (in 'Dalec_analysis', line 38, column 18 to column 26)",
  " (in 'Dalec_analysis', line 39, column 18 to column 26)",
  " (in 'Dalec_analysis', line 40, column 9 to column 17)",
  " (in 'Dalec_analysis', line 47, column 24 to column 30)",
  " (in 'Dalec_analysis', line 48, column 24 to column 30)",
  " (in 'Dalec_analysis', line 51, column 18 to column 24)",
  " (in 'Dalec_analysis', line 52, column 9 to column 15)",
  " (in 'Dalec_analysis', line 54, column 18 to column 24)",
  " (in 'Dalec_analysis', line 57, column 9 to column 16)",
  " (in 'Dalec_analysis', line 58, column 9 to column 16)",
  " (in 'Dalec_analysis', line 59, column 9 to column 15)",
  " (in 'Dalec_analysis', line 60, column 9 to column 15)",
  " (in 'Dalec_analysis', line 60, column 16 to column 22)",
  " (in 'Dalec_analysis', line 61, column 9 to column 15)",
  " (in 'Dalec_analysis', line 61, column 16 to column 22)",
  " (in 'Dalec_analysis', line 62, column 9 to column 15)",
  " (in 'Dalec_analysis', line 63, column 9 to column 15)",
  " (in 'Dalec_analysis', line 63, column 16 to column 22)",
  " (in 'Dalec_analysis', line 66, column 9 to column 15)",
  " (in 'Dalec_analysis', line 66, column 17 to column 23)",
  " (in 'Dalec_analysis', line 67, column 9 to column 15)",
  " (in 'Dalec_analysis', line 67, column 17 to column 23)",
  " (in 'Dalec_analysis', line 87, column 9 to column 15)",
  " (in 'Dalec_analysis', line 87, column 17 to column 23)",
  " (in 'Dalec_analysis', line 88, column 9 to column 15)",
  " (in 'Dalec_analysis', line 88, column 17 to column 23)",
  " (in 'Dalec_analysis', line 92, column 9 to column 15)",
  " (in 'Dalec_analysis', line 130, column 9 to column 16)",
  " (in 'Dalec_analysis', line 131, column 9 to column 15)",
  " (in 'Dalec_analysis', line 132, column 9 to column 15)",
  " (in 'Dalec_analysis', line 132, column 17 to column 23)",
  " (in 'Dalec_analysis', line 133, column 9 to column 15)",
  " (in 'Dalec_analysis', line 133, column 17 to column 23)",
  " (in 'Dalec_analysis', line 142, column 9 to column 15)",
  " (in 'Dalec_analysis', line 142, column 16 to column 22)",
  " (in 'Dalec_analysis', line 143, column 9 to column 15)",
  " (in 'Dalec_analysis', line 143, column 16 to column 22)",
  " (in 'Dalec_analysis', line 145, column 9 to column 15)",
  " (in 'Dalec_analysis', line 145, column 17 to column 23)",
  " (in 'Dalec_analysis', line 146, column 9 to column 15)",
  " (in 'Dalec_analysis', line 146, column 17 to column 23)",
  " (in 'Dalec_analysis', line 147, column 9 to column 15)",
  " (in 'Dalec_analysis', line 147, column 17 to column 23)",
  " (in 'Dalec_analysis', line 148, column 9 to column 15)",
  " (in 'Dalec_analysis', line 148, column 17 to column 23)",
  " (in 'Dalec_analysis', line 158, column 9 to column 15)",
  " (in 'Dalec_analysis', line 158, column 17 to column 23)",
  " (in 'Dalec_analysis', line 159, column 9 to column 15)",
  " (in 'Dalec_analysis', line 159, column 17 to column 23)",
  " (in 'Dalec_analysis', line 163, column 9 to column 15)",
  " (in 'Dalec_analysis', line 163, column 17 to column 23)",
  " (in 'Dalec_analysis', line 164, column 9 to column 15)",
  " (in 'Dalec_analysis', line 164, column 17 to column 23)",
  " (in 'Dalec_analysis', line 7, column 8 to column 31)",
  " (in 'Dalec_analysis', line 8, column 8 to column 37)",
  " (in 'Dalec_analysis', line 9, column 15 to column 16)",
  " (in 'Dalec_analysis', line 9, column 8 to column 25)",
  " (in 'Dalec_analysis', line 10, column 8 to column 23)",
  " (in 'Dalec_analysis', line 12, column 12 to column 50)",
  " (in 'Dalec_analysis', line 11, column 8 to line 12, column 50)",
  " (in 'Dalec_analysis', line 13, column 8 to column 22)",
  " (in 'Dalec_analysis', line 6, column 80 to line 14, column 5)"};
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,1>
merge_missing(const std::vector<int>& miss_indexes, const T1__& x_obs_arg__,
              const T2__& x_miss_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,1>
merge_missing(const std::vector<int>& miss_indexes, const T1__& x_obs_arg__,
              const T2__& x_miss_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& x_obs = stan::math::to_ref(x_obs_arg__);
  const auto& x_miss = stan::math::to_ref(x_miss_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 181;
    N = stan::model::rvalue(stan::math::dims(x_obs), "dims(x_obs)",
          stan::model::index_uni(1));
    int N_miss = std::numeric_limits<int>::min();
    current_statement__ = 182;
    N_miss = stan::model::rvalue(stan::math::dims(x_miss), "dims(x_miss)",
               stan::model::index_uni(1));
    current_statement__ = 183;
    stan::math::validate_non_negative_index("merged", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> merged =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 185;
    stan::model::assign(merged, x_obs, "assigning variable merged");
    current_statement__ = 187;
    for (int i = 1; i <= N_miss; ++i) {
      current_statement__ = 186;
      stan::model::assign(merged,
        stan::model::rvalue(x_miss, "x_miss", stan::model::index_uni(i)),
        "assigning variable merged",
        stan::model::index_uni(
          stan::model::rvalue(miss_indexes, "miss_indexes",
            stan::model::index_uni(i))));
    }
    current_statement__ = 188;
    return merged;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_Dalec_analysis final : public model_base_crtp<model_Dalec_analysis> {
private:
  int N_total;
  int N_pops;
  int N_regimes;
  Eigen::Matrix<double,-1,1> z_obs_data__;
  int N_z_miss;
  std::vector<int> z_missidx;
  Eigen::Matrix<double,-1,1> x_obs_data__;
  int N_x_miss;
  std::vector<int> x_missidx;
  Eigen::Matrix<double,-1,1> z_error_obs_data__;
  Eigen::Matrix<double,-1,1> x_error_data__;
  Eigen::Matrix<double,-1,-1> M_data__;
  Eigen::Matrix<double,-1,1> alpha_prior_data__;
  Eigen::Matrix<double,-1,1> beta_prior_data__;
  Eigen::Matrix<double,-1,1> es_prior_data__;
  double nu_cor;
  std::vector<int> reg_idx;
  std::vector<int> pop_idx;
  Eigen::Map<Eigen::Matrix<double,-1,1>> z_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> z_error_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x_error{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> M{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_prior{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> es_prior{nullptr, 0};
public:
  ~model_Dalec_analysis() {}
  model_Dalec_analysis(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_Dalec_analysis_namespace::model_Dalec_analysis";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 100;
      context__.validate_dims("data initialization", "N_total", "int",
        std::vector<size_t>{});
      N_total = std::numeric_limits<int>::min();
      current_statement__ = 100;
      N_total = context__.vals_i("N_total")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "N_total", N_total, 1);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "N_pops", "int",
        std::vector<size_t>{});
      N_pops = std::numeric_limits<int>::min();
      current_statement__ = 101;
      N_pops = context__.vals_i("N_pops")[(1 - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "N_pops", N_pops, 1);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "N_regimes", "int",
        std::vector<size_t>{});
      N_regimes = std::numeric_limits<int>::min();
      current_statement__ = 102;
      N_regimes = context__.vals_i("N_regimes")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "N_regimes", N_regimes,
        1);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("z_obs", "N_total", N_total);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "z_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N_total)});
      z_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N_total,
                       std::numeric_limits<double>::quiet_NaN());
      new (&z_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(z_obs_data__.data(), N_total);
      {
        std::vector<local_scalar_t__> z_obs_flat__;
        current_statement__ = 104;
        z_obs_flat__ = context__.vals_r("z_obs");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
          current_statement__ = 104;
          stan::model::assign(z_obs, z_obs_flat__[(pos__ - 1)],
            "assigning variable z_obs", stan::model::index_uni(sym1__));
          current_statement__ = 104;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 105;
      context__.validate_dims("data initialization", "N_z_miss", "int",
        std::vector<size_t>{});
      N_z_miss = std::numeric_limits<int>::min();
      current_statement__ = 105;
      N_z_miss = context__.vals_i("N_z_miss")[(1 - 1)];
      current_statement__ = 106;
      stan::math::validate_non_negative_index("z_missidx", "N_z_miss",
        N_z_miss);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "z_missidx", "int",
        std::vector<size_t>{static_cast<size_t>(N_z_miss)});
      z_missidx = std::vector<int>(N_z_miss, std::numeric_limits<int>::min());
      current_statement__ = 107;
      z_missidx = context__.vals_i("z_missidx");
      current_statement__ = 108;
      stan::math::validate_non_negative_index("x_obs", "N_pops", N_pops);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "x_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N_pops)});
      x_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N_pops,
                       std::numeric_limits<double>::quiet_NaN());
      new (&x_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(x_obs_data__.data(), N_pops);
      {
        std::vector<local_scalar_t__> x_obs_flat__;
        current_statement__ = 109;
        x_obs_flat__ = context__.vals_r("x_obs");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 109;
          stan::model::assign(x_obs, x_obs_flat__[(pos__ - 1)],
            "assigning variable x_obs", stan::model::index_uni(sym1__));
          current_statement__ = 109;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 110;
      context__.validate_dims("data initialization", "N_x_miss", "int",
        std::vector<size_t>{});
      N_x_miss = std::numeric_limits<int>::min();
      current_statement__ = 110;
      N_x_miss = context__.vals_i("N_x_miss")[(1 - 1)];
      current_statement__ = 111;
      stan::math::validate_non_negative_index("x_missidx", "N_x_miss",
        N_x_miss);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "x_missidx", "int",
        std::vector<size_t>{static_cast<size_t>(N_x_miss)});
      x_missidx = std::vector<int>(N_x_miss, std::numeric_limits<int>::min());
      current_statement__ = 112;
      x_missidx = context__.vals_i("x_missidx");
      current_statement__ = 113;
      stan::math::validate_non_negative_index("z_error_obs", "N_total",
        N_total);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "z_error_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N_total)});
      z_error_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(N_total,
                             std::numeric_limits<double>::quiet_NaN());
      new (&z_error_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(z_error_obs_data__.data(),
        N_total);
      {
        std::vector<local_scalar_t__> z_error_obs_flat__;
        current_statement__ = 114;
        z_error_obs_flat__ = context__.vals_r("z_error_obs");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
          current_statement__ = 114;
          stan::model::assign(z_error_obs, z_error_obs_flat__[(pos__ - 1)],
            "assigning variable z_error_obs", stan::model::index_uni(sym1__));
          current_statement__ = 114;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 115;
      stan::math::validate_non_negative_index("x_error", "N_pops", N_pops);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "x_error", "double",
        std::vector<size_t>{static_cast<size_t>(N_pops)});
      x_error_data__ = Eigen::Matrix<double,-1,1>::Constant(N_pops,
                         std::numeric_limits<double>::quiet_NaN());
      new (&x_error)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(x_error_data__.data(), N_pops);
      {
        std::vector<local_scalar_t__> x_error_flat__;
        current_statement__ = 116;
        x_error_flat__ = context__.vals_r("x_error");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 116;
          stan::model::assign(x_error, x_error_flat__[(pos__ - 1)],
            "assigning variable x_error", stan::model::index_uni(sym1__));
          current_statement__ = 116;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "x_error", x_error, 0);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("M", "N_pops", N_pops);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("M", "N_pops", N_pops);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "M", "double",
        std::vector<size_t>{static_cast<size_t>(N_pops),
          static_cast<size_t>(N_pops)});
      M_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
                   std::numeric_limits<double>::quiet_NaN());
      new (&M) Eigen::Map<Eigen::Matrix<double,-1,-1>>(M_data__.data(),
        N_pops, N_pops);
      {
        std::vector<local_scalar_t__> M_flat__;
        current_statement__ = 119;
        M_flat__ = context__.vals_r("M");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(M, M_flat__[(pos__ - 1)],
              "assigning variable M", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      context__.validate_dims("data initialization", "alpha_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      alpha_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                             std::numeric_limits<double>::quiet_NaN());
      new (&alpha_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> alpha_prior_flat__;
        current_statement__ = 120;
        alpha_prior_flat__ = context__.vals_r("alpha_prior");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 120;
          stan::model::assign(alpha_prior, alpha_prior_flat__[(pos__ - 1)],
            "assigning variable alpha_prior", stan::model::index_uni(sym1__));
          current_statement__ = 120;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 121;
      context__.validate_dims("data initialization", "beta_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      beta_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> beta_prior_flat__;
        current_statement__ = 121;
        beta_prior_flat__ = context__.vals_r("beta_prior");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 121;
          stan::model::assign(beta_prior, beta_prior_flat__[(pos__ - 1)],
            "assigning variable beta_prior", stan::model::index_uni(sym1__));
          current_statement__ = 121;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 122;
      context__.validate_dims("data initialization", "es_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      es_prior_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&es_prior)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(es_prior_data__.data(), 2);
      {
        std::vector<local_scalar_t__> es_prior_flat__;
        current_statement__ = 122;
        es_prior_flat__ = context__.vals_r("es_prior");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 122;
          stan::model::assign(es_prior, es_prior_flat__[(pos__ - 1)],
            "assigning variable es_prior", stan::model::index_uni(sym1__));
          current_statement__ = 122;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 123;
      context__.validate_dims("data initialization", "nu_cor", "double",
        std::vector<size_t>{});
      nu_cor = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 123;
      nu_cor = context__.vals_r("nu_cor")[(1 - 1)];
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "nu_cor", nu_cor, 1);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("reg_idx", "N_total", N_total);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "reg_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_total)});
      reg_idx = std::vector<int>(N_total, std::numeric_limits<int>::min());
      current_statement__ = 125;
      reg_idx = context__.vals_i("reg_idx");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "reg_idx", reg_idx, 1);
      current_statement__ = 125;
      stan::math::check_less_or_equal(function__, "reg_idx", reg_idx,
        N_regimes);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("pop_idx", "N_total", N_total);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "pop_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_total)});
      pop_idx = std::vector<int>(N_total, std::numeric_limits<int>::min());
      current_statement__ = 127;
      pop_idx = context__.vals_i("pop_idx");
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "pop_idx", pop_idx, 1);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "pop_idx", pop_idx, N_pops);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("z_impute", "N_z_miss",
        N_z_miss);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("z_error_impute", "N_z_miss",
        N_z_miss);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("x_impute", "N_x_miss",
        N_x_miss);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("sd_theta", "N_pops", N_pops);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("sd_e", "N_pops", N_pops);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("z_true_pops", "N_pops", N_pops);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("x_true_pops", "N_pops", N_pops);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("x_obs_sd", "N_pops", N_pops);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("z_merge_obs", "N_total",
        N_total);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("z_merge_error", "N_total",
        N_total);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("x_merge_obs", "N_pops", N_pops);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("A", "N_pops", N_pops);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("A", "N_pops", N_pops);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("AM_term", "N_pops", N_pops);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("AM_term", "N_pops", N_pops);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("mu_pops", "N_pops", N_pops);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("Sigma", "N_pops", N_pops);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("Sigma", "N_pops", N_pops);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("Omega_theta", "N_pops", N_pops);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("Omega_theta", "N_pops", N_pops);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("Omega_e", "N_pops", N_pops);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("Omega_e", "N_pops", N_pops);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("diag_sd_theta", "N_pops",
        N_pops);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("diag_sd_theta", "N_pops",
        N_pops);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("diag_sd_e", "N_pops", N_pops);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("diag_sd_e", "N_pops", N_pops);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("mu_eq_pops", "N_pops", N_pops);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("log_lik", "N_total", N_total);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("var_z_pops", "N_pops", N_pops);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("Cor_theta", "N_pops", N_pops);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("Cor_theta", "N_pops", N_pops);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("Cor_e", "N_pops", N_pops);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("Cor_e", "N_pops", N_pops);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("A_gq", "N_pops", N_pops);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("A_gq", "N_pops", N_pops);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("AM_term_gq", "N_pops", N_pops);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("AM_term_gq", "N_pops", N_pops);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("Omega_theta_gq", "N_pops",
        N_pops);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("Omega_theta_gq", "N_pops",
        N_pops);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("Omega_e_gq", "N_pops", N_pops);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("Omega_e_gq", "N_pops", N_pops);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("diag_sd_theta_gq", "N_pops",
        N_pops);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("diag_sd_theta_gq", "N_pops",
        N_pops);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("diag_sd_e_gq", "N_pops",
        N_pops);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("diag_sd_e_gq", "N_pops",
        N_pops);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("K_term_gq", "N_pops", N_pops);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("K_term_gq", "N_pops", N_pops);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("V_term_gq", "N_pops", N_pops);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("V_term_gq", "N_pops", N_pops);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("Sigma_term1_gq", "N_pops",
        N_pops);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("Sigma_term1_gq", "N_pops",
        N_pops);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("Sigma_gq", "N_pops", N_pops);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("Sigma_gq", "N_pops", N_pops);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_z_miss + N_z_miss + N_x_miss + 1 + 1 + 1 + N_pops +
      N_pops + N_pops + N_pops + N_pops;
  }
  inline std::string model_name() const final {
    return "model_Dalec_analysis";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_Dalec_analysis_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> z_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      current_statement__ = 1;
      z_impute = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   N_z_miss);
      Eigen::Matrix<local_scalar_t__,-1,1> z_error_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      current_statement__ = 2;
      z_error_impute = in__.template read_constrain_lb<
                         Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                         lp__, N_z_miss);
      Eigen::Matrix<local_scalar_t__,-1,1> x_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_x_miss, DUMMY_VAR__);
      current_statement__ = 3;
      x_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_x_miss);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 5;
      beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ es = DUMMY_VAR__;
      current_statement__ = 6;
      es = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 7;
      sd_theta = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
                   lp__, N_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_e =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 8;
      sd_e = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
               lp__, N_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 9;
      z_true_pops = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, N_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 10;
      x_true_pops = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_obs_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 11;
      x_obs_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   N_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> z_merge_obs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_total, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_merge_error =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_total, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> x_merge_obs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> A =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> AM_term =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Omega_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(Omega_theta,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_theta");
      Eigen::Matrix<local_scalar_t__,-1,-1> Omega_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(Omega_e,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_e");
      current_statement__ = 44;
      stan::model::assign(z_merge_obs,
        merge_missing(z_missidx, stan::math::to_vector(z_obs), z_impute,
          pstream__), "assigning variable z_merge_obs");
      current_statement__ = 45;
      stan::model::assign(z_merge_error,
        merge_missing(z_missidx, stan::math::to_vector(z_error_obs),
          z_error_impute, pstream__), "assigning variable z_merge_error");
      current_statement__ = 46;
      stan::model::assign(x_merge_obs,
        merge_missing(x_missidx, stan::math::to_vector(x_obs), x_impute,
          pstream__), "assigning variable x_merge_obs");
      current_statement__ = 54;
      for (int i = 1; i <= N_pops; ++i) {
        current_statement__ = 47;
        stan::model::assign(A, (-es * (1 +
          stan::model::rvalue(M, "M", stan::model::index_uni(i),
            stan::model::index_uni(i)))), "assigning variable A",
          stan::model::index_uni(i), stan::model::index_uni(i));
        current_statement__ = 52;
        for (int j = 1; j <= N_pops; ++j) {
          current_statement__ = 50;
          if (stan::math::logical_neq(i, j)) {
            current_statement__ = 48;
            stan::model::assign(A, 0, "assigning variable A",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 55;
      stan::model::assign(AM_term,
        stan::math::add(
          stan::math::diag_matrix(stan::math::rep_vector(1, N_pops)),
          stan::math::multiply(stan::math::inverse(A), M)),
        "assigning variable AM_term");
      current_statement__ = 58;
      for (int i = 1; i <= N_pops; ++i) {
        current_statement__ = 56;
        stan::model::assign(mu_pops, (alpha +
          (stan::model::rvalue(x_true_pops, "x_true_pops",
             stan::model::index_uni(i)) * beta)),
          "assigning variable mu_pops", stan::model::index_uni(i));
      }
      Eigen::Matrix<local_scalar_t__,-1,-1> diag_sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      current_statement__ = 21;
      stan::model::assign(diag_sd_theta, stan::math::diag_matrix(sd_theta),
        "assigning variable diag_sd_theta");
      Eigen::Matrix<local_scalar_t__,-1,-1> diag_sd_e =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
          DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(diag_sd_e, stan::math::diag_matrix(sd_e),
        "assigning variable diag_sd_e");
      current_statement__ = 59;
      stan::model::assign(Sigma,
        stan::math::add(
          stan::math::multiply(
            stan::math::multiply(stan::math::inverse(AM_term),
              stan::math::multiply(
                stan::math::multiply(diag_sd_theta, Omega_theta),
                diag_sd_theta)),
            stan::math::transpose(stan::math::inverse(AM_term))),
          stan::math::multiply(stan::math::multiply(diag_sd_e, Omega_e),
            diag_sd_e)), "assigning variable Sigma");
      Eigen::Matrix<local_scalar_t__,-1,1> mu_eq_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(mu_eq_pops,
        stan::math::multiply(stan::math::inverse(AM_term), mu_pops),
        "assigning variable mu_eq_pops");
      {
        current_statement__ = 81;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha,
                         stan::model::rvalue(alpha_prior, "alpha_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(alpha_prior, "alpha_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 82;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta,
                         stan::model::rvalue(beta_prior, "beta_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(beta_prior, "beta_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 83;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(es,
                         stan::math::log(0.1), 0.5));
        current_statement__ = 84;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(sd_theta,
                         stan::math::log(0.5), 0.2));
        current_statement__ = 85;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(sd_e,
                         stan::math::log(0.5), 0.2));
        current_statement__ = 86;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(x_obs_sd,
                         stan::math::log(1), 0.5));
        current_statement__ = 87;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_impute, 25, 0.5));
        current_statement__ = 88;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(z_error_impute,
                         stan::math::log(1), 0.5));
        current_statement__ = 89;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x_impute, 0, 1));
        current_statement__ = 92;
        for (int n = 1; n <= N_total; ++n) {
          current_statement__ = 90;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(z_merge_obs, "z_merge_obs",
                             stan::model::index_uni(n)),
                           stan::model::rvalue(z_true_pops, "z_true_pops",
                             stan::model::index_uni(
                               stan::model::rvalue(pop_idx, "pop_idx",
                                 stan::model::index_uni(n)))),
                           stan::model::rvalue(z_merge_error,
                             "z_merge_error", stan::model::index_uni(n))));
        }
        current_statement__ = 95;
        for (int n = 1; n <= N_pops; ++n) {
          current_statement__ = 93;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(x_merge_obs, "x_merge_obs",
                             stan::model::index_uni(n)),
                           stan::model::rvalue(x_true_pops, "x_true_pops",
                             stan::model::index_uni(n)),
                           stan::model::rvalue(x_obs_sd, "x_obs_sd",
                             stan::model::index_uni(n))));
        }
        current_statement__ = 96;
        stan::math::validate_non_negative_index("L_Sigma", "N_pops", N_pops);
        current_statement__ = 97;
        stan::math::validate_non_negative_index("L_Sigma", "N_pops", N_pops);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_Sigma =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_pops, N_pops,
            DUMMY_VAR__);
        current_statement__ = 98;
        stan::model::assign(L_Sigma, stan::math::cholesky_decompose(Sigma),
          "assigning variable L_Sigma");
        current_statement__ = 99;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(
                         z_true_pops, mu_eq_pops, L_Sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_Dalec_analysis_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> z_impute =
        Eigen::Matrix<double,-1,1>::Constant(N_z_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      z_impute = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   N_z_miss);
      Eigen::Matrix<double,-1,1> z_error_impute =
        Eigen::Matrix<double,-1,1>::Constant(N_z_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z_error_impute = in__.template read_constrain_lb<
                         Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                         lp__, N_z_miss);
      Eigen::Matrix<double,-1,1> x_impute =
        Eigen::Matrix<double,-1,1>::Constant(N_x_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      x_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_x_miss);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      alpha = in__.template read<local_scalar_t__>();
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      beta = in__.template read<local_scalar_t__>();
      double es = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      es = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      Eigen::Matrix<double,-1,1> sd_theta =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sd_theta = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
                   lp__, N_pops);
      Eigen::Matrix<double,-1,1> sd_e =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sd_e = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
               lp__, N_pops);
      Eigen::Matrix<double,-1,1> z_true_pops =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      z_true_pops = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, N_pops);
      Eigen::Matrix<double,-1,1> x_true_pops =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      x_true_pops = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops);
      Eigen::Matrix<double,-1,1> x_obs_sd =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      x_obs_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   N_pops);
      Eigen::Matrix<double,-1,1> z_merge_obs =
        Eigen::Matrix<double,-1,1>::Constant(N_total,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> z_merge_error =
        Eigen::Matrix<double,-1,1>::Constant(N_total,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> x_merge_obs =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> A =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> AM_term =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_pops =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega_e =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> diag_sd_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> diag_sd_e =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_eq_pops =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(z_impute);
      out__.write(z_error_impute);
      out__.write(x_impute);
      out__.write(alpha);
      out__.write(beta);
      out__.write(es);
      out__.write(sd_theta);
      out__.write(sd_e);
      out__.write(z_true_pops);
      out__.write(x_true_pops);
      out__.write(x_obs_sd);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 19;
      stan::model::assign(Omega_theta,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_theta");
      current_statement__ = 20;
      stan::model::assign(Omega_e,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_e");
      current_statement__ = 44;
      stan::model::assign(z_merge_obs,
        merge_missing(z_missidx, stan::math::to_vector(z_obs), z_impute,
          pstream__), "assigning variable z_merge_obs");
      current_statement__ = 45;
      stan::model::assign(z_merge_error,
        merge_missing(z_missidx, stan::math::to_vector(z_error_obs),
          z_error_impute, pstream__), "assigning variable z_merge_error");
      current_statement__ = 46;
      stan::model::assign(x_merge_obs,
        merge_missing(x_missidx, stan::math::to_vector(x_obs), x_impute,
          pstream__), "assigning variable x_merge_obs");
      current_statement__ = 54;
      for (int i = 1; i <= N_pops; ++i) {
        current_statement__ = 47;
        stan::model::assign(A, (-es * (1 +
          stan::model::rvalue(M, "M", stan::model::index_uni(i),
            stan::model::index_uni(i)))), "assigning variable A",
          stan::model::index_uni(i), stan::model::index_uni(i));
        current_statement__ = 52;
        for (int j = 1; j <= N_pops; ++j) {
          current_statement__ = 50;
          if (stan::math::logical_neq(i, j)) {
            current_statement__ = 48;
            stan::model::assign(A, 0, "assigning variable A",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 55;
      stan::model::assign(AM_term,
        stan::math::add(
          stan::math::diag_matrix(stan::math::rep_vector(1, N_pops)),
          stan::math::multiply(stan::math::inverse(A), M)),
        "assigning variable AM_term");
      current_statement__ = 58;
      for (int i = 1; i <= N_pops; ++i) {
        current_statement__ = 56;
        stan::model::assign(mu_pops, (alpha +
          (stan::model::rvalue(x_true_pops, "x_true_pops",
             stan::model::index_uni(i)) * beta)),
          "assigning variable mu_pops", stan::model::index_uni(i));
      }
      current_statement__ = 21;
      stan::model::assign(diag_sd_theta, stan::math::diag_matrix(sd_theta),
        "assigning variable diag_sd_theta");
      current_statement__ = 22;
      stan::model::assign(diag_sd_e, stan::math::diag_matrix(sd_e),
        "assigning variable diag_sd_e");
      current_statement__ = 59;
      stan::model::assign(Sigma,
        stan::math::add(
          stan::math::multiply(
            stan::math::multiply(stan::math::inverse(AM_term),
              stan::math::multiply(
                stan::math::multiply(diag_sd_theta, Omega_theta),
                diag_sd_theta)),
            stan::math::transpose(stan::math::inverse(AM_term))),
          stan::math::multiply(stan::math::multiply(diag_sd_e, Omega_e),
            diag_sd_e)), "assigning variable Sigma");
      current_statement__ = 23;
      stan::model::assign(mu_eq_pops,
        stan::math::multiply(stan::math::inverse(AM_term), mu_pops),
        "assigning variable mu_eq_pops");
      if (emit_transformed_parameters__) {
        out__.write(z_merge_obs);
        out__.write(z_merge_error);
        out__.write(x_merge_obs);
        out__.write(A);
        out__.write(AM_term);
        out__.write(mu_pops);
        out__.write(Sigma);
        out__.write(Omega_theta);
        out__.write(Omega_e);
        out__.write(diag_sd_theta);
        out__.write(diag_sd_e);
        out__.write(mu_eq_pops);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N_total,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> var_z_pops =
        Eigen::Matrix<double,-1,1>::Constant(N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Cor_theta =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 26;
      stan::model::assign(Cor_theta,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Cor_theta");
      Eigen::Matrix<double,-1,-1> Cor_e =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 27;
      stan::model::assign(Cor_e,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Cor_e");
      double det_A = std::numeric_limits<double>::quiet_NaN();
      double det_AM_term = std::numeric_limits<double>::quiet_NaN();
      double det_K_term = std::numeric_limits<double>::quiet_NaN();
      double det_V_term = std::numeric_limits<double>::quiet_NaN();
      double det_Sigma_term1 = std::numeric_limits<double>::quiet_NaN();
      double det_Sigma = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,-1> A_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> AM_term_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega_theta_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 36;
      stan::model::assign(Omega_theta_gq,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_theta_gq");
      Eigen::Matrix<double,-1,-1> Omega_e_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 37;
      stan::model::assign(Omega_e_gq,
        stan::math::diag_matrix(stan::math::rep_vector(1.0, N_pops)),
        "assigning variable Omega_e_gq");
      Eigen::Matrix<double,-1,-1> diag_sd_theta_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 38;
      stan::model::assign(diag_sd_theta_gq,
        stan::math::diag_matrix(sd_theta),
        "assigning variable diag_sd_theta_gq");
      Eigen::Matrix<double,-1,-1> diag_sd_e_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 39;
      stan::model::assign(diag_sd_e_gq, stan::math::diag_matrix(sd_e),
        "assigning variable diag_sd_e_gq");
      current_statement__ = 67;
      for (int i = 1; i <= N_pops; ++i) {
        current_statement__ = 60;
        stan::model::assign(A_gq, (-es * (1 +
          stan::model::rvalue(M, "M", stan::model::index_uni(i),
            stan::model::index_uni(i)))), "assigning variable A_gq",
          stan::model::index_uni(i), stan::model::index_uni(i));
        current_statement__ = 65;
        for (int j = 1; j <= N_pops; ++j) {
          current_statement__ = 63;
          if (stan::math::logical_neq(i, j)) {
            current_statement__ = 61;
            stan::model::assign(A_gq, 0, "assigning variable A_gq",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 68;
      stan::model::assign(AM_term_gq,
        stan::math::add(
          stan::math::diag_matrix(stan::math::rep_vector(1, N_pops)),
          stan::math::multiply(stan::math::inverse(A_gq), M)),
        "assigning variable AM_term_gq");
      Eigen::Matrix<double,-1,-1> K_term_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 40;
      stan::model::assign(K_term_gq,
        stan::math::multiply(
          stan::math::multiply(diag_sd_theta_gq, Omega_theta_gq),
          diag_sd_theta_gq), "assigning variable K_term_gq");
      Eigen::Matrix<double,-1,-1> V_term_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 41;
      stan::model::assign(V_term_gq,
        stan::math::multiply(stan::math::multiply(diag_sd_e_gq, Omega_e_gq),
          diag_sd_e_gq), "assigning variable V_term_gq");
      Eigen::Matrix<double,-1,-1> Sigma_term1_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 42;
      stan::model::assign(Sigma_term1_gq,
        stan::math::multiply(
          stan::math::multiply(stan::math::inverse(AM_term_gq), K_term_gq),
          stan::math::transpose(stan::math::inverse(AM_term_gq))),
        "assigning variable Sigma_term1_gq");
      Eigen::Matrix<double,-1,-1> Sigma_gq =
        Eigen::Matrix<double,-1,-1>::Constant(N_pops, N_pops,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 43;
      stan::model::assign(Sigma_gq,
        stan::math::add(Sigma_term1_gq, V_term_gq),
        "assigning variable Sigma_gq");
      current_statement__ = 69;
      det_A = stan::math::determinant(A_gq);
      current_statement__ = 70;
      det_AM_term = stan::math::determinant(AM_term_gq);
      current_statement__ = 71;
      det_K_term = stan::math::determinant(K_term_gq);
      current_statement__ = 72;
      det_V_term = stan::math::determinant(V_term_gq);
      current_statement__ = 73;
      det_Sigma_term1 = stan::math::determinant(Sigma_term1_gq);
      current_statement__ = 74;
      det_Sigma = stan::math::determinant(Sigma_gq);
      current_statement__ = 77;
      for (int n = 1; n <= N_pops; ++n) {
        current_statement__ = 75;
        stan::model::assign(var_z_pops,
          stan::model::rvalue(Sigma_gq, "Sigma_gq",
            stan::model::index_uni(n), stan::model::index_uni(n)),
          "assigning variable var_z_pops", stan::model::index_uni(n));
      }
      current_statement__ = 80;
      for (int n = 1; n <= N_total; ++n) {
        current_statement__ = 78;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(z_merge_obs, "z_merge_obs",
              stan::model::index_uni(n)),
            stan::model::rvalue(z_true_pops, "z_true_pops",
              stan::model::index_uni(
                stan::model::rvalue(pop_idx, "pop_idx",
                  stan::model::index_uni(n)))),
            stan::model::rvalue(z_merge_error, "z_merge_error",
              stan::model::index_uni(
                stan::model::rvalue(pop_idx, "pop_idx",
                  stan::model::index_uni(n))))),
          "assigning variable log_lik", stan::model::index_uni(n));
      }
      out__.write(log_lik);
      out__.write(var_z_pops);
      out__.write(Cor_theta);
      out__.write(Cor_e);
      out__.write(det_A);
      out__.write(det_AM_term);
      out__.write(det_K_term);
      out__.write(det_V_term);
      out__.write(det_Sigma_term1);
      out__.write(det_Sigma);
      out__.write(A_gq);
      out__.write(AM_term_gq);
      out__.write(Omega_theta_gq);
      out__.write(Omega_e_gq);
      out__.write(diag_sd_theta_gq);
      out__.write(diag_sd_e_gq);
      out__.write(K_term_gq);
      out__.write(V_term_gq);
      out__.write(Sigma_term1_gq);
      out__.write(Sigma_gq);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> z_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(z_impute,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_z_miss),
        "assigning variable z_impute");
      out__.write_free_lb(0, z_impute);
      Eigen::Matrix<local_scalar_t__,-1,1> z_error_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z_error_impute,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_z_miss),
        "assigning variable z_error_impute");
      out__.write_free_lb(0, z_error_impute);
      Eigen::Matrix<local_scalar_t__,-1,1> x_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_x_miss, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(x_impute,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_x_miss),
        "assigning variable x_impute");
      out__.write(x_impute);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 5;
      beta = in__.read<local_scalar_t__>();
      out__.write(beta);
      local_scalar_t__ es = DUMMY_VAR__;
      current_statement__ = 6;
      es = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, es);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sd_theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops),
        "assigning variable sd_theta");
      out__.write_free_lb(0.00001, sd_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_e =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sd_e,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops),
        "assigning variable sd_e");
      out__.write_free_lb(0.00001, sd_e);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(z_true_pops,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops),
        "assigning variable z_true_pops");
      out__.write_free_lb(0, z_true_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(x_true_pops,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops),
        "assigning variable x_true_pops");
      out__.write(x_true_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_obs_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(x_obs_sd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pops),
        "assigning variable x_obs_sd");
      out__.write_free_lb(0, x_obs_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "z_impute",
        "double", std::vector<size_t>{static_cast<size_t>(N_z_miss)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "z_error_impute",
        "double", std::vector<size_t>{static_cast<size_t>(N_z_miss)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "x_impute",
        "double", std::vector<size_t>{static_cast<size_t>(N_x_miss)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "es", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sd_theta",
        "double", std::vector<size_t>{static_cast<size_t>(N_pops)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sd_e", "double",
        std::vector<size_t>{static_cast<size_t>(N_pops)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "z_true_pops",
        "double", std::vector<size_t>{static_cast<size_t>(N_pops)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "x_true_pops",
        "double", std::vector<size_t>{static_cast<size_t>(N_pops)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "x_obs_sd",
        "double", std::vector<size_t>{static_cast<size_t>(N_pops)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> z_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_impute_flat__;
        current_statement__ = 1;
        z_impute_flat__ = context__.vals_r("z_impute");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(z_impute, z_impute_flat__[(pos__ - 1)],
            "assigning variable z_impute", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, z_impute);
      Eigen::Matrix<local_scalar_t__,-1,1> z_error_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_z_miss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_error_impute_flat__;
        current_statement__ = 2;
        z_error_impute_flat__ = context__.vals_r("z_error_impute");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(z_error_impute, z_error_impute_flat__[(pos__ -
            1)], "assigning variable z_error_impute",
            stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, z_error_impute);
      Eigen::Matrix<local_scalar_t__,-1,1> x_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_x_miss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x_impute_flat__;
        current_statement__ = 3;
        x_impute_flat__ = context__.vals_r("x_impute");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_x_miss; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(x_impute, x_impute_flat__[(pos__ - 1)],
            "assigning variable x_impute", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(x_impute);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 5;
      beta = context__.vals_r("beta")[(1 - 1)];
      out__.write(beta);
      local_scalar_t__ es = DUMMY_VAR__;
      current_statement__ = 6;
      es = context__.vals_r("es")[(1 - 1)];
      out__.write_free_lb(0, es);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_theta_flat__;
        current_statement__ = 7;
        sd_theta_flat__ = context__.vals_r("sd_theta");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(sd_theta, sd_theta_flat__[(pos__ - 1)],
            "assigning variable sd_theta", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0.00001, sd_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_e =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_e_flat__;
        current_statement__ = 8;
        sd_e_flat__ = context__.vals_r("sd_e");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(sd_e, sd_e_flat__[(pos__ - 1)],
            "assigning variable sd_e", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0.00001, sd_e);
      Eigen::Matrix<local_scalar_t__,-1,1> z_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_true_pops_flat__;
        current_statement__ = 9;
        z_true_pops_flat__ = context__.vals_r("z_true_pops");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(z_true_pops, z_true_pops_flat__[(pos__ - 1)],
            "assigning variable z_true_pops", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, z_true_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_true_pops =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x_true_pops_flat__;
        current_statement__ = 10;
        x_true_pops_flat__ = context__.vals_r("x_true_pops");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(x_true_pops, x_true_pops_flat__[(pos__ - 1)],
            "assigning variable x_true_pops", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(x_true_pops);
      Eigen::Matrix<local_scalar_t__,-1,1> x_obs_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pops, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x_obs_sd_flat__;
        current_statement__ = 11;
        x_obs_sd_flat__ = context__.vals_r("x_obs_sd");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(x_obs_sd, x_obs_sd_flat__[(pos__ - 1)],
            "assigning variable x_obs_sd", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, x_obs_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"z_impute", "z_error_impute",
                "x_impute", "alpha", "beta", "es", "sd_theta", "sd_e",
                "z_true_pops", "x_true_pops", "x_obs_sd"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"z_merge_obs", "z_merge_error", "x_merge_obs", "A", "AM_term",
             "mu_pops", "Sigma", "Omega_theta", "Omega_e", "diag_sd_theta",
             "diag_sd_e", "mu_eq_pops"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "var_z_pops", "Cor_theta", "Cor_e", "det_A",
             "det_AM_term", "det_K_term", "det_V_term", "det_Sigma_term1",
             "det_Sigma", "A_gq", "AM_term_gq", "Omega_theta_gq",
             "Omega_e_gq", "diag_sd_theta_gq", "diag_sd_e_gq", "K_term_gq",
             "V_term_gq", "Sigma_term1_gq", "Sigma_gq"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_z_miss)},
                std::vector<size_t>{static_cast<size_t>(N_z_miss)},
                std::vector<size_t>{static_cast<size_t>(N_x_miss)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_pops)},
                std::vector<size_t>{static_cast<size_t>(N_pops)},
                std::vector<size_t>{static_cast<size_t>(N_pops)},
                std::vector<size_t>{static_cast<size_t>(N_pops)},
                std::vector<size_t>{static_cast<size_t>(N_pops)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_total)},
             std::vector<size_t>{static_cast<size_t>(N_total)},
             std::vector<size_t>{static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_total)},
             std::vector<size_t>{static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)},
             std::vector<size_t>{static_cast<size_t>(N_pops),
               static_cast<size_t>(N_pops)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_error_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_x_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_impute" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "es");
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_e" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_true_pops" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_true_pops" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_obs_sd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_merge_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_merge_error" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_merge_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_pops" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_eq_pops" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_z_pops" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "det_A");
      param_names__.emplace_back(std::string() + "det_AM_term");
      param_names__.emplace_back(std::string() + "det_K_term");
      param_names__.emplace_back(std::string() + "det_V_term");
      param_names__.emplace_back(std::string() + "det_Sigma_term1");
      param_names__.emplace_back(std::string() + "det_Sigma");
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "A_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta_gq" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "K_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "V_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_term1_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_z_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_error_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_x_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_impute" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "es");
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_e" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_true_pops" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_true_pops" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_obs_sd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_merge_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_merge_error" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_merge_obs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_pops" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_eq_pops" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_z_pops" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cor_e" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "det_A");
      param_names__.emplace_back(std::string() + "det_AM_term");
      param_names__.emplace_back(std::string() + "det_K_term");
      param_names__.emplace_back(std::string() + "det_V_term");
      param_names__.emplace_back(std::string() + "det_Sigma_term1");
      param_names__.emplace_back(std::string() + "det_Sigma");
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "A_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "AM_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_theta_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_e_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_theta_gq" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "diag_sd_e_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "K_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "V_term_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_term1_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pops; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_pops; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_gq" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"z_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_z_miss) + "},\"block\":\"parameters\"},{\"name\":\"z_error_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_z_miss) + "},\"block\":\"parameters\"},{\"name\":\"x_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_x_miss) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"z_true_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"x_true_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"x_obs_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"z_merge_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_merge_error\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x_merge_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AM_term\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_eq_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"generated_quantities\"},{\"name\":\"var_z_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"det_A\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_AM_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_K_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_V_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_Sigma_term1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_Sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"A_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"AM_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_theta_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_e_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_sd_theta_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_sd_e_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"K_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"V_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_term1_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"z_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_z_miss) + "},\"block\":\"parameters\"},{\"name\":\"z_error_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_z_miss) + "},\"block\":\"parameters\"},{\"name\":\"x_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_x_miss) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"es\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"sd_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"z_true_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"x_true_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"x_obs_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"parameters\"},{\"name\":\"z_merge_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_merge_error\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x_merge_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AM_term\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_sd_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_eq_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_total) + "},\"block\":\"generated_quantities\"},{\"name\":\"var_z_pops\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_e\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"det_A\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_AM_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_K_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_V_term\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_Sigma_term1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"det_Sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"A_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"AM_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_theta_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_e_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_sd_theta_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_sd_e_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"K_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"V_term_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_term1_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gq\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_pops) + ",\"cols\":" + std::to_string(N_pops) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((N_z_miss + N_z_miss) + N_x_miss) +
      1) + 1) + 1) + N_pops) + N_pops) + N_pops) + N_pops) + N_pops);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((N_total + N_total) + N_pops) + (N_pops * N_pops)) + (N_pops
      * N_pops)) + N_pops) + (N_pops * N_pops)) + (N_pops * N_pops)) +
      (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) + N_pops));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((((((((N_total + N_pops) + (N_pops * N_pops)) + (N_pops *
      N_pops)) + 1) + 1) + 1) + 1) + 1) + 1) + (N_pops * N_pops)) + (N_pops *
      N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops))
      + (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) +
      (N_pops * N_pops)) + (N_pops * N_pops)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((N_z_miss + N_z_miss) + N_x_miss) +
      1) + 1) + 1) + N_pops) + N_pops) + N_pops) + N_pops) + N_pops);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((N_total + N_total) + N_pops) + (N_pops * N_pops)) + (N_pops
      * N_pops)) + N_pops) + (N_pops * N_pops)) + (N_pops * N_pops)) +
      (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) + N_pops));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((((((((N_total + N_pops) + (N_pops * N_pops)) + (N_pops *
      N_pops)) + 1) + 1) + 1) + 1) + 1) + 1) + (N_pops * N_pops)) + (N_pops *
      N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops))
      + (N_pops * N_pops)) + (N_pops * N_pops)) + (N_pops * N_pops)) +
      (N_pops * N_pops)) + (N_pops * N_pops)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_Dalec_analysis_namespace::model_Dalec_analysis;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_Dalec_analysis_namespace::profiles__;
}
#endif
#endif
