// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_blouchOU_reg_priorpc_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU_reg_priorpc', line 80, column 2 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 81, column 2 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 82, column 2 to column 15)",
                                                      " (in 'blouchOU_reg_priorpc', line 83, column 2 to column 51)",
                                                      " (in 'blouchOU_reg_priorpc', line 84, column 2 to column 41)",
                                                      " (in 'blouchOU_reg_priorpc', line 85, column 2 to column 21)",
                                                      " (in 'blouchOU_reg_priorpc', line 86, column 2 to column 37)",
                                                      " (in 'blouchOU_reg_priorpc', line 87, column 2 to column 23)",
                                                      " (in 'blouchOU_reg_priorpc', line 88, column 2 to column 22)",
                                                      " (in 'blouchOU_reg_priorpc', line 89, column 2 to column 22)",
                                                      " (in 'blouchOU_reg_priorpc', line 90, column 2 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 91, column 2 to column 34)",
                                                      " (in 'blouchOU_reg_priorpc', line 93, column 4 to column 32)",
                                                      " (in 'blouchOU_reg_priorpc', line 92, column 20 to line 94, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 92, column 2 to line 94, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 95, column 2 to column 34)",
                                                      " (in 'blouchOU_reg_priorpc', line 96, column 2 to column 30)",
                                                      " (in 'blouchOU_reg_priorpc', line 97, column 2 to column 85)",
                                                      " (in 'blouchOU_reg_priorpc', line 99, column 2 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 100, column 2 to column 46)",
                                                      " (in 'blouchOU_reg_priorpc', line 102, column 4 to column 51)",
                                                      " (in 'blouchOU_reg_priorpc', line 101, column 15 to line 103, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 101, column 2 to line 103, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 62, column 2 to column 8)",
                                                      " (in 'blouchOU_reg_priorpc', line 63, column 2 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 64, column 2 to column 19)",
                                                      " (in 'blouchOU_reg_priorpc', line 65, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 65, column 2 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 66, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 66, column 2 to column 20)",
                                                      " (in 'blouchOU_reg_priorpc', line 67, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 67, column 11 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 67, column 2 to column 17)",
                                                      " (in 'blouchOU_reg_priorpc', line 68, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 68, column 11 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 68, column 2 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 69, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 69, column 12 to column 24)",
                                                      " (in 'blouchOU_reg_priorpc', line 69, column 2 to column 38)",
                                                      " (in 'blouchOU_reg_priorpc', line 70, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 70, column 12 to column 24)",
                                                      " (in 'blouchOU_reg_priorpc', line 70, column 2 to column 32)",
                                                      " (in 'blouchOU_reg_priorpc', line 71, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 71, column 12 to column 24)",
                                                      " (in 'blouchOU_reg_priorpc', line 71, column 2 to column 32)",
                                                      " (in 'blouchOU_reg_priorpc', line 72, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 72, column 12 to column 24)",
                                                      " (in 'blouchOU_reg_priorpc', line 72, column 2 to column 36)",
                                                      " (in 'blouchOU_reg_priorpc', line 73, column 12 to column 13)",
                                                      " (in 'blouchOU_reg_priorpc', line 73, column 2 to column 15)",
                                                      " (in 'blouchOU_reg_priorpc', line 80, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 80, column 11 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 81, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 81, column 11 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 82, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 87, column 9 to column 14)",
                                                      " (in 'blouchOU_reg_priorpc', line 88, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 88, column 11 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 89, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 90, column 9 to column 10)",
                                                      " (in 'blouchOU_reg_priorpc', line 5, column 2 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 8, column 6 to column 13)",
                                                      " (in 'blouchOU_reg_priorpc', line 7, column 4 to line 8, column 13)",
                                                      " (in 'blouchOU_reg_priorpc', line 6, column 2 to line 8, column 13)",
                                                      " (in 'blouchOU_reg_priorpc', line 9, column 2 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 4, column 36 to line 10, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 13, column 24 to column 41)",
                                                      " (in 'blouchOU_reg_priorpc', line 13, column 4 to column 43)",
                                                      " (in 'blouchOU_reg_priorpc', line 14, column 4 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 18, column 8 to column 33)",
                                                      " (in 'blouchOU_reg_priorpc', line 19, column 8 to column 17)",
                                                      " (in 'blouchOU_reg_priorpc', line 17, column 21 to line 20, column 9)",
                                                      " (in 'blouchOU_reg_priorpc', line 17, column 6 to line 20, column 9)",
                                                      " (in 'blouchOU_reg_priorpc', line 16, column 30 to line 21, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 16, column 4 to line 21, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 22, column 4 to column 28)",
                                                      " (in 'blouchOU_reg_priorpc', line 12, column 38 to line 23, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 26, column 8 to column 28)",
                                                      " (in 'blouchOU_reg_priorpc', line 27, column 15 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 27, column 18 to column 19)",
                                                      " (in 'blouchOU_reg_priorpc', line 27, column 8 to column 24)",
                                                      " (in 'blouchOU_reg_priorpc', line 28, column 8 to column 76)",
                                                      " (in 'blouchOU_reg_priorpc', line 29, column 8 to column 19)",
                                                      " (in 'blouchOU_reg_priorpc', line 25, column 60 to line 30, column 9)",
                                                      " (in 'blouchOU_reg_priorpc', line 32, column 11 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 32, column 4 to column 95)",
                                                      " (in 'blouchOU_reg_priorpc', line 33, column 4 to column 20)",
                                                      " (in 'blouchOU_reg_priorpc', line 31, column 88 to line 34, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 38, column 11 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 38, column 4 to column 109)",
                                                      " (in 'blouchOU_reg_priorpc', line 40, column 11 to column 16)",
                                                      " (in 'blouchOU_reg_priorpc', line 40, column 4 to column 52)",
                                                      " (in 'blouchOU_reg_priorpc', line 42, column 14 to column 39)",
                                                      " (in 'blouchOU_reg_priorpc', line 42, column 6 to column 69)",
                                                      " (in 'blouchOU_reg_priorpc', line 45, column 6 to column 44)",
                                                      " (in 'blouchOU_reg_priorpc', line 41, column 21 to line 47, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 41, column 4 to line 47, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 48, column 4 to column 25)",
                                                      " (in 'blouchOU_reg_priorpc', line 36, column 121 to line 49, column 3)",
                                                      " (in 'blouchOU_reg_priorpc', line 52, column 11 to column 12)",
                                                      " (in 'blouchOU_reg_priorpc', line 52, column 13 to column 18)",
                                                      " (in 'blouchOU_reg_priorpc', line 52, column 4 to column 58)",
                                                      " (in 'blouchOU_reg_priorpc', line 54, column 6 to column 120)",
                                                      " (in 'blouchOU_reg_priorpc', line 53, column 17 to line 57, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 53, column 4 to line 57, column 7)",
                                                      " (in 'blouchOU_reg_priorpc', line 58, column 4 to column 26)",
                                                      " (in 'blouchOU_reg_priorpc', line 51, column 132 to line 59, column 3)"};
template <typename T0__, typename T1__>
int
num_matches(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 61;
    n = 0;
    current_statement__ = 64;
    for (int i = 1; i <= rows(x); ++i) {
      current_statement__ = 63;
      if (logical_eq(x[(i - 1)], y)) {
        current_statement__ = 62;
        n = (n + 1);
      } }
    current_statement__ = 65;
    return n;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct num_matches_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return num_matches(x, y, pstream__);
}
};
template <typename T0__, typename T1__>
std::vector<int>
which_equal(const T0__& x_arg__, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 67;
    validate_non_negative_index("match_positions", "num_matches(x, y)",
                                num_matches(x, y, pstream__));
    std::vector<int> match_positions;
    match_positions = std::vector<int>(num_matches(x, y, pstream__), std::numeric_limits<int>::min());
    
    int pos;
    pos = std::numeric_limits<int>::min();
    
    current_statement__ = 69;
    pos = 1;
    current_statement__ = 75;
    for (int i = 1; i <= dims(x)[(1 - 1)]; ++i) {
      current_statement__ = 73;
      if (logical_eq(x[(i - 1)], y)) {
        current_statement__ = 70;
        assign(match_positions, cons_list(index_uni(pos), nil_index_list()),
          i, "assigning variable match_positions");
        current_statement__ = 71;
        pos = (pos + 1);
      } }
    current_statement__ = 76;
    return match_positions;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct which_equal_functor__ {
template <typename T0__, typename T1__>
std::vector<int>
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return which_equal(x, y, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
calc_V(const T0__& a, const T1__& sigma2_y, const T2__& ta_arg__,
       const T3__& tij_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& ta = to_ref(ta_arg__);
  const auto& tij = to_ref(tij_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 78;
    N = dims(ta)[(1 - 1)];
    current_statement__ = 79;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 80;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    current_statement__ = 82;
    assign(Vt, nil_index_list(),
      multiply((sigma2_y / (2 * a)),
        elt_multiply(subtract(1, stan::math::exp(multiply((-2 * a), ta))),
          stan::math::exp(multiply(-a, tij)))), "assigning variable Vt");
    current_statement__ = 83;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_V_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const T0__& a, const T1__& sigma2_y, const T2__& ta,
           const T3__& tij, std::ostream* pstream__)  const 
{
return calc_V(a, sigma2_y, ta, tij, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
T3__>, -1, 1>
weight_segments(const T0__& a, const T1__& t_beginning_arg__,
                const T2__& t_end_arg__, const T3__& time, const int& nodes,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          T3__>;
  const auto& t_beginning = to_ref(t_beginning_arg__);
  const auto& t_end = to_ref(t_end_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 85;
    validate_non_negative_index("weights", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(nodes);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 86;
    assign(weights, nil_index_list(),
      append_row(
        subtract(stan::math::exp(multiply(-a, t_beginning)),
          stan::math::exp(multiply(-a, t_end))),
        stan::math::exp((-a * time))), "assigning variable weights");
    current_statement__ = 87;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct weight_segments_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
T3__>, -1, 1>
operator()(const T0__& a, const T1__& t_beginning, const T2__& t_end,
           const T3__& time, const int& nodes, std::ostream* pstream__)  const 
{
return weight_segments(a, t_beginning, t_end, time, nodes, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T4__,
stan::value_type_t<T5__>>, 1, -1>
weights_regimes(const int& n_reg, const T1__& a,
                const T2__& t_beginning_arg__, const T3__& t_end_arg__,
                const T4__& time, const T5__& reg_match_arg__,
                const int& nodes, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T4__,
          stan::value_type_t<T5__>>;
  const auto& t_beginning = to_ref(t_beginning_arg__);
  const auto& t_end = to_ref(t_end_arg__);
  const auto& reg_match = to_ref(reg_match_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 89;
    validate_non_negative_index("weight_seg", "nodes", nodes);
    Eigen::Matrix<local_scalar_t__, -1, 1> weight_seg;
    weight_seg = Eigen::Matrix<local_scalar_t__, -1, 1>(nodes);
    stan::math::fill(weight_seg, DUMMY_VAR__);
    
    current_statement__ = 90;
    assign(weight_seg, nil_index_list(),
      weight_segments(a,
        rvalue(t_beginning,
          cons_list(index_min_max(1, (nodes - 1)), nil_index_list()),
          "t_beginning"),
        rvalue(t_end,
          cons_list(index_min_max(1, (nodes - 1)), nil_index_list()),
          "t_end"), time, nodes, pstream__), "assigning variable weight_seg");
    current_statement__ = 91;
    validate_non_negative_index("reg_weights", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__, -1, 1> reg_weights;
    reg_weights = Eigen::Matrix<local_scalar_t__, -1, 1>(n_reg);
    stan::math::fill(reg_weights, DUMMY_VAR__);
    
    current_statement__ = 92;
    assign(reg_weights, nil_index_list(), rep_vector(0, n_reg),
      "assigning variable reg_weights");
    current_statement__ = 97;
    for (int i = 1; i <= n_reg; ++i) {
      current_statement__ = 93;
      validate_non_negative_index("ids", "num_matches(reg_match, i)",
                                  num_matches(reg_match, i, pstream__));
      std::vector<int> ids;
      ids = std::vector<int>(num_matches(reg_match, i, pstream__), std::numeric_limits<int>::min());
      
      current_statement__ = 94;
      assign(ids, nil_index_list(), which_equal(reg_match, i, pstream__),
        "assigning variable ids");
      current_statement__ = 95;
      assign(reg_weights, cons_list(index_uni(i), nil_index_list()),
        sum(
          rvalue(weight_seg, cons_list(index_multi(ids), nil_index_list()),
            "weight_seg")), "assigning variable reg_weights");}
    current_statement__ = 98;
    return transpose(reg_weights);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct weights_regimes_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T4__,
stan::value_type_t<T5__>>, 1, -1>
operator()(const int& n_reg, const T1__& a, const T2__& t_beginning,
           const T3__& t_end, const T4__& time, const T5__& reg_match,
           const int& nodes, std::ostream* pstream__)  const 
{
return weights_regimes(n_reg, a, t_beginning, t_end, time, reg_match, nodes,
         pstream__);
}
};
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>>, -1, -1>
calc_optima_matrix(const int& N, const int& n_reg, const T2__& a,
                   const T3__& t_beginning_arg__, const T4__& t_end_arg__,
                   const T5__& times_arg__, const T6__& reg_match_arg__,
                   const std::vector<int>& nodes, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>>;
  const auto& t_beginning = to_ref(t_beginning_arg__);
  const auto& t_end = to_ref(t_end_arg__);
  const auto& times = to_ref(times_arg__);
  const auto& reg_match = to_ref(reg_match_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 100;
    validate_non_negative_index("optima_matrix", "N", N);
    current_statement__ = 101;
    validate_non_negative_index("optima_matrix", "n_reg", n_reg);
    Eigen::Matrix<local_scalar_t__, -1, -1> optima_matrix;
    optima_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_reg);
    stan::math::fill(optima_matrix, DUMMY_VAR__);
    
    current_statement__ = 102;
    assign(optima_matrix, nil_index_list(), rep_matrix(0, N, n_reg),
      "assigning variable optima_matrix");
    current_statement__ = 105;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 103;
      assign(optima_matrix,
        cons_list(index_uni(i), cons_list(index_omni(), nil_index_list())),
        weights_regimes(n_reg, a,
          transpose(
            rvalue(t_beginning,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())), "t_beginning")),
          transpose(
            rvalue(t_end,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())), "t_end")),
          rvalue(times,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())), "times"),
          transpose(
            rvalue(reg_match,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())), "reg_match")),
          nodes[(i - 1)], pstream__), "assigning variable optima_matrix");}
    current_statement__ = 106;
    return optima_matrix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_optima_matrix_functor__ {
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>>, -1, -1>
operator()(const int& N, const int& n_reg, const T2__& a,
           const T3__& t_beginning, const T4__& t_end, const T5__& times,
           const T6__& reg_match, const std::vector<int>& nodes,
           std::ostream* pstream__)  const 
{
return calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times, reg_match,
         nodes, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU_reg_priorpc final : public model_base_crtp<model_blouchOU_reg_priorpc> {
private:
  int N;
  int n_reg;
  int max_node_num;
  Eigen::Matrix<double, -1, 1> Y_obs;
  Eigen::Matrix<double, -1, 1> Y_error;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, -1> tij;
  Eigen::Matrix<double, -1, -1> t_beginning;
  Eigen::Matrix<double, -1, -1> t_end;
  Eigen::Matrix<double, -1, -1> times;
  Eigen::Matrix<double, -1, -1> reg_match;
  std::vector<int> nodes;
 
public:
  ~model_blouchOU_reg_priorpc() { }
  
  inline std::string model_name() const final { return "model_blouchOU_reg_priorpc"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_blouchOU_reg_priorpc(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU_reg_priorpc_namespace::model_blouchOU_reg_priorpc";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 25;
      context__.validate_dims("data initialization","n_reg","int",
          context__.to_vec());
      n_reg = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      n_reg = context__.vals_i("n_reg")[(1 - 1)];
      current_statement__ = 26;
      context__.validate_dims("data initialization","max_node_num","int",
          context__.to_vec());
      max_node_num = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      max_node_num = context__.vals_i("max_node_num")[(1 - 1)];
      current_statement__ = 27;
      validate_non_negative_index("Y_obs", "N", N);
      current_statement__ = 28;
      context__.validate_dims("data initialization","Y_obs","double",
          context__.to_vec(N));
      Y_obs = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_obs_flat__;
        current_statement__ = 28;
        assign(Y_obs_flat__, nil_index_list(), context__.vals_r("Y_obs"),
          "assigning variable Y_obs_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 28;
          assign(Y_obs, cons_list(index_uni(sym1__), nil_index_list()),
            Y_obs_flat__[(pos__ - 1)], "assigning variable Y_obs");
          current_statement__ = 28;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 29;
      validate_non_negative_index("Y_error", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization","Y_error","double",
          context__.to_vec(N));
      Y_error = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_error, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_error_flat__;
        current_statement__ = 30;
        assign(Y_error_flat__, nil_index_list(), context__.vals_r("Y_error"),
          "assigning variable Y_error_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 30;
          assign(Y_error, cons_list(index_uni(sym1__), nil_index_list()),
            Y_error_flat__[(pos__ - 1)], "assigning variable Y_error");
          current_statement__ = 30;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 31;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 32;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 33;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 33;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 33;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 34;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 35;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 36;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 36;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 36;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 37;
      validate_non_negative_index("t_beginning", "N", N);
      current_statement__ = 38;
      validate_non_negative_index("t_beginning", "max_node_num", max_node_num);
      current_statement__ = 39;
      context__.validate_dims("data initialization","t_beginning","double",
          context__.to_vec(N, max_node_num));
      t_beginning = Eigen::Matrix<double, -1, -1>(N, max_node_num);
      stan::math::fill(t_beginning, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_beginning_flat__;
        current_statement__ = 39;
        assign(t_beginning_flat__, nil_index_list(),
          context__.vals_r("t_beginning"),
          "assigning variable t_beginning_flat__");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          current_statement__ = 39;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 39;
            assign(t_beginning,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              t_beginning_flat__[(pos__ - 1)],
              "assigning variable t_beginning");
            current_statement__ = 39;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 40;
      validate_non_negative_index("t_end", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("t_end", "max_node_num", max_node_num);
      current_statement__ = 42;
      context__.validate_dims("data initialization","t_end","double",
          context__.to_vec(N, max_node_num));
      t_end = Eigen::Matrix<double, -1, -1>(N, max_node_num);
      stan::math::fill(t_end, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_end_flat__;
        current_statement__ = 42;
        assign(t_end_flat__, nil_index_list(), context__.vals_r("t_end"),
          "assigning variable t_end_flat__");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          current_statement__ = 42;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 42;
            assign(t_end,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              t_end_flat__[(pos__ - 1)], "assigning variable t_end");
            current_statement__ = 42;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 43;
      validate_non_negative_index("times", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("times", "max_node_num", max_node_num);
      current_statement__ = 45;
      context__.validate_dims("data initialization","times","double",
          context__.to_vec(N, max_node_num));
      times = Eigen::Matrix<double, -1, -1>(N, max_node_num);
      stan::math::fill(times, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> times_flat__;
        current_statement__ = 45;
        assign(times_flat__, nil_index_list(), context__.vals_r("times"),
          "assigning variable times_flat__");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            assign(times,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              times_flat__[(pos__ - 1)], "assigning variable times");
            current_statement__ = 45;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 46;
      validate_non_negative_index("reg_match", "N", N);
      current_statement__ = 47;
      validate_non_negative_index("reg_match", "max_node_num", max_node_num);
      current_statement__ = 48;
      context__.validate_dims("data initialization","reg_match","double",
          context__.to_vec(N, max_node_num));
      reg_match = Eigen::Matrix<double, -1, -1>(N, max_node_num);
      stan::math::fill(reg_match, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> reg_match_flat__;
        current_statement__ = 48;
        assign(reg_match_flat__, nil_index_list(),
          context__.vals_r("reg_match"),
          "assigning variable reg_match_flat__");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= max_node_num; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 48;
            assign(reg_match,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              reg_match_flat__[(pos__ - 1)], "assigning variable reg_match");
            current_statement__ = 48;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 49;
      validate_non_negative_index("nodes", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","nodes","int",
          context__.to_vec(N));
      nodes = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 50;
      assign(nodes, nil_index_list(), context__.vals_i("nodes"),
        "assigning variable nodes");
      current_statement__ = 51;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 52;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 53;
      validate_non_negative_index("L_v", "N", N);
      current_statement__ = 54;
      validate_non_negative_index("L_v", "N", N);
      current_statement__ = 55;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 56;
      validate_non_negative_index("optima", "n_reg", n_reg);
      current_statement__ = 57;
      validate_non_negative_index("dmX", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("dmX", "n_reg", n_reg);
      current_statement__ = 59;
      validate_non_negative_index("Y_sim_obs", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("Y_sim", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU_reg_priorpc_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU_reg_priorpc_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> V;
      V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> L_v;
      L_v = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(L_v, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      hl = lognormal_rng(stan::math::log(0.25), 0.75, base_rng__);
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      vy = exponential_rng(20, base_rng__);
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      a = (stan::math::log(2) / hl);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma2_y = (vy * (2 * (stan::math::log(2) / hl)));
      Eigen::Matrix<double, -1, 1> optima;
      optima = Eigen::Matrix<double, -1, 1>(n_reg);
      stan::math::fill(optima, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> dmX;
      dmX = Eigen::Matrix<double, -1, -1>(N, n_reg);
      stan::math::fill(dmX, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Y_sim_obs;
      Y_sim_obs = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_sim_obs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Y_sim;
      Y_sim = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y_sim, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(V, nil_index_list(), calc_V(a, sigma2_y, ta, tij, pstream__),
        "assigning variable V");
      current_statement__ = 15;
      for (int i = 1; i <= n_reg; ++i) {
        current_statement__ = 13;
        assign(optima, cons_list(index_uni(i), nil_index_list()),
          normal_rng(0, 1, base_rng__), "assigning variable optima");}
      current_statement__ = 16;
      assign(V, nil_index_list(), calc_V(a, sigma2_y, ta, tij, pstream__),
        "assigning variable V");
      current_statement__ = 17;
      assign(L_v, nil_index_list(), cholesky_decompose(V),
        "assigning variable L_v");
      current_statement__ = 18;
      assign(dmX, nil_index_list(),
        calc_optima_matrix(N, n_reg, a, t_beginning, t_end, times, reg_match,
          nodes, pstream__), "assigning variable dmX");
      current_statement__ = 19;
      assign(mu, nil_index_list(), multiply(dmX, optima),
        "assigning variable mu");
      current_statement__ = 20;
      assign(Y_sim, nil_index_list(),
        multi_normal_cholesky_rng(mu, L_v, base_rng__),
        "assigning variable Y_sim");
      current_statement__ = 23;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 21;
        assign(Y_sim_obs, cons_list(index_uni(i), nil_index_list()),
          normal_rng(Y_sim[(i - 1)], Y_error[(i - 1)], base_rng__),
          "assigning variable Y_sim_obs");}
      current_statement__ = 4;
      current_statement__ = 4;
      check_greater_or_equal(function__, "hl", hl, 0);
      current_statement__ = 5;
      current_statement__ = 5;
      check_greater_or_equal(function__, "vy", vy, 0);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_v,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_v"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      vars__.emplace_back(hl);
      vars__.emplace_back(vy);
      vars__.emplace_back(a);
      vars__.emplace_back(sigma2_y);
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        vars__.emplace_back(optima[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(dmX,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "dmX"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y_sim_obs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Y_sim[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("V");
    names__.emplace_back("L_v");
    names__.emplace_back("mu");
    names__.emplace_back("hl");
    names__.emplace_back("vy");
    names__.emplace_back("a");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("optima");
    names__.emplace_back("dmX");
    names__.emplace_back("Y_sim_obs");
    names__.emplace_back("Y_sim");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_reg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_reg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "sigma2_y");
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "optima" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dmX" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "hl");
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "sigma2_y");
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "optima" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_reg; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dmX" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim_obs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Y_sim" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" << n_reg << "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_reg << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_v\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"optima\",\"type\":{\"name\":\"vector\",\"length\":" << n_reg << "},\"block\":\"generated_quantities\"},{\"name\":\"dmX\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_reg << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim_obs\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Y_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU_reg_priorpc_namespace::model_blouchOU_reg_priorpc;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_reg_priorpc_namespace::profiles__;
}
#endif
#endif
